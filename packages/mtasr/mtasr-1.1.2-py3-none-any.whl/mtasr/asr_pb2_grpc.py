# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import asr_pb2 as asr__pb2


class ASRStub(object):
    """Service that implements ASR
    The details of the communication is described in: https://confluence.mthreads.com/pages/viewpage.action?pageId=83871842
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.OneSentenceSpeechRecognition = channel.stream_stream(
                '/asr.v1.ASR/OneSentenceSpeechRecognition',
                request_serializer=asr__pb2.Request.SerializeToString,
                response_deserializer=asr__pb2.Response.FromString,
                )
        self.RealTimeSpeechRecognition = channel.stream_stream(
                '/asr.v1.ASR/RealTimeSpeechRecognition',
                request_serializer=asr__pb2.Request.SerializeToString,
                response_deserializer=asr__pb2.Response.FromString,
                )


class ASRServicer(object):
    """Service that implements ASR
    The details of the communication is described in: https://confluence.mthreads.com/pages/viewpage.action?pageId=83871842
    """

    def OneSentenceSpeechRecognition(self, request_iterator, context):
        """ASR in one sentence case. It will STOP recognition after the very first endpoint.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RealTimeSpeechRecognition(self, request_iterator, context):
        """Real-time streaming recognition. It will CONTINUE recognition after each endpoint.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ASRServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'OneSentenceSpeechRecognition': grpc.stream_stream_rpc_method_handler(
                    servicer.OneSentenceSpeechRecognition,
                    request_deserializer=asr__pb2.Request.FromString,
                    response_serializer=asr__pb2.Response.SerializeToString,
            ),
            'RealTimeSpeechRecognition': grpc.stream_stream_rpc_method_handler(
                    servicer.RealTimeSpeechRecognition,
                    request_deserializer=asr__pb2.Request.FromString,
                    response_serializer=asr__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'asr.v1.ASR', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ASR(object):
    """Service that implements ASR
    The details of the communication is described in: https://confluence.mthreads.com/pages/viewpage.action?pageId=83871842
    """

    @staticmethod
    def OneSentenceSpeechRecognition(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/asr.v1.ASR/OneSentenceSpeechRecognition',
            asr__pb2.Request.SerializeToString,
            asr__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RealTimeSpeechRecognition(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/asr.v1.ASR/RealTimeSpeechRecognition',
            asr__pb2.Request.SerializeToString,
            asr__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
