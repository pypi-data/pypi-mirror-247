# coding: utf-8

"""
    Carrier API

    **Seaplane Global Messaging Service**  For information about authentication see [authentication](/docs/authentication)   # noqa: E501

    The version of the OpenAPI document: 1.0.0-beta
    Contact: support@seaplane.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from seaplane_framework.api import schemas  # noqa: F401


class KeyValueConfig(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The set of possible values to configure on a specific key-value store.
    """


    class MetaOapg:
        
        class properties:
            max_value_size = schemas.IntSchema
            
            
            class history(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 64
                    inclusive_minimum = 1
            
            
            class ttl(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 315360000
                    inclusive_minimum = 0
            
            
            class replicas(
                schemas.EnumBase,
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        1: "POSITIVE_1",
                        3: "POSITIVE_3",
                        5: "POSITIVE_5",
                    }
                
                @schemas.classproperty
                def POSITIVE_1(cls):
                    return cls(1)
                
                @schemas.classproperty
                def POSITIVE_3(cls):
                    return cls(3)
                
                @schemas.classproperty
                def POSITIVE_5(cls):
                    return cls(5)
            
            
            class allow_locations(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Location']:
                        return Location
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Location'], typing.List['Location']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'allow_locations':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Location':
                    return super().__getitem__(i)
            
            
            class deny_locations(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Location']:
                        return Location
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Location'], typing.List['Location']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'deny_locations':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Location':
                    return super().__getitem__(i)
            __annotations__ = {
                "max_value_size": max_value_size,
                "history": history,
                "ttl": ttl,
                "replicas": replicas,
                "allow_locations": allow_locations,
                "deny_locations": deny_locations,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_value_size"]) -> MetaOapg.properties.max_value_size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["history"]) -> MetaOapg.properties.history: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ttl"]) -> MetaOapg.properties.ttl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["replicas"]) -> MetaOapg.properties.replicas: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allow_locations"]) -> MetaOapg.properties.allow_locations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deny_locations"]) -> MetaOapg.properties.deny_locations: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["max_value_size"], typing_extensions.Literal["history"], typing_extensions.Literal["ttl"], typing_extensions.Literal["replicas"], typing_extensions.Literal["allow_locations"], typing_extensions.Literal["deny_locations"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_value_size"]) -> typing.Union[MetaOapg.properties.max_value_size, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["history"]) -> typing.Union[MetaOapg.properties.history, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ttl"]) -> typing.Union[MetaOapg.properties.ttl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["replicas"]) -> typing.Union[MetaOapg.properties.replicas, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allow_locations"]) -> typing.Union[MetaOapg.properties.allow_locations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deny_locations"]) -> typing.Union[MetaOapg.properties.deny_locations, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["max_value_size"], typing_extensions.Literal["history"], typing_extensions.Literal["ttl"], typing_extensions.Literal["replicas"], typing_extensions.Literal["allow_locations"], typing_extensions.Literal["deny_locations"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        max_value_size: typing.Union[MetaOapg.properties.max_value_size, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        history: typing.Union[MetaOapg.properties.history, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ttl: typing.Union[MetaOapg.properties.ttl, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        replicas: typing.Union[MetaOapg.properties.replicas, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        allow_locations: typing.Union[MetaOapg.properties.allow_locations, list, tuple, schemas.Unset] = schemas.unset,
        deny_locations: typing.Union[MetaOapg.properties.deny_locations, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'KeyValueConfig':
        return super().__new__(
            cls,
            *_args,
            max_value_size=max_value_size,
            history=history,
            ttl=ttl,
            replicas=replicas,
            allow_locations=allow_locations,
            deny_locations=deny_locations,
            _configuration=_configuration,
        )

from seaplane_framework.api.model.location import Location
