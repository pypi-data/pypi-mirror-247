# coding: utf-8

"""
    Carrier API

    **Seaplane Global Messaging Service**  For information about authentication see [authentication](/docs/authentication)   # noqa: E501

    The version of the OpenAPI document: 1.0.0-beta
    Contact: support@seaplane.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from seaplane_framework.api import schemas  # noqa: F401


class Bucket(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Bucket configuration
    """


    class MetaOapg:
        
        class properties:
            description = schemas.StrSchema
            
            
            class replicas(
                schemas.EnumBase,
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        1: "POSITIVE_1",
                        3: "POSITIVE_3",
                        5: "POSITIVE_5",
                    }
                
                @schemas.classproperty
                def POSITIVE_1(cls):
                    return cls(1)
                
                @schemas.classproperty
                def POSITIVE_3(cls):
                    return cls(3)
                
                @schemas.classproperty
                def POSITIVE_5(cls):
                    return cls(5)
            
            
            class allow_locations(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Location']:
                        return Location
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Location'], typing.List['Location']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'allow_locations':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Location':
                    return super().__getitem__(i)
            
            
            class deny_locations(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Location']:
                        return Location
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Location'], typing.List['Location']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'deny_locations':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Location':
                    return super().__getitem__(i)
            
            
            class max_bytes(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_minimum = -1
            notify = schemas.StrSchema
            __annotations__ = {
                "description": description,
                "replicas": replicas,
                "allow_locations": allow_locations,
                "deny_locations": deny_locations,
                "max_bytes": max_bytes,
                "notify": notify,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["replicas"]) -> MetaOapg.properties.replicas: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allow_locations"]) -> MetaOapg.properties.allow_locations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deny_locations"]) -> MetaOapg.properties.deny_locations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_bytes"]) -> MetaOapg.properties.max_bytes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notify"]) -> MetaOapg.properties.notify: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description"], typing_extensions.Literal["replicas"], typing_extensions.Literal["allow_locations"], typing_extensions.Literal["deny_locations"], typing_extensions.Literal["max_bytes"], typing_extensions.Literal["notify"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["replicas"]) -> typing.Union[MetaOapg.properties.replicas, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allow_locations"]) -> typing.Union[MetaOapg.properties.allow_locations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deny_locations"]) -> typing.Union[MetaOapg.properties.deny_locations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_bytes"]) -> typing.Union[MetaOapg.properties.max_bytes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notify"]) -> typing.Union[MetaOapg.properties.notify, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description"], typing_extensions.Literal["replicas"], typing_extensions.Literal["allow_locations"], typing_extensions.Literal["deny_locations"], typing_extensions.Literal["max_bytes"], typing_extensions.Literal["notify"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        replicas: typing.Union[MetaOapg.properties.replicas, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        allow_locations: typing.Union[MetaOapg.properties.allow_locations, list, tuple, schemas.Unset] = schemas.unset,
        deny_locations: typing.Union[MetaOapg.properties.deny_locations, list, tuple, schemas.Unset] = schemas.unset,
        max_bytes: typing.Union[MetaOapg.properties.max_bytes, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        notify: typing.Union[MetaOapg.properties.notify, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'Bucket':
        return super().__new__(
            cls,
            *_args,
            description=description,
            replicas=replicas,
            allow_locations=allow_locations,
            deny_locations=deny_locations,
            max_bytes=max_bytes,
            notify=notify,
            _configuration=_configuration,
        )

from seaplane_framework.api.model.location import Location
