# coding: utf-8

"""
    Carrier API

    **Seaplane Global Messaging Service**  For information about authentication see [authentication](/docs/authentication)   # noqa: E501

    The version of the OpenAPI document: 1.0.0-beta
    Contact: support@seaplane.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from seaplane_framework.api import schemas  # noqa: F401


class SyncResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Customise messages returned via synchronous responses
    """


    class MetaOapg:
        required = {
            "sync_response",
        }
        
        class properties:
            
            
            class sync_response(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        status = schemas.StrSchema
                    
                        @staticmethod
                        def headers() -> typing.Type['Headers']:
                            return Headers
                    
                        @staticmethod
                        def metadata_headers() -> typing.Type['MetadataHeaders']:
                            return MetadataHeaders
                        __annotations__ = {
                            "status": status,
                            "headers": headers,
                            "metadata_headers": metadata_headers,
                        }
                    additional_properties = schemas.NotAnyTypeSchema
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["headers"]) -> 'Headers': ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["metadata_headers"]) -> 'MetadataHeaders': ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["status"], typing_extensions.Literal["headers"], typing_extensions.Literal["metadata_headers"], ]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["headers"]) -> typing.Union['Headers', schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["metadata_headers"]) -> typing.Union['MetadataHeaders', schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["status"], typing_extensions.Literal["headers"], typing_extensions.Literal["metadata_headers"], ]):
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
                    headers: typing.Union['Headers', schemas.Unset] = schemas.unset,
                    metadata_headers: typing.Union['MetadataHeaders', schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sync_response':
                    return super().__new__(
                        cls,
                        *_args,
                        status=status,
                        headers=headers,
                        metadata_headers=metadata_headers,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "sync_response": sync_response,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    sync_response: MetaOapg.properties.sync_response
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sync_response"]) -> MetaOapg.properties.sync_response: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["sync_response"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sync_response"]) -> MetaOapg.properties.sync_response: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["sync_response"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        sync_response: typing.Union[MetaOapg.properties.sync_response, dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SyncResponse':
        return super().__new__(
            cls,
            *_args,
            sync_response=sync_response,
            _configuration=_configuration,
        )

from seaplane_framework.api.model.headers import Headers
from seaplane_framework.api.model.metadata_headers import MetadataHeaders
