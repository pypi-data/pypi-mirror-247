# coding: utf-8

"""
    Carrier API

    **Seaplane Global Messaging Service**  For information about authentication see [authentication](/docs/authentication)   # noqa: E501

    The version of the OpenAPI document: 1.0.0-beta
    Contact: support@seaplane.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from seaplane_framework.api import schemas  # noqa: F401


class CarrierInputConfig(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Configuration for Carrier stream input
    """


    class MetaOapg:
        
        class properties:
            
            
            class stream(
                schemas.StrSchema
            ):
                pass
            
            
            class subject(
                schemas.StrSchema
            ):
                pass
            queue = schemas.StrSchema
            durable = schemas.StrSchema
            bind = schemas.BoolSchema
            
            
            class deliver(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ALL(cls):
                    return cls("all")
                
                @schemas.classproperty
                def LAST(cls):
                    return cls("last")
            
            
            class ack_wait(
                schemas.StrSchema
            ):
                pass
            
            
            class max_ack_pending(
                schemas.IntSchema
            ):
                pass
            __annotations__ = {
                "stream": stream,
                "subject": subject,
                "queue": queue,
                "durable": durable,
                "bind": bind,
                "deliver": deliver,
                "ack_wait": ack_wait,
                "max_ack_pending": max_ack_pending,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stream"]) -> MetaOapg.properties.stream: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subject"]) -> MetaOapg.properties.subject: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["queue"]) -> MetaOapg.properties.queue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["durable"]) -> MetaOapg.properties.durable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bind"]) -> MetaOapg.properties.bind: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deliver"]) -> MetaOapg.properties.deliver: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ack_wait"]) -> MetaOapg.properties.ack_wait: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_ack_pending"]) -> MetaOapg.properties.max_ack_pending: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["stream"], typing_extensions.Literal["subject"], typing_extensions.Literal["queue"], typing_extensions.Literal["durable"], typing_extensions.Literal["bind"], typing_extensions.Literal["deliver"], typing_extensions.Literal["ack_wait"], typing_extensions.Literal["max_ack_pending"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stream"]) -> typing.Union[MetaOapg.properties.stream, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subject"]) -> typing.Union[MetaOapg.properties.subject, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["queue"]) -> typing.Union[MetaOapg.properties.queue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["durable"]) -> typing.Union[MetaOapg.properties.durable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bind"]) -> typing.Union[MetaOapg.properties.bind, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deliver"]) -> typing.Union[MetaOapg.properties.deliver, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ack_wait"]) -> typing.Union[MetaOapg.properties.ack_wait, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_ack_pending"]) -> typing.Union[MetaOapg.properties.max_ack_pending, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["stream"], typing_extensions.Literal["subject"], typing_extensions.Literal["queue"], typing_extensions.Literal["durable"], typing_extensions.Literal["bind"], typing_extensions.Literal["deliver"], typing_extensions.Literal["ack_wait"], typing_extensions.Literal["max_ack_pending"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        stream: typing.Union[MetaOapg.properties.stream, str, schemas.Unset] = schemas.unset,
        subject: typing.Union[MetaOapg.properties.subject, str, schemas.Unset] = schemas.unset,
        queue: typing.Union[MetaOapg.properties.queue, str, schemas.Unset] = schemas.unset,
        durable: typing.Union[MetaOapg.properties.durable, str, schemas.Unset] = schemas.unset,
        bind: typing.Union[MetaOapg.properties.bind, bool, schemas.Unset] = schemas.unset,
        deliver: typing.Union[MetaOapg.properties.deliver, str, schemas.Unset] = schemas.unset,
        ack_wait: typing.Union[MetaOapg.properties.ack_wait, str, schemas.Unset] = schemas.unset,
        max_ack_pending: typing.Union[MetaOapg.properties.max_ack_pending, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'CarrierInputConfig':
        return super().__new__(
            cls,
            *_args,
            stream=stream,
            subject=subject,
            queue=queue,
            durable=durable,
            bind=bind,
            deliver=deliver,
            ack_wait=ack_wait,
            max_ack_pending=max_ack_pending,
            _configuration=_configuration,
        )
