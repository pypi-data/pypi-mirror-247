# coding: utf-8

"""
    Carrier API

    **Seaplane Global Messaging Service**  For information about authentication see [authentication](/docs/authentication)   # noqa: E501

    The version of the OpenAPI document: 1.0.0-beta
    Contact: support@seaplane.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from seaplane_framework.api import schemas  # noqa: F401


class ObjectStat(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Information about an object
    """


    class MetaOapg:
        required = {
            "mod_time",
            "size",
            "digest",
            "name",
        }
        
        class properties:
            name = schemas.StrSchema
            size = schemas.IntSchema
            mod_time = schemas.IntSchema
            digest = schemas.StrSchema
            __annotations__ = {
                "name": name,
                "size": size,
                "mod_time": mod_time,
                "digest": digest,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    mod_time: MetaOapg.properties.mod_time
    size: MetaOapg.properties.size
    digest: MetaOapg.properties.digest
    name: MetaOapg.properties.name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mod_time"]) -> MetaOapg.properties.mod_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["size"]) -> MetaOapg.properties.size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["digest"]) -> MetaOapg.properties.digest: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["mod_time"], typing_extensions.Literal["size"], typing_extensions.Literal["digest"], typing_extensions.Literal["name"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mod_time"]) -> MetaOapg.properties.mod_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["size"]) -> MetaOapg.properties.size: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["digest"]) -> MetaOapg.properties.digest: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["mod_time"], typing_extensions.Literal["size"], typing_extensions.Literal["digest"], typing_extensions.Literal["name"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        mod_time: typing.Union[MetaOapg.properties.mod_time, decimal.Decimal, int, ],
        size: typing.Union[MetaOapg.properties.size, decimal.Decimal, int, ],
        digest: typing.Union[MetaOapg.properties.digest, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ObjectStat':
        return super().__new__(
            cls,
            *_args,
            mod_time=mod_time,
            size=size,
            digest=digest,
            name=name,
            _configuration=_configuration,
        )
