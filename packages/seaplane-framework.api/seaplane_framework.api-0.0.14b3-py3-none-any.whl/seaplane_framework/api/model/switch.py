# coding: utf-8

"""
    Carrier API

    **Seaplane Global Messaging Service**  For information about authentication see [authentication](/docs/authentication)   # noqa: E501

    The version of the OpenAPI document: 1.0.0-beta
    Contact: support@seaplane.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from seaplane_framework.api import schemas  # noqa: F401


class Switch(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The switch output type allows you to route messages to different outputs based on their contents.
    """


    class MetaOapg:
        required = {
            "cases",
        }
        
        class properties:
            
            
            class cases(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "output",
                                "check",
                            }
                            
                            class properties:
                                
                                
                                class check(
                                    schemas.StrSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        regex=[{
                                            'pattern': r'^.+$',  # noqa: E501
                                        }]
                                
                                
                                class output(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        class properties:
                                        
                                            @staticmethod
                                            def carrier() -> typing.Type['CarrierOutput']:
                                                return CarrierOutput
                                        
                                            @staticmethod
                                            def sync_response() -> typing.Type['SyncResponse']:
                                                return SyncResponse
                                            
                                            
                                            class drop(
                                                schemas.DictSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    additional_properties = schemas.NotAnyTypeSchema
                                            
                                                def __new__(
                                                    cls,
                                                    *_args: typing.Union[dict, frozendict.frozendict, ],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'drop':
                                                    return super().__new__(
                                                        cls,
                                                        *_args,
                                                        _configuration=_configuration,
                                                    )
                                        
                                            @staticmethod
                                            def http_client() -> typing.Type['HttpClientOutput']:
                                                return HttpClientOutput
                                        
                                            @staticmethod
                                            def azure_blob_storage() -> typing.Type['AzureBlobStorageOutput']:
                                                return AzureBlobStorageOutput
                                        
                                            @staticmethod
                                            def sql_raw() -> typing.Type['SqlRaw']:
                                                return SqlRaw
                                            __annotations__ = {
                                                "carrier": carrier,
                                                "sync_response": sync_response,
                                                "drop": drop,
                                                "http_client": http_client,
                                                "azure_blob_storage": azure_blob_storage,
                                                "sql_raw": sql_raw,
                                            }
                                        additional_properties = schemas.NotAnyTypeSchema
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["carrier"]) -> 'CarrierOutput': ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["sync_response"]) -> 'SyncResponse': ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["drop"]) -> MetaOapg.properties.drop: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["http_client"]) -> 'HttpClientOutput': ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["azure_blob_storage"]) -> 'AzureBlobStorageOutput': ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["sql_raw"]) -> 'SqlRaw': ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["carrier"], typing_extensions.Literal["sync_response"], typing_extensions.Literal["drop"], typing_extensions.Literal["http_client"], typing_extensions.Literal["azure_blob_storage"], typing_extensions.Literal["sql_raw"], ]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["carrier"]) -> typing.Union['CarrierOutput', schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["sync_response"]) -> typing.Union['SyncResponse', schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["drop"]) -> typing.Union[MetaOapg.properties.drop, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["http_client"]) -> typing.Union['HttpClientOutput', schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["azure_blob_storage"]) -> typing.Union['AzureBlobStorageOutput', schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["sql_raw"]) -> typing.Union['SqlRaw', schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["carrier"], typing_extensions.Literal["sync_response"], typing_extensions.Literal["drop"], typing_extensions.Literal["http_client"], typing_extensions.Literal["azure_blob_storage"], typing_extensions.Literal["sql_raw"], ]):
                                        return super().get_item_oapg(name)
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        carrier: typing.Union['CarrierOutput', schemas.Unset] = schemas.unset,
                                        sync_response: typing.Union['SyncResponse', schemas.Unset] = schemas.unset,
                                        drop: typing.Union[MetaOapg.properties.drop, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                                        http_client: typing.Union['HttpClientOutput', schemas.Unset] = schemas.unset,
                                        azure_blob_storage: typing.Union['AzureBlobStorageOutput', schemas.Unset] = schemas.unset,
                                        sql_raw: typing.Union['SqlRaw', schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'output':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            carrier=carrier,
                                            sync_response=sync_response,
                                            drop=drop,
                                            http_client=http_client,
                                            azure_blob_storage=azure_blob_storage,
                                            sql_raw=sql_raw,
                                            _configuration=_configuration,
                                        )
                                __annotations__ = {
                                    "check": check,
                                    "output": output,
                                }
                            additional_properties = schemas.NotAnyTypeSchema
                        
                        output: MetaOapg.properties.output
                        check: MetaOapg.properties.check
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["output"]) -> MetaOapg.properties.output: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["check"]) -> MetaOapg.properties.check: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["output"], typing_extensions.Literal["check"], ]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["output"]) -> MetaOapg.properties.output: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["check"]) -> MetaOapg.properties.check: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["output"], typing_extensions.Literal["check"], ]):
                            return super().get_item_oapg(name)
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            output: typing.Union[MetaOapg.properties.output, dict, frozendict.frozendict, ],
                            check: typing.Union[MetaOapg.properties.check, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                output=output,
                                check=check,
                                _configuration=_configuration,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cases':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "cases": cases,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    cases: MetaOapg.properties.cases
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cases"]) -> MetaOapg.properties.cases: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["cases"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cases"]) -> MetaOapg.properties.cases: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cases"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        cases: typing.Union[MetaOapg.properties.cases, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'Switch':
        return super().__new__(
            cls,
            *_args,
            cases=cases,
            _configuration=_configuration,
        )

from seaplane_framework.api.model.azure_blob_storage_output import AzureBlobStorageOutput
from seaplane_framework.api.model.carrier_output import CarrierOutput
from seaplane_framework.api.model.http_client_output import HttpClientOutput
from seaplane_framework.api.model.sql_raw import SqlRaw
from seaplane_framework.api.model.sync_response import SyncResponse
