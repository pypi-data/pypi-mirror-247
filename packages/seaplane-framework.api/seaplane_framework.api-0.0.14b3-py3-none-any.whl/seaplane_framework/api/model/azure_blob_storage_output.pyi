# coding: utf-8

"""
    Carrier API

    **Seaplane Global Messaging Service**  For information about authentication see [authentication](/docs/authentication)   # noqa: E501

    The version of the OpenAPI document: 1.0.0-beta
    Contact: support@seaplane.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from seaplane_framework.api import schemas  # noqa: F401


class AzureBlobStorageOutput(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    defines model for AzureBlobStorageOutput
    """


    class MetaOapg:
        required = {
            "container",
        }
        
        class properties:
            
            
            class container(
                schemas.StrSchema
            ):
                pass
            storage_account = schemas.StrSchema
            storage_access_key = schemas.StrSchema
            storage_sas_token = schemas.StrSchema
            storage_connection_string = schemas.StrSchema
            path = schemas.StrSchema
            
            
            class blob_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def BLOCK(cls):
                    return cls("BLOCK")
                
                @schemas.classproperty
                def APPEND(cls):
                    return cls("APPEND")
            
            
            class public_access_level(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def PRIVATE(cls):
                    return cls("PRIVATE")
                
                @schemas.classproperty
                def BLOB(cls):
                    return cls("BLOB")
                
                @schemas.classproperty
                def CONTAINER(cls):
                    return cls("CONTAINER")
            max_in_flight = schemas.IntSchema
            __annotations__ = {
                "container": container,
                "storage_account": storage_account,
                "storage_access_key": storage_access_key,
                "storage_sas_token": storage_sas_token,
                "storage_connection_string": storage_connection_string,
                "path": path,
                "blob_type": blob_type,
                "public_access_level": public_access_level,
                "max_in_flight": max_in_flight,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    container: MetaOapg.properties.container
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["container"]) -> MetaOapg.properties.container: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["storage_account"]) -> MetaOapg.properties.storage_account: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["storage_access_key"]) -> MetaOapg.properties.storage_access_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["storage_sas_token"]) -> MetaOapg.properties.storage_sas_token: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["storage_connection_string"]) -> MetaOapg.properties.storage_connection_string: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["path"]) -> MetaOapg.properties.path: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["blob_type"]) -> MetaOapg.properties.blob_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["public_access_level"]) -> MetaOapg.properties.public_access_level: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_in_flight"]) -> MetaOapg.properties.max_in_flight: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["container"], typing_extensions.Literal["storage_account"], typing_extensions.Literal["storage_access_key"], typing_extensions.Literal["storage_sas_token"], typing_extensions.Literal["storage_connection_string"], typing_extensions.Literal["path"], typing_extensions.Literal["blob_type"], typing_extensions.Literal["public_access_level"], typing_extensions.Literal["max_in_flight"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["container"]) -> MetaOapg.properties.container: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["storage_account"]) -> typing.Union[MetaOapg.properties.storage_account, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["storage_access_key"]) -> typing.Union[MetaOapg.properties.storage_access_key, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["storage_sas_token"]) -> typing.Union[MetaOapg.properties.storage_sas_token, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["storage_connection_string"]) -> typing.Union[MetaOapg.properties.storage_connection_string, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["path"]) -> typing.Union[MetaOapg.properties.path, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["blob_type"]) -> typing.Union[MetaOapg.properties.blob_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["public_access_level"]) -> typing.Union[MetaOapg.properties.public_access_level, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_in_flight"]) -> typing.Union[MetaOapg.properties.max_in_flight, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["container"], typing_extensions.Literal["storage_account"], typing_extensions.Literal["storage_access_key"], typing_extensions.Literal["storage_sas_token"], typing_extensions.Literal["storage_connection_string"], typing_extensions.Literal["path"], typing_extensions.Literal["blob_type"], typing_extensions.Literal["public_access_level"], typing_extensions.Literal["max_in_flight"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        container: typing.Union[MetaOapg.properties.container, str, ],
        storage_account: typing.Union[MetaOapg.properties.storage_account, str, schemas.Unset] = schemas.unset,
        storage_access_key: typing.Union[MetaOapg.properties.storage_access_key, str, schemas.Unset] = schemas.unset,
        storage_sas_token: typing.Union[MetaOapg.properties.storage_sas_token, str, schemas.Unset] = schemas.unset,
        storage_connection_string: typing.Union[MetaOapg.properties.storage_connection_string, str, schemas.Unset] = schemas.unset,
        path: typing.Union[MetaOapg.properties.path, str, schemas.Unset] = schemas.unset,
        blob_type: typing.Union[MetaOapg.properties.blob_type, str, schemas.Unset] = schemas.unset,
        public_access_level: typing.Union[MetaOapg.properties.public_access_level, str, schemas.Unset] = schemas.unset,
        max_in_flight: typing.Union[MetaOapg.properties.max_in_flight, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'AzureBlobStorageOutput':
        return super().__new__(
            cls,
            *_args,
            container=container,
            storage_account=storage_account,
            storage_access_key=storage_access_key,
            storage_sas_token=storage_sas_token,
            storage_connection_string=storage_connection_string,
            path=path,
            blob_type=blob_type,
            public_access_level=public_access_level,
            max_in_flight=max_in_flight,
            _configuration=_configuration,
        )
