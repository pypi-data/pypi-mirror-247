# coding: utf-8

"""
    Carrier API

    **Seaplane Global Messaging Service**  For information about authentication see [authentication](/docs/authentication)   # noqa: E501

    The version of the OpenAPI document: 1.0.0-beta
    Contact: support@seaplane.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from seaplane_framework.api import schemas  # noqa: F401


class HTTPServer(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Receive messages POSTed over HTTP(S)
    """


    class MetaOapg:
        
        class properties:
            
            
            class http_server(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        address = schemas.StrSchema
                        
                        
                        class path(
                            schemas.StrSchema
                        ):
                        
                        
                            class MetaOapg:
                                regex=[{
                                    'pattern': r'[/].*',  # noqa: E501
                                }]
                        ws_path = schemas.StrSchema
                        ws_welcome_message = schemas.StrSchema
                        ws_rate_limit_message = schemas.StrSchema
                        
                        
                        class allowed_verbs(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.EnumBase,
                                    schemas.StrSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        enum_value_to_name = {
                                            "GET": "GET",
                                            "POST": "POST",
                                            "PUT": "PUT",
                                            "DELETE": "DELETE",
                                        }
                                    
                                    @schemas.classproperty
                                    def GET(cls):
                                        return cls("GET")
                                    
                                    @schemas.classproperty
                                    def POST(cls):
                                        return cls("POST")
                                    
                                    @schemas.classproperty
                                    def PUT(cls):
                                        return cls("PUT")
                                    
                                    @schemas.classproperty
                                    def DELETE(cls):
                                        return cls("DELETE")
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'allowed_verbs':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        timeout = schemas.StrSchema
                        rate_limit = schemas.StrSchema
                        cert_file = schemas.StrSchema
                        key_file = schemas.StrSchema
                    
                        @staticmethod
                        def cors() -> typing.Type['Cors']:
                            return Cors
                        __annotations__ = {
                            "address": address,
                            "path": path,
                            "ws_path": ws_path,
                            "ws_welcome_message": ws_welcome_message,
                            "ws_rate_limit_message": ws_rate_limit_message,
                            "allowed_verbs": allowed_verbs,
                            "timeout": timeout,
                            "rate_limit": rate_limit,
                            "cert_file": cert_file,
                            "key_file": key_file,
                            "cors": cors,
                        }
                    additional_properties = schemas.NotAnyTypeSchema
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["path"]) -> MetaOapg.properties.path: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["ws_path"]) -> MetaOapg.properties.ws_path: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["ws_welcome_message"]) -> MetaOapg.properties.ws_welcome_message: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["ws_rate_limit_message"]) -> MetaOapg.properties.ws_rate_limit_message: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["allowed_verbs"]) -> MetaOapg.properties.allowed_verbs: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["timeout"]) -> MetaOapg.properties.timeout: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["rate_limit"]) -> MetaOapg.properties.rate_limit: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["cert_file"]) -> MetaOapg.properties.cert_file: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["key_file"]) -> MetaOapg.properties.key_file: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["cors"]) -> 'Cors': ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["address"], typing_extensions.Literal["path"], typing_extensions.Literal["ws_path"], typing_extensions.Literal["ws_welcome_message"], typing_extensions.Literal["ws_rate_limit_message"], typing_extensions.Literal["allowed_verbs"], typing_extensions.Literal["timeout"], typing_extensions.Literal["rate_limit"], typing_extensions.Literal["cert_file"], typing_extensions.Literal["key_file"], typing_extensions.Literal["cors"], ]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> typing.Union[MetaOapg.properties.address, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["path"]) -> typing.Union[MetaOapg.properties.path, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["ws_path"]) -> typing.Union[MetaOapg.properties.ws_path, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["ws_welcome_message"]) -> typing.Union[MetaOapg.properties.ws_welcome_message, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["ws_rate_limit_message"]) -> typing.Union[MetaOapg.properties.ws_rate_limit_message, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["allowed_verbs"]) -> typing.Union[MetaOapg.properties.allowed_verbs, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["timeout"]) -> typing.Union[MetaOapg.properties.timeout, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["rate_limit"]) -> typing.Union[MetaOapg.properties.rate_limit, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["cert_file"]) -> typing.Union[MetaOapg.properties.cert_file, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["key_file"]) -> typing.Union[MetaOapg.properties.key_file, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["cors"]) -> typing.Union['Cors', schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["address"], typing_extensions.Literal["path"], typing_extensions.Literal["ws_path"], typing_extensions.Literal["ws_welcome_message"], typing_extensions.Literal["ws_rate_limit_message"], typing_extensions.Literal["allowed_verbs"], typing_extensions.Literal["timeout"], typing_extensions.Literal["rate_limit"], typing_extensions.Literal["cert_file"], typing_extensions.Literal["key_file"], typing_extensions.Literal["cors"], ]):
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    address: typing.Union[MetaOapg.properties.address, str, schemas.Unset] = schemas.unset,
                    path: typing.Union[MetaOapg.properties.path, str, schemas.Unset] = schemas.unset,
                    ws_path: typing.Union[MetaOapg.properties.ws_path, str, schemas.Unset] = schemas.unset,
                    ws_welcome_message: typing.Union[MetaOapg.properties.ws_welcome_message, str, schemas.Unset] = schemas.unset,
                    ws_rate_limit_message: typing.Union[MetaOapg.properties.ws_rate_limit_message, str, schemas.Unset] = schemas.unset,
                    allowed_verbs: typing.Union[MetaOapg.properties.allowed_verbs, list, tuple, schemas.Unset] = schemas.unset,
                    timeout: typing.Union[MetaOapg.properties.timeout, str, schemas.Unset] = schemas.unset,
                    rate_limit: typing.Union[MetaOapg.properties.rate_limit, str, schemas.Unset] = schemas.unset,
                    cert_file: typing.Union[MetaOapg.properties.cert_file, str, schemas.Unset] = schemas.unset,
                    key_file: typing.Union[MetaOapg.properties.key_file, str, schemas.Unset] = schemas.unset,
                    cors: typing.Union['Cors', schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'http_server':
                    return super().__new__(
                        cls,
                        *_args,
                        address=address,
                        path=path,
                        ws_path=ws_path,
                        ws_welcome_message=ws_welcome_message,
                        ws_rate_limit_message=ws_rate_limit_message,
                        allowed_verbs=allowed_verbs,
                        timeout=timeout,
                        rate_limit=rate_limit,
                        cert_file=cert_file,
                        key_file=key_file,
                        cors=cors,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "http_server": http_server,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["http_server"]) -> MetaOapg.properties.http_server: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["http_server"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["http_server"]) -> typing.Union[MetaOapg.properties.http_server, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["http_server"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        http_server: typing.Union[MetaOapg.properties.http_server, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'HTTPServer':
        return super().__new__(
            cls,
            *_args,
            http_server=http_server,
            _configuration=_configuration,
        )

from seaplane_framework.api.model.cors import Cors
