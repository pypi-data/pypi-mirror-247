# coding: utf-8

"""
    Carrier API

    **Seaplane Global Messaging Service**  For information about authentication see [authentication](/docs/authentication)   # noqa: E501

    The version of the OpenAPI document: 1.0.0-beta
    Contact: support@seaplane.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from seaplane_framework.api import schemas  # noqa: F401


class CarrierStreamOptions(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Stream configuration options
    """


    class MetaOapg:
        
        class properties:
            
            
            class message_ttl(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 86400
                    inclusive_minimum = 0
            
            
            class max_messages(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 1000000
                    inclusive_minimum = 0
            
            
            class max_size(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 1000000000
                    inclusive_minimum = 0
            
            
            class replicas(
                schemas.EnumBase,
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        1: "POSITIVE_1",
                        3: "POSITIVE_3",
                        5: "POSITIVE_5",
                    }
                
                @schemas.classproperty
                def POSITIVE_1(cls):
                    return cls(1)
                
                @schemas.classproperty
                def POSITIVE_3(cls):
                    return cls(3)
                
                @schemas.classproperty
                def POSITIVE_5(cls):
                    return cls(5)
            
            
            class allow_locations(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Location']:
                        return Location
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Location'], typing.List['Location']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'allow_locations':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Location':
                    return super().__getitem__(i)
            
            
            class deny_locations(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Location']:
                        return Location
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Location'], typing.List['Location']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'deny_locations':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Location':
                    return super().__getitem__(i)
            wait_for_ack = schemas.BoolSchema
            
            
            class ack_timeout(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 60
                    inclusive_minimum = 1
            
            
            class max_delivery_attempts(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 1000
                    inclusive_minimum = 1
            
            
            class max_delivery_time(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 3600
                    inclusive_minimum = 0
            dead_letter_sink = schemas.StrSchema
            allow_direct = schemas.BoolSchema
            __annotations__ = {
                "message_ttl": message_ttl,
                "max_messages": max_messages,
                "max_size": max_size,
                "replicas": replicas,
                "allow_locations": allow_locations,
                "deny_locations": deny_locations,
                "wait_for_ack": wait_for_ack,
                "ack_timeout": ack_timeout,
                "max_delivery_attempts": max_delivery_attempts,
                "max_delivery_time": max_delivery_time,
                "dead_letter_sink": dead_letter_sink,
                "allow_direct": allow_direct,
            }
        additional_properties = schemas.NotAnyTypeSchema

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["message_ttl"]) -> MetaOapg.properties.message_ttl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_messages"]) -> MetaOapg.properties.max_messages: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_size"]) -> MetaOapg.properties.max_size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["replicas"]) -> MetaOapg.properties.replicas: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allow_locations"]) -> MetaOapg.properties.allow_locations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deny_locations"]) -> MetaOapg.properties.deny_locations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wait_for_ack"]) -> MetaOapg.properties.wait_for_ack: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ack_timeout"]) -> MetaOapg.properties.ack_timeout: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_delivery_attempts"]) -> MetaOapg.properties.max_delivery_attempts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_delivery_time"]) -> MetaOapg.properties.max_delivery_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dead_letter_sink"]) -> MetaOapg.properties.dead_letter_sink: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allow_direct"]) -> MetaOapg.properties.allow_direct: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["message_ttl"], typing_extensions.Literal["max_messages"], typing_extensions.Literal["max_size"], typing_extensions.Literal["replicas"], typing_extensions.Literal["allow_locations"], typing_extensions.Literal["deny_locations"], typing_extensions.Literal["wait_for_ack"], typing_extensions.Literal["ack_timeout"], typing_extensions.Literal["max_delivery_attempts"], typing_extensions.Literal["max_delivery_time"], typing_extensions.Literal["dead_letter_sink"], typing_extensions.Literal["allow_direct"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["message_ttl"]) -> typing.Union[MetaOapg.properties.message_ttl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_messages"]) -> typing.Union[MetaOapg.properties.max_messages, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_size"]) -> typing.Union[MetaOapg.properties.max_size, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["replicas"]) -> typing.Union[MetaOapg.properties.replicas, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allow_locations"]) -> typing.Union[MetaOapg.properties.allow_locations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deny_locations"]) -> typing.Union[MetaOapg.properties.deny_locations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wait_for_ack"]) -> typing.Union[MetaOapg.properties.wait_for_ack, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ack_timeout"]) -> typing.Union[MetaOapg.properties.ack_timeout, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_delivery_attempts"]) -> typing.Union[MetaOapg.properties.max_delivery_attempts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_delivery_time"]) -> typing.Union[MetaOapg.properties.max_delivery_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dead_letter_sink"]) -> typing.Union[MetaOapg.properties.dead_letter_sink, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allow_direct"]) -> typing.Union[MetaOapg.properties.allow_direct, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["message_ttl"], typing_extensions.Literal["max_messages"], typing_extensions.Literal["max_size"], typing_extensions.Literal["replicas"], typing_extensions.Literal["allow_locations"], typing_extensions.Literal["deny_locations"], typing_extensions.Literal["wait_for_ack"], typing_extensions.Literal["ack_timeout"], typing_extensions.Literal["max_delivery_attempts"], typing_extensions.Literal["max_delivery_time"], typing_extensions.Literal["dead_letter_sink"], typing_extensions.Literal["allow_direct"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, None, ],
        message_ttl: typing.Union[MetaOapg.properties.message_ttl, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        max_messages: typing.Union[MetaOapg.properties.max_messages, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        max_size: typing.Union[MetaOapg.properties.max_size, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        replicas: typing.Union[MetaOapg.properties.replicas, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        allow_locations: typing.Union[MetaOapg.properties.allow_locations, list, tuple, schemas.Unset] = schemas.unset,
        deny_locations: typing.Union[MetaOapg.properties.deny_locations, list, tuple, schemas.Unset] = schemas.unset,
        wait_for_ack: typing.Union[MetaOapg.properties.wait_for_ack, bool, schemas.Unset] = schemas.unset,
        ack_timeout: typing.Union[MetaOapg.properties.ack_timeout, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        max_delivery_attempts: typing.Union[MetaOapg.properties.max_delivery_attempts, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        max_delivery_time: typing.Union[MetaOapg.properties.max_delivery_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        dead_letter_sink: typing.Union[MetaOapg.properties.dead_letter_sink, str, schemas.Unset] = schemas.unset,
        allow_direct: typing.Union[MetaOapg.properties.allow_direct, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'CarrierStreamOptions':
        return super().__new__(
            cls,
            *_args,
            message_ttl=message_ttl,
            max_messages=max_messages,
            max_size=max_size,
            replicas=replicas,
            allow_locations=allow_locations,
            deny_locations=deny_locations,
            wait_for_ack=wait_for_ack,
            ack_timeout=ack_timeout,
            max_delivery_attempts=max_delivery_attempts,
            max_delivery_time=max_delivery_time,
            dead_letter_sink=dead_letter_sink,
            allow_direct=allow_direct,
            _configuration=_configuration,
        )

from seaplane_framework.api.model.location import Location
