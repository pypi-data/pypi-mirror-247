# coding: utf-8

"""
    Carrier API

    **Seaplane Global Messaging Service**  For information about authentication see [authentication](/docs/authentication)   # noqa: E501

    The version of the OpenAPI document: 1.0.0-beta
    Contact: support@seaplane.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from seaplane_framework.api import schemas  # noqa: F401


class MetadataHeaders(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Specify criteria for which metadata values are added to the response as headers.
    """


    class MetaOapg:
        required = {
            "include_prefixes",
            "include_patterns",
        }
        
        class properties:
            
            
            class include_prefixes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'include_prefixes':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class include_patterns(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'include_patterns':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "include_prefixes": include_prefixes,
                "include_patterns": include_patterns,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    include_prefixes: MetaOapg.properties.include_prefixes
    include_patterns: MetaOapg.properties.include_patterns
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["include_prefixes"]) -> MetaOapg.properties.include_prefixes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["include_patterns"]) -> MetaOapg.properties.include_patterns: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["include_prefixes"], typing_extensions.Literal["include_patterns"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["include_prefixes"]) -> MetaOapg.properties.include_prefixes: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["include_patterns"]) -> MetaOapg.properties.include_patterns: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["include_prefixes"], typing_extensions.Literal["include_patterns"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        include_prefixes: typing.Union[MetaOapg.properties.include_prefixes, list, tuple, ],
        include_patterns: typing.Union[MetaOapg.properties.include_patterns, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'MetadataHeaders':
        return super().__new__(
            cls,
            *_args,
            include_prefixes=include_prefixes,
            include_patterns=include_patterns,
            _configuration=_configuration,
        )
