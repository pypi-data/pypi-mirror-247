# coding: utf-8

"""
    Carrier API

    **Seaplane Global Messaging Service**  For information about authentication see [authentication](/docs/authentication)   # noqa: E501

    The version of the OpenAPI document: 1.0.0-beta
    Contact: support@seaplane.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from seaplane_framework.api import schemas  # noqa: F401


class DockerProcessor(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Carrier Flow docker processor
    """


    class MetaOapg:
        required = {
            "docker",
        }
        
        class properties:
            
            
            class docker(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "image",
                    }
                    
                    class properties:
                        image = schemas.StrSchema
                        
                        
                        class args(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.StrSchema
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'args':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "image": image,
                            "args": args,
                        }
                    additional_properties = schemas.NotAnyTypeSchema
                
                image: MetaOapg.properties.image
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["image"]) -> MetaOapg.properties.image: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["args"]) -> MetaOapg.properties.args: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["image"], typing_extensions.Literal["args"], ]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["image"]) -> MetaOapg.properties.image: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["args"]) -> typing.Union[MetaOapg.properties.args, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["image"], typing_extensions.Literal["args"], ]):
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    image: typing.Union[MetaOapg.properties.image, str, ],
                    args: typing.Union[MetaOapg.properties.args, list, tuple, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'docker':
                    return super().__new__(
                        cls,
                        *_args,
                        image=image,
                        args=args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "docker": docker,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    docker: MetaOapg.properties.docker
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["docker"]) -> MetaOapg.properties.docker: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["docker"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["docker"]) -> MetaOapg.properties.docker: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["docker"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        docker: typing.Union[MetaOapg.properties.docker, dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'DockerProcessor':
        return super().__new__(
            cls,
            *_args,
            docker=docker,
            _configuration=_configuration,
        )
