# coding: utf-8

"""
    Carrier API

    **Seaplane Global Messaging Service**  For information about authentication see [authentication](/docs/authentication)   # noqa: E501

    The version of the OpenAPI document: 1.0.0-beta
    Contact: support@seaplane.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from seaplane_framework.api import schemas  # noqa: F401


class SqlRaw(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Execute raw sql statement
    """


    class MetaOapg:
        required = {
            "driver",
            "query",
            "dsn",
        }
        
        class properties:
            
            
            class driver(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "mysql": "MYSQL",
                        "postgres": "POSTGRES",
                        "clickhouse": "CLICKHOUSE",
                        "mssql": "MSSQL",
                        "sqlite": "SQLITE",
                        "oracle": "ORACLE",
                        "snowflake": "SNOWFLAKE",
                        "trino": "TRINO",
                    }
                
                @schemas.classproperty
                def MYSQL(cls):
                    return cls("mysql")
                
                @schemas.classproperty
                def POSTGRES(cls):
                    return cls("postgres")
                
                @schemas.classproperty
                def CLICKHOUSE(cls):
                    return cls("clickhouse")
                
                @schemas.classproperty
                def MSSQL(cls):
                    return cls("mssql")
                
                @schemas.classproperty
                def SQLITE(cls):
                    return cls("sqlite")
                
                @schemas.classproperty
                def ORACLE(cls):
                    return cls("oracle")
                
                @schemas.classproperty
                def SNOWFLAKE(cls):
                    return cls("snowflake")
                
                @schemas.classproperty
                def TRINO(cls):
                    return cls("trino")
            dsn = schemas.StrSchema
            query = schemas.StrSchema
            args_mapping = schemas.StrSchema
            init_statement = schemas.StrSchema
            __annotations__ = {
                "driver": driver,
                "dsn": dsn,
                "query": query,
                "args_mapping": args_mapping,
                "init_statement": init_statement,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    driver: MetaOapg.properties.driver
    query: MetaOapg.properties.query
    dsn: MetaOapg.properties.dsn
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["driver"]) -> MetaOapg.properties.driver: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["query"]) -> MetaOapg.properties.query: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dsn"]) -> MetaOapg.properties.dsn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["args_mapping"]) -> MetaOapg.properties.args_mapping: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["init_statement"]) -> MetaOapg.properties.init_statement: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["driver"], typing_extensions.Literal["query"], typing_extensions.Literal["dsn"], typing_extensions.Literal["args_mapping"], typing_extensions.Literal["init_statement"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["driver"]) -> MetaOapg.properties.driver: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["query"]) -> MetaOapg.properties.query: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dsn"]) -> MetaOapg.properties.dsn: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["args_mapping"]) -> typing.Union[MetaOapg.properties.args_mapping, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["init_statement"]) -> typing.Union[MetaOapg.properties.init_statement, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["driver"], typing_extensions.Literal["query"], typing_extensions.Literal["dsn"], typing_extensions.Literal["args_mapping"], typing_extensions.Literal["init_statement"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        driver: typing.Union[MetaOapg.properties.driver, str, ],
        query: typing.Union[MetaOapg.properties.query, str, ],
        dsn: typing.Union[MetaOapg.properties.dsn, str, ],
        args_mapping: typing.Union[MetaOapg.properties.args_mapping, str, schemas.Unset] = schemas.unset,
        init_statement: typing.Union[MetaOapg.properties.init_statement, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SqlRaw':
        return super().__new__(
            cls,
            *_args,
            driver=driver,
            query=query,
            dsn=dsn,
            args_mapping=args_mapping,
            init_statement=init_statement,
            _configuration=_configuration,
        )
