# coding: utf-8

"""
    Carrier API

    **Seaplane Global Messaging Service**  For information about authentication see [authentication](/docs/authentication)   # noqa: E501

    The version of the OpenAPI document: 1.0.0-beta
    Contact: support@seaplane.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from seaplane_framework.api import schemas  # noqa: F401


class Switch(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The switch output type allows you to route messages to different outputs based on their contents.
    """


    class MetaOapg:
        required = {
            "switch",
        }
        
        class properties:
            
            
            class switch(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "cases",
                    }
                    
                    class properties:
                        
                        
                        class cases(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        required = {
                                            "output",
                                            "check",
                                        }
                                        
                                        class properties:
                                            
                                            
                                            class check(
                                                schemas.StrSchema
                                            ):
                                                pass
                                            
                                            
                                            class output(
                                                schemas.ComposedSchema,
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    
                                                    @classmethod
                                                    @functools.lru_cache()
                                                    def one_of(cls):
                                                        # we need this here to make our import statements work
                                                        # we must store _composed_schemas in here so the code is only run
                                                        # when we invoke this method. If we kept this at the class
                                                        # level we would get an error because the class level
                                                        # code would be run when this module is imported, and these composed
                                                        # classes don't exist yet because their module has not finished
                                                        # loading
                                                        return [
                                                            SwitchOutput,
                                                            SwitchNested1,
                                                            SwitchNested2,
                                                        ]
                                            
                                            
                                                def __new__(
                                                    cls,
                                                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                ) -> 'output':
                                                    return super().__new__(
                                                        cls,
                                                        *_args,
                                                        _configuration=_configuration,
                                                        **kwargs,
                                                    )
                                            __annotations__ = {
                                                "check": check,
                                                "output": output,
                                            }
                                        additional_properties = schemas.NotAnyTypeSchema
                                    
                                    output: MetaOapg.properties.output
                                    check: MetaOapg.properties.check
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["output"]) -> MetaOapg.properties.output: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["check"]) -> MetaOapg.properties.check: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["output"], typing_extensions.Literal["check"], ]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["output"]) -> MetaOapg.properties.output: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["check"]) -> MetaOapg.properties.check: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["output"], typing_extensions.Literal["check"], ]):
                                        return super().get_item_oapg(name)
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, ],
                                        output: typing.Union[MetaOapg.properties.output, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        check: typing.Union[MetaOapg.properties.check, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            output=output,
                                            check=check,
                                            _configuration=_configuration,
                                        )
                        
                            def __new__(
                                cls,
                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'cases':
                                return super().__new__(
                                    cls,
                                    _arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "cases": cases,
                        }
                    additional_properties = schemas.NotAnyTypeSchema
                
                cases: MetaOapg.properties.cases
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["cases"]) -> MetaOapg.properties.cases: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["cases"], ]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["cases"]) -> MetaOapg.properties.cases: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cases"], ]):
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    cases: typing.Union[MetaOapg.properties.cases, list, tuple, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'switch':
                    return super().__new__(
                        cls,
                        *_args,
                        cases=cases,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "switch": switch,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    switch: MetaOapg.properties.switch
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["switch"]) -> MetaOapg.properties.switch: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["switch"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["switch"]) -> MetaOapg.properties.switch: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["switch"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        switch: typing.Union[MetaOapg.properties.switch, dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'Switch':
        return super().__new__(
            cls,
            *_args,
            switch=switch,
            _configuration=_configuration,
        )

from seaplane_framework.api.model.switch_nested1 import SwitchNested1
from seaplane_framework.api.model.switch_nested2 import SwitchNested2
from seaplane_framework.api.model.switch_output import SwitchOutput
