# coding: utf-8

"""
    Carrier API

    **Seaplane Global Messaging Service**  For information about authentication see [authentication](/docs/authentication)   # noqa: E501

    The version of the OpenAPI document: 1.0.0-beta
    Contact: support@seaplane.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from seaplane_framework.api import schemas  # noqa: F401


class HttpClientOutput(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    HTTP client request output destination
    """


    class MetaOapg:
        required = {
            "http_client",
        }
        
        class properties:
            
            
            class http_client(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "url",
                    }
                    
                    class properties:
                        
                        
                        class url(
                            schemas.StrSchema
                        ):
                        
                        
                            class MetaOapg:
                                regex=[{
                                    'pattern': r'[^ ]+',  # noqa: E501
                                }]
                        method = schemas.StrSchema
                        
                        
                        class headers(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                additional_properties = schemas.StrSchema
                            
                            def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                                return super().get_item_oapg(name)
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[MetaOapg.additional_properties, str, ],
                            ) -> 'headers':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "url": url,
                            "method": method,
                            "headers": headers,
                        }
                    additional_properties = schemas.NotAnyTypeSchema
                
                url: MetaOapg.properties.url
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["method"]) -> MetaOapg.properties.method: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["headers"]) -> MetaOapg.properties.headers: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["url"], typing_extensions.Literal["method"], typing_extensions.Literal["headers"], ]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["method"]) -> typing.Union[MetaOapg.properties.method, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["headers"]) -> typing.Union[MetaOapg.properties.headers, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["url"], typing_extensions.Literal["method"], typing_extensions.Literal["headers"], ]):
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    url: typing.Union[MetaOapg.properties.url, str, ],
                    method: typing.Union[MetaOapg.properties.method, str, schemas.Unset] = schemas.unset,
                    headers: typing.Union[MetaOapg.properties.headers, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'http_client':
                    return super().__new__(
                        cls,
                        *_args,
                        url=url,
                        method=method,
                        headers=headers,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "http_client": http_client,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    http_client: MetaOapg.properties.http_client
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["http_client"]) -> MetaOapg.properties.http_client: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["http_client"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["http_client"]) -> MetaOapg.properties.http_client: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["http_client"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        http_client: typing.Union[MetaOapg.properties.http_client, dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'HttpClientOutput':
        return super().__new__(
            cls,
            *_args,
            http_client=http_client,
            _configuration=_configuration,
        )
