# coding: utf-8

"""
    Carrier API

    **Seaplane Global Messaging Service**  For information about authentication see [authentication](/docs/authentication)   # noqa: E501

    The version of the OpenAPI document: 1.0.0-beta
    Contact: support@seaplane.io
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from seaplane_framework.api import schemas  # noqa: F401


class CarrierStream(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Information about the stream
    """


    class MetaOapg:
        
        class properties:
            name = schemas.StrSchema
        
            @staticmethod
            def options() -> typing.Type['CarrierStreamOptions']:
                return CarrierStreamOptions
        
            @staticmethod
            def details() -> typing.Type['CarrierStreamDetails']:
                return CarrierStreamDetails
            __annotations__ = {
                "name": name,
                "options": options,
                "details": details,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["options"]) -> 'CarrierStreamOptions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["details"]) -> 'CarrierStreamDetails': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name"], typing_extensions.Literal["options"], typing_extensions.Literal["details"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["options"]) -> typing.Union['CarrierStreamOptions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["details"]) -> typing.Union['CarrierStreamDetails', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name"], typing_extensions.Literal["options"], typing_extensions.Literal["details"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        options: typing.Union['CarrierStreamOptions', schemas.Unset] = schemas.unset,
        details: typing.Union['CarrierStreamDetails', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'CarrierStream':
        return super().__new__(
            cls,
            *_args,
            name=name,
            options=options,
            details=details,
            _configuration=_configuration,
        )

from seaplane_framework.api.model.carrier_stream_details import CarrierStreamDetails
from seaplane_framework.api.model.carrier_stream_options import CarrierStreamOptions
