# Generated by ariadne-codegen
# Source: resources/ariadne_client_configs/collection_data.graphql

from typing import Any, Dict, List, Optional, Union

from .base_client import BaseClient
from .base_model import UNSET, UnsetType
from .collection_mints import CollectionMints
from .enums import CollectionMintsSortBy, OrderSortBy
from .input_types import CollectionMintsFilters
from .mint import Mint
from .mint_list import MintList
from .mints import Mints


def gql(q: str) -> str:
    return q


class CollectionDataClient(BaseClient):
    def mint_list(
        self,
        slug: str,
        limit: Union[Optional[int], UnsetType] = UNSET,
        after: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> MintList:
        query = gql(
            """
            query MintList($slug: String!, $limit: Int, $after: String) {
              mintList(slug: $slug, limit: $limit, after: $after)
            }
            """
        )
        variables: Dict[str, object] = {"slug": slug, "limit": limit, "after": after}
        response = self.execute(query=query, variables=variables, **kwargs)
        data = self.get_data(response)
        return MintList.model_validate(data)

    def mint(
        self,
        mint: str,
        sort_by: Union[Optional[OrderSortBy], UnsetType] = UNSET,
        limit: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> Mint:
        query = gql(
            """
            query Mint($mint: String!, $sortBy: OrderSortBy, $limit: Int) {
              mint(mint: $mint) {
                slug
                tswapOrders(sortBy: $sortBy, limit: $limit) {
                  address
                  ownerAddress
                  buyNowPrice
                  sellNowPrice
                  sellNowPriceNetFees
                  feeInfos {
                    bps
                    kind
                  }
                  nftsForSale {
                    onchainId
                  }
                }
                tensorBids(sortBy: $sortBy, limit: $limit) {
                  bidder
                  expiry
                  price
                }
                hswapOrders {
                  address
                  assetReceiver
                  baseSpotPrice
                  boxes {
                    mint {
                      onchainId
                    }
                  }
                  buyOrdersQuantity
                  createdAt
                  curveType
                  delta
                  feeBps
                  fundsSolOrTokenBalance
                  lastTransactedAt
                  mathCounter
                  pairType
                }
                activeListings {
                  mint {
                    onchainId
                  }
                  tx {
                    sellerId
                    grossAmount
                    grossAmountUnit
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"mint": mint, "sortBy": sort_by, "limit": limit}
        response = self.execute(query=query, variables=variables, **kwargs)
        data = self.get_data(response)
        return Mint.model_validate(data)

    def mints(self, token_mints: List[str], **kwargs: Any) -> Mints:
        query = gql(
            """
            query Mints($tokenMints: [String!]!) {
              mints(tokenMints: $tokenMints) {
                slug
              }
            }
            """
        )
        variables: Dict[str, object] = {"tokenMints": token_mints}
        response = self.execute(query=query, variables=variables, **kwargs)
        data = self.get_data(response)
        return Mints.model_validate(data)

    def collection_mints(
        self,
        slug: str,
        sort_by: CollectionMintsSortBy,
        filters: Union[Optional[CollectionMintsFilters], UnsetType] = UNSET,
        cursor: Union[Optional[str], UnsetType] = UNSET,
        limit: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> CollectionMints:
        query = gql(
            """
            query CollectionMints($slug: String!, $sortBy: CollectionMintsSortBy!, $filters: CollectionMintsFilters, $cursor: String, $limit: Int) {
              collectionMintsV2(
                slug: $slug
                sortBy: $sortBy
                filters: $filters
                cursor: $cursor
                limit: $limit
              ) {
                mints {
                  mint {
                    onchainId
                    rarityRankHR
                    rarityRankTT
                  }
                }
                page {
                  endCursor
                  hasMore
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "slug": slug,
            "sortBy": sort_by,
            "filters": filters,
            "cursor": cursor,
            "limit": limit,
        }
        response = self.execute(query=query, variables=variables, **kwargs)
        data = self.get_data(response)
        return CollectionMints.model_validate(data)
