.format: 4
.import:
  Physics: [Component]
  Robotics: [RobotBase, CommunicationProtocol]

Robot:
  .extends: Component
  .doc: >
    The Brick.Physics.Robotics.Robot model is built up by
    one robot base and one or more robot arms.

    It is possible to interpret an external component
    (see Physics.Component) as a robot.
    To do this a segment can be created on Robot level
    (otherwise segments are at RobotArm level)
    with an externalReference to the Name or unique ID
    if the rigid body or connector/constraint that is
    wanted to be interpreted as a segment or joint.

    The Robot module will try following a linear structure
    starting from the external rigid body or connector
    to build an arm. If the structure is branching
    it is assumed the arm ends.
    It is possible to declare several external segments/joints,
    they will join in the same external arm.

    Only HingeConnector and PrismaticConnector are supported
    types for generating Joints from external connectors.
    
    Note! For the mechanism for parsing the connectivity and
    creating Robot arms with segments and joints at least one
    segment or joint needs to be declared at robot root level.

  wantInternalPositioning: True

  base:
    .type: RobotBase
    .value: null

  communicationProtocol:
    .type: CommunicationProtocol
    .value: null

  defaultInputSignalType:
    .type: Robotics.SignalType
    .value: Robotics.SignalType.InputPositionSignal

  createJointSensorsOfExternals:
    .doc: >
      Will define define the createJointSensorsOfExternals attribute
      for all external joints which are not declared in the Robot.
      Can be overriden by declaring the joint and reference it
      using the externalReference attribute.
    .type: Bool
    .value: True

  assistedControlType:
    .doc: > 
      For assistant control of torque controlled joints.
    .type: Robotics.AssistedControlType
    .value: Robotics.AssistedControlType.NoAssistance

  assistedControlExternals:
    .doc: >
      Populate this list with Physics.Component's and
      RigidBodies that you like the assisted control system
      to know about. Plain Geometries are not supported! 
      To include geometries fixed in world, the geometries
      must instead be part of a RigidBody with motionControl
      set to Static.
    .type: List<Scene.Node>
    .value: []

