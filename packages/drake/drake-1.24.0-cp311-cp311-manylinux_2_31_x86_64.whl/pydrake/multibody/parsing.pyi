import pydrake.math
from _typeshed import Incomplete
from typing import Any, ClassVar, overload

class AddCollisionFilterGroup:
    __fields__: ClassVar[tuple] = ...  # read-only
    ignored_collision_filter_groups: Incomplete
    members: Incomplete
    name: Incomplete
    def __init__(self, **kwargs) -> None: ...
    def __copy__(self) -> AddCollisionFilterGroup: ...
    def __deepcopy__(self, arg0: dict) -> AddCollisionFilterGroup: ...

class AddDirectives:
    __fields__: ClassVar[tuple] = ...  # read-only
    file: Incomplete
    model_namespace: Incomplete
    def __init__(self, **kwargs) -> None: ...
    def __copy__(self) -> AddDirectives: ...
    def __deepcopy__(self, arg0: dict) -> AddDirectives: ...

class AddFrame:
    __fields__: ClassVar[tuple] = ...  # read-only
    X_PF: Incomplete
    name: Incomplete
    def __init__(self, **kwargs) -> None: ...
    def __copy__(self) -> AddFrame: ...
    def __deepcopy__(self, arg0: dict) -> AddFrame: ...

class AddModel:
    __fields__: ClassVar[tuple] = ...  # read-only
    default_free_body_pose: Incomplete
    default_joint_positions: Incomplete
    file: Incomplete
    name: Incomplete
    def __init__(self, **kwargs) -> None: ...
    def __copy__(self) -> AddModel: ...
    def __deepcopy__(self, arg0: dict) -> AddModel: ...

class AddModelInstance:
    __fields__: ClassVar[tuple] = ...  # read-only
    name: Incomplete
    def __init__(self, **kwargs) -> None: ...
    def __copy__(self) -> AddModelInstance: ...
    def __deepcopy__(self, arg0: dict) -> AddModelInstance: ...

class AddWeld:
    __fields__: ClassVar[tuple] = ...  # read-only
    X_PC: Incomplete
    child: Incomplete
    parent: Incomplete
    def __init__(self, **kwargs) -> None: ...
    def __copy__(self) -> AddWeld: ...
    def __deepcopy__(self, arg0: dict) -> AddWeld: ...

class ModelDirective:
    __fields__: ClassVar[tuple] = ...  # read-only
    add_collision_filter_group: Optional[AddCollisionFilterGroup]
    add_directives: Optional[AddDirectives]
    add_frame: Optional[AddFrame]
    add_model: Optional[AddModel]
    add_model_instance: Optional[AddModelInstance]
    add_weld: Optional[AddWeld]
    def __init__(self, **kwargs) -> None: ...
    def __copy__(self) -> ModelDirective: ...
    def __deepcopy__(self, arg0: dict) -> ModelDirective: ...

class ModelDirectives:
    __fields__: ClassVar[tuple] = ...  # read-only
    directives: List[ModelDirective]
    def __init__(self, **kwargs) -> None: ...
    def __copy__(self) -> ModelDirectives: ...
    def __deepcopy__(self, arg0: dict) -> ModelDirectives: ...

class ModelInstanceInfo:
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def X_PC(self) -> pydrake.math.RigidTransform: ...
    @property
    def child_frame_name(self): ...
    @property
    def model_instance(self): ...
    @property
    def model_name(self): ...
    @property
    def model_path(self): ...
    @property
    def parent_frame_name(self) -> WARNING: ...

class PackageMap:
    class RemoteParams:
        __fields__: ClassVar[tuple] = ...  # read-only
        archive_type: Any
        sha256: Incomplete
        strip_prefix: Any
        urls: Incomplete
        def __init__(self, **kwargs) -> None: ...
        def ToJson(self) -> str: ...
        def __copy__(self) -> PackageMap.RemoteParams: ...
        def __deepcopy__(self, arg0: dict) -> PackageMap.RemoteParams: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: PackageMap) -> None: ...
    def Add(self, package_name: str, package_path: str) -> None: ...
    def AddMap(self, other_map: PackageMap) -> None: ...
    def AddPackageXml(self, filename: str) -> None: ...
    def AddRemote(self, package_name: str, params: PackageMap.RemoteParams) -> None: ...
    def Contains(self, package_name: str) -> bool: ...
    def GetPackageNames(self) -> List[str]: ...
    def GetPath(self, package_name: str) -> str: ...
    @classmethod
    def MakeEmpty(cls) -> PackageMap: ...
    def PopulateFromEnvironment(self, environment_variable: str) -> None: ...
    def PopulateFromFolder(self, path: str) -> None: ...
    def PopulateFromRosPackagePath(self) -> None: ...
    def Remove(self, package_name: str) -> None: ...
    def size(self) -> int: ...
    def __copy__(self) -> PackageMap: ...
    def __deepcopy__(self, arg0: dict) -> PackageMap: ...

class Parser:
    def __init__(self, *args, **kwargs) -> None: ...
    def AddAllModelsFromFile(self, *args, **kwargs): ...
    def AddModelFromFile(self, *args, **kwargs): ...
    def AddModels(self, *args, **kwargs): ...
    def AddModelsFromString(self, *args, **kwargs): ...
    def AddModelsFromUrl(self, *args, **kwargs): ...
    def GetAutoRenaming(self) -> bool: ...
    def SetAutoRenaming(self, value: bool) -> None: ...
    def SetStrictParsing(self) -> None: ...
    def package_map(self) -> PackageMap: ...
    def plant(self, *args, **kwargs): ...

def FlattenModelDirectives(directives: ModelDirectives, package_map: PackageMap) -> ModelDirectives: ...
def GetScopedFrameByName(*args, **kwargs): ...
def LoadModelDirectives(filename: str) -> ModelDirectives: ...
def LoadModelDirectivesFromString(model_directives: str) -> ModelDirectives: ...
def ProcessModelDirectives(directives: ModelDirectives, parser: Parser) -> List[ModelInstanceInfo]: ...
