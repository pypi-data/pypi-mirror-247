# coding: utf-8

"""
    AHS Orchestrator
    AHS Orchestrator API's  # noqa: E501
    The version of the OpenAPI document: 1.0.0
    Generated by: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator
"""

from __future__ import annotations
from ahs_orchestator_client.shared_imports.schema_imports import *  # pyright: ignore [reportWildcardImportFromLibrary]

_0: typing_extensions.TypeAlias = schemas.StrSchema
_1: typing_extensions.TypeAlias = schemas.IntSchema
AnyOf = typing.Tuple[
    typing.Type[_0],
    typing.Type[_1],
]


@dataclasses.dataclass(frozen=True)
class Items(
    schemas.AnyTypeSchema[schemas.immutabledict[str, schemas.OUTPUT_BASE_TYPES], typing.Tuple[schemas.OUTPUT_BASE_TYPES, ...]],
):
    # any type
    any_of: AnyOf = dataclasses.field(default_factory=lambda: schemas.tuple_to_instance(AnyOf)) # type: ignore



class LocTuple(
    typing.Tuple[
        schemas.OUTPUT_BASE_TYPES,
        ...
    ]
):

    def __new__(cls, arg: typing.Union[LocTupleInput, LocTuple], configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None):
        return Loc.validate(arg, configuration=configuration)
LocTupleInput = typing.Union[
    typing.List[
        typing.Union[
            schemas.INPUT_TYPES_ALL,
            schemas.OUTPUT_BASE_TYPES
        ],
    ],
    typing.Tuple[
        typing.Union[
            schemas.INPUT_TYPES_ALL,
            schemas.OUTPUT_BASE_TYPES
        ],
        ...
    ]
]


@dataclasses.dataclass(frozen=True)
class Loc(
    schemas.Schema[schemas.immutabledict, LocTuple]
):
    types: typing.FrozenSet[typing.Type] = frozenset({tuple})
    items: typing.Type[Items] = dataclasses.field(default_factory=lambda: Items) # type: ignore
    type_to_output_cls: typing.Mapping[
        typing.Type,
        typing.Type
    ] = dataclasses.field(
        default_factory=lambda: {
            tuple: LocTuple
        }
    )

    @classmethod
    def validate(
        cls,
        arg: typing.Union[
            LocTupleInput,
            LocTuple,
        ],
        configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
    ) -> LocTuple:
        return super().validate_base(
            arg,
            configuration=configuration,
        )
Msg: typing_extensions.TypeAlias = schemas.StrSchema
Type: typing_extensions.TypeAlias = schemas.StrSchema
Properties = typing.TypedDict(
    'Properties',
    {
        "loc": typing.Type[Loc],
        "msg": typing.Type[Msg],
        "type": typing.Type[Type],
    }
)


class ValidationErrorDict(schemas.immutabledict[str, schemas.OUTPUT_BASE_TYPES]):

    __required_keys__: typing.FrozenSet[str] = frozenset({
        "loc",
        "msg",
        "type",
    })
    __optional_keys__: typing.FrozenSet[str] = frozenset({
    })
    
    def __new__(
        cls,
        *,
        loc: typing.Union[
            LocTupleInput,
            LocTuple
        ],
        msg: str,
        type: str,
        configuration_: typing.Optional[schema_configuration.SchemaConfiguration] = None,
        **kwargs: schemas.INPUT_TYPES_ALL,
    ):
        arg_: typing.Dict[str, typing.Any] = {
            "loc": loc,
            "msg": msg,
            "type": type,
        }
        arg_.update(kwargs)
        used_arg_ = typing.cast(ValidationErrorDictInput, arg_)
        return ValidationError.validate(used_arg_, configuration=configuration_)
    
    @staticmethod
    def from_dict_(
        arg: typing.Union[
            ValidationErrorDictInput,
            ValidationErrorDict
        ],
        configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
    ) -> ValidationErrorDict:
        return ValidationError.validate(arg, configuration=configuration)
    
    @property
    def loc(self) -> LocTuple:
        return typing.cast(
            LocTuple,
            self.__getitem__("loc")
        )
    
    @property
    def msg(self) -> str:
        return typing.cast(
            str,
            self.__getitem__("msg")
        )
    
    @property
    def type(self) -> str:
        return typing.cast(
            str,
            self.__getitem__("type")
        )
    
    def get_additional_property_(self, name: str) -> typing.Union[schemas.OUTPUT_BASE_TYPES, schemas.Unset]:
        schemas.raise_if_key_known(name, self.__required_keys__, self.__optional_keys__)
        return self.get(name, schemas.unset)
ValidationErrorDictInput = typing.Mapping[str, schemas.INPUT_TYPES_ALL]


@dataclasses.dataclass(frozen=True)
class ValidationError(
    schemas.Schema[ValidationErrorDict, tuple]
):
    """NOTE: This class is auto generated by OpenAPI JSON Schema Generator.
    Ref: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator

    Do not edit the class manually.
    """
    types: typing.FrozenSet[typing.Type] = frozenset({schemas.immutabledict})
    required: typing.FrozenSet[str] = frozenset({
        "loc",
        "msg",
        "type",
    })
    properties: Properties = dataclasses.field(default_factory=lambda: schemas.typed_dict_to_instance(Properties)) # type: ignore
    type_to_output_cls: typing.Mapping[
        typing.Type,
        typing.Type
    ] = dataclasses.field(
        default_factory=lambda: {
            schemas.immutabledict: ValidationErrorDict
        }
    )

    @classmethod
    def validate(
        cls,
        arg: typing.Union[
            ValidationErrorDictInput,
            ValidationErrorDict,
        ],
        configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
    ) -> ValidationErrorDict:
        return super().validate_base(
            arg,
            configuration=configuration,
        )

