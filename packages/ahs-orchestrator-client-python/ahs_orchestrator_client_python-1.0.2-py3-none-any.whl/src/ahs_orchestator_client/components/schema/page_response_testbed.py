# coding: utf-8

"""
    AHS Orchestrator
    AHS Orchestrator API's  # noqa: E501
    The version of the OpenAPI document: 1.0.0
    Generated by: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator
"""

from __future__ import annotations
from ahs_orchestator_client.shared_imports.schema_imports import *  # pyright: ignore [reportWildcardImportFromLibrary]



@dataclasses.dataclass(frozen=True)
class Total(
    schemas.IntSchema
):
    types: typing.FrozenSet[typing.Type] = frozenset({
        int,
    })
    format: str = 'int'


@dataclasses.dataclass(frozen=True)
class Page(
    schemas.IntSchema
):
    types: typing.FrozenSet[typing.Type] = frozenset({
        int,
    })
    format: str = 'int'
    inclusive_minimum: typing.Union[int, float] = 1.0


@dataclasses.dataclass(frozen=True)
class Size(
    schemas.IntSchema
):
    types: typing.FrozenSet[typing.Type] = frozenset({
        int,
    })
    format: str = 'int'
    inclusive_minimum: typing.Union[int, float] = 1.0


@dataclasses.dataclass(frozen=True)
class Pages(
    schemas.IntSchema
):
    types: typing.FrozenSet[typing.Type] = frozenset({
        int,
    })
    format: str = 'int'

from ahs_orchestator_client.components.schema import response_testbed


class ItemsTuple(
    typing.Tuple[
        response_testbed.ResponseTestbedDict,
        ...
    ]
):

    def __new__(cls, arg: typing.Union[ItemsTupleInput, ItemsTuple], configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None):
        return Items.validate(arg, configuration=configuration)
ItemsTupleInput = typing.Union[
    typing.List[
        typing.Union[
            response_testbed.ResponseTestbedDictInput,
            response_testbed.ResponseTestbedDict,
        ],
    ],
    typing.Tuple[
        typing.Union[
            response_testbed.ResponseTestbedDictInput,
            response_testbed.ResponseTestbedDict,
        ],
        ...
    ]
]


@dataclasses.dataclass(frozen=True)
class Items(
    schemas.Schema[schemas.immutabledict, ItemsTuple]
):
    types: typing.FrozenSet[typing.Type] = frozenset({tuple})
    items: typing.Type[response_testbed.ResponseTestbed] = dataclasses.field(default_factory=lambda: response_testbed.ResponseTestbed) # type: ignore
    type_to_output_cls: typing.Mapping[
        typing.Type,
        typing.Type
    ] = dataclasses.field(
        default_factory=lambda: {
            tuple: ItemsTuple
        }
    )

    @classmethod
    def validate(
        cls,
        arg: typing.Union[
            ItemsTupleInput,
            ItemsTuple,
        ],
        configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
    ) -> ItemsTuple:
        return super().validate_base(
            arg,
            configuration=configuration,
        )
Properties = typing.TypedDict(
    'Properties',
    {
        "items": typing.Type[Items],
        "total": typing.Type[Total],
        "page": typing.Type[Page],
        "size": typing.Type[Size],
        "pages": typing.Type[Pages],
    }
)


class PageResponseTestbedDict(schemas.immutabledict[str, schemas.OUTPUT_BASE_TYPES]):

    __required_keys__: typing.FrozenSet[str] = frozenset({
        "items",
    })
    __optional_keys__: typing.FrozenSet[str] = frozenset({
        "total",
        "page",
        "size",
        "pages",
    })
    
    def __new__(
        cls,
        *,
        items: typing.Union[
            ItemsTupleInput,
            ItemsTuple
        ],
        total: typing.Union[
            int,
            schemas.Unset
        ] = schemas.unset,
        page: typing.Union[
            int,
            schemas.Unset
        ] = schemas.unset,
        size: typing.Union[
            int,
            schemas.Unset
        ] = schemas.unset,
        pages: typing.Union[
            int,
            schemas.Unset
        ] = schemas.unset,
        configuration_: typing.Optional[schema_configuration.SchemaConfiguration] = None,
        **kwargs: schemas.INPUT_TYPES_ALL,
    ):
        arg_: typing.Dict[str, typing.Any] = {
            "items": items,
        }
        for key_, val in (
            ("total", total),
            ("page", page),
            ("size", size),
            ("pages", pages),
        ):
            if isinstance(val, schemas.Unset):
                continue
            arg_[key_] = val
        arg_.update(kwargs)
        used_arg_ = typing.cast(PageResponseTestbedDictInput, arg_)
        return PageResponseTestbed.validate(used_arg_, configuration=configuration_)
    
    @staticmethod
    def from_dict_(
        arg: typing.Union[
            PageResponseTestbedDictInput,
            PageResponseTestbedDict
        ],
        configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
    ) -> PageResponseTestbedDict:
        return PageResponseTestbed.validate(arg, configuration=configuration)
    
    @property
    def items(self) -> ItemsTuple:
        return typing.cast(
            ItemsTuple,
            self.__getitem__("items")
        )
    
    @property
    def total(self) -> typing.Union[int, schemas.Unset]:
        val = self.get("total", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            int,
            val
        )
    
    @property
    def page(self) -> typing.Union[int, schemas.Unset]:
        val = self.get("page", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            int,
            val
        )
    
    @property
    def size(self) -> typing.Union[int, schemas.Unset]:
        val = self.get("size", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            int,
            val
        )
    
    @property
    def pages(self) -> typing.Union[int, schemas.Unset]:
        val = self.get("pages", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            int,
            val
        )
    
    def get_additional_property_(self, name: str) -> typing.Union[schemas.OUTPUT_BASE_TYPES, schemas.Unset]:
        schemas.raise_if_key_known(name, self.__required_keys__, self.__optional_keys__)
        return self.get(name, schemas.unset)
PageResponseTestbedDictInput = typing.Mapping[str, schemas.INPUT_TYPES_ALL]


@dataclasses.dataclass(frozen=True)
class PageResponseTestbed(
    schemas.Schema[PageResponseTestbedDict, tuple]
):
    """NOTE: This class is auto generated by OpenAPI JSON Schema Generator.
    Ref: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator

    Do not edit the class manually.
    """
    types: typing.FrozenSet[typing.Type] = frozenset({schemas.immutabledict})
    required: typing.FrozenSet[str] = frozenset({
        "items",
    })
    properties: Properties = dataclasses.field(default_factory=lambda: schemas.typed_dict_to_instance(Properties)) # type: ignore
    type_to_output_cls: typing.Mapping[
        typing.Type,
        typing.Type
    ] = dataclasses.field(
        default_factory=lambda: {
            schemas.immutabledict: PageResponseTestbedDict
        }
    )

    @classmethod
    def validate(
        cls,
        arg: typing.Union[
            PageResponseTestbedDictInput,
            PageResponseTestbedDict,
        ],
        configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
    ) -> PageResponseTestbedDict:
        return super().validate_base(
            arg,
            configuration=configuration,
        )

