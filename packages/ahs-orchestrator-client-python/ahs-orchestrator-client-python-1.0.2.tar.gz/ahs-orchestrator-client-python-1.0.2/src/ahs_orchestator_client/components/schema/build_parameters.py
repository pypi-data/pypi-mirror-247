# coding: utf-8

"""
    AHS Orchestrator
    AHS Orchestrator API's  # noqa: E501
    The version of the OpenAPI document: 1.0.0
    Generated by: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator
"""

from __future__ import annotations
from ahs_orchestator_client.shared_imports.schema_imports import *  # pyright: ignore [reportWildcardImportFromLibrary]

Token: typing_extensions.TypeAlias = schemas.StrSchema
Target: typing_extensions.TypeAlias = schemas.StrSchema
GitBranch: typing_extensions.TypeAlias = schemas.StrSchema
UtfPytestCommand: typing_extensions.TypeAlias = schemas.StrSchema
Harness: typing_extensions.TypeAlias = schemas.StrSchema
Properties = typing.TypedDict(
    'Properties',
    {
        "token": typing.Type[Token],
        "target": typing.Type[Target],
        "git_branch": typing.Type[GitBranch],
        "utf_pytest_command": typing.Type[UtfPytestCommand],
        "harness": typing.Type[Harness],
    }
)


class BuildParametersDict(schemas.immutabledict[str, schemas.OUTPUT_BASE_TYPES]):

    __required_keys__: typing.FrozenSet[str] = frozenset({
        "git_branch",
        "harness",
        "target",
        "token",
        "utf_pytest_command",
    })
    __optional_keys__: typing.FrozenSet[str] = frozenset({
    })
    
    def __new__(
        cls,
        *,
        git_branch: str,
        harness: str,
        target: str,
        token: str,
        utf_pytest_command: str,
        configuration_: typing.Optional[schema_configuration.SchemaConfiguration] = None,
        **kwargs: schemas.INPUT_TYPES_ALL,
    ):
        arg_: typing.Dict[str, typing.Any] = {
            "git_branch": git_branch,
            "harness": harness,
            "target": target,
            "token": token,
            "utf_pytest_command": utf_pytest_command,
        }
        arg_.update(kwargs)
        used_arg_ = typing.cast(BuildParametersDictInput, arg_)
        return BuildParameters.validate(used_arg_, configuration=configuration_)
    
    @staticmethod
    def from_dict_(
        arg: typing.Union[
            BuildParametersDictInput,
            BuildParametersDict
        ],
        configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
    ) -> BuildParametersDict:
        return BuildParameters.validate(arg, configuration=configuration)
    
    @property
    def git_branch(self) -> str:
        return typing.cast(
            str,
            self.__getitem__("git_branch")
        )
    
    @property
    def harness(self) -> str:
        return typing.cast(
            str,
            self.__getitem__("harness")
        )
    
    @property
    def target(self) -> str:
        return typing.cast(
            str,
            self.__getitem__("target")
        )
    
    @property
    def token(self) -> str:
        return typing.cast(
            str,
            self.__getitem__("token")
        )
    
    @property
    def utf_pytest_command(self) -> str:
        return typing.cast(
            str,
            self.__getitem__("utf_pytest_command")
        )
    
    def get_additional_property_(self, name: str) -> typing.Union[schemas.OUTPUT_BASE_TYPES, schemas.Unset]:
        schemas.raise_if_key_known(name, self.__required_keys__, self.__optional_keys__)
        return self.get(name, schemas.unset)
BuildParametersDictInput = typing.Mapping[str, schemas.INPUT_TYPES_ALL]


@dataclasses.dataclass(frozen=True)
class BuildParameters(
    schemas.Schema[BuildParametersDict, tuple]
):
    """NOTE: This class is auto generated by OpenAPI JSON Schema Generator.
    Ref: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator

    Do not edit the class manually.
    """
    types: typing.FrozenSet[typing.Type] = frozenset({schemas.immutabledict})
    required: typing.FrozenSet[str] = frozenset({
        "git_branch",
        "harness",
        "target",
        "token",
        "utf_pytest_command",
    })
    properties: Properties = dataclasses.field(default_factory=lambda: schemas.typed_dict_to_instance(Properties)) # type: ignore
    type_to_output_cls: typing.Mapping[
        typing.Type,
        typing.Type
    ] = dataclasses.field(
        default_factory=lambda: {
            schemas.immutabledict: BuildParametersDict
        }
    )

    @classmethod
    def validate(
        cls,
        arg: typing.Union[
            BuildParametersDictInput,
            BuildParametersDict,
        ],
        configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
    ) -> BuildParametersDict:
        return super().validate_base(
            arg,
            configuration=configuration,
        )

