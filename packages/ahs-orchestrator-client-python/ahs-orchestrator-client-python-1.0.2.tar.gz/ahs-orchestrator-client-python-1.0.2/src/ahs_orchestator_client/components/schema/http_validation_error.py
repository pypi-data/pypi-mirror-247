# coding: utf-8

"""
    AHS Orchestrator
    AHS Orchestrator API's  # noqa: E501
    The version of the OpenAPI document: 1.0.0
    Generated by: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator
"""

from __future__ import annotations
from ahs_orchestator_client.shared_imports.schema_imports import *  # pyright: ignore [reportWildcardImportFromLibrary]


from ahs_orchestator_client.components.schema import validation_error


class DetailTuple(
    typing.Tuple[
        validation_error.ValidationErrorDict,
        ...
    ]
):

    def __new__(cls, arg: typing.Union[DetailTupleInput, DetailTuple], configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None):
        return Detail.validate(arg, configuration=configuration)
DetailTupleInput = typing.Union[
    typing.List[
        typing.Union[
            validation_error.ValidationErrorDictInput,
            validation_error.ValidationErrorDict,
        ],
    ],
    typing.Tuple[
        typing.Union[
            validation_error.ValidationErrorDictInput,
            validation_error.ValidationErrorDict,
        ],
        ...
    ]
]


@dataclasses.dataclass(frozen=True)
class Detail(
    schemas.Schema[schemas.immutabledict, DetailTuple]
):
    types: typing.FrozenSet[typing.Type] = frozenset({tuple})
    items: typing.Type[validation_error.ValidationError] = dataclasses.field(default_factory=lambda: validation_error.ValidationError) # type: ignore
    type_to_output_cls: typing.Mapping[
        typing.Type,
        typing.Type
    ] = dataclasses.field(
        default_factory=lambda: {
            tuple: DetailTuple
        }
    )

    @classmethod
    def validate(
        cls,
        arg: typing.Union[
            DetailTupleInput,
            DetailTuple,
        ],
        configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
    ) -> DetailTuple:
        return super().validate_base(
            arg,
            configuration=configuration,
        )
Properties = typing.TypedDict(
    'Properties',
    {
        "detail": typing.Type[Detail],
    }
)


class HTTPValidationErrorDict(schemas.immutabledict[str, schemas.OUTPUT_BASE_TYPES]):

    __required_keys__: typing.FrozenSet[str] = frozenset({
    })
    __optional_keys__: typing.FrozenSet[str] = frozenset({
        "detail",
    })
    
    def __new__(
        cls,
        *,
        detail: typing.Union[
            DetailTupleInput,
            DetailTuple,
            schemas.Unset
        ] = schemas.unset,
        configuration_: typing.Optional[schema_configuration.SchemaConfiguration] = None,
        **kwargs: schemas.INPUT_TYPES_ALL,
    ):
        arg_: typing.Dict[str, typing.Any] = {}
        for key_, val in (
            ("detail", detail),
        ):
            if isinstance(val, schemas.Unset):
                continue
            arg_[key_] = val
        arg_.update(kwargs)
        used_arg_ = typing.cast(HTTPValidationErrorDictInput, arg_)
        return HTTPValidationError.validate(used_arg_, configuration=configuration_)
    
    @staticmethod
    def from_dict_(
        arg: typing.Union[
            HTTPValidationErrorDictInput,
            HTTPValidationErrorDict
        ],
        configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
    ) -> HTTPValidationErrorDict:
        return HTTPValidationError.validate(arg, configuration=configuration)
    
    @property
    def detail(self) -> typing.Union[DetailTuple, schemas.Unset]:
        val = self.get("detail", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            DetailTuple,
            val
        )
    
    def get_additional_property_(self, name: str) -> typing.Union[schemas.OUTPUT_BASE_TYPES, schemas.Unset]:
        schemas.raise_if_key_known(name, self.__required_keys__, self.__optional_keys__)
        return self.get(name, schemas.unset)
HTTPValidationErrorDictInput = typing.Mapping[str, schemas.INPUT_TYPES_ALL]


@dataclasses.dataclass(frozen=True)
class HTTPValidationError(
    schemas.Schema[HTTPValidationErrorDict, tuple]
):
    """NOTE: This class is auto generated by OpenAPI JSON Schema Generator.
    Ref: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator

    Do not edit the class manually.
    """
    types: typing.FrozenSet[typing.Type] = frozenset({schemas.immutabledict})
    properties: Properties = dataclasses.field(default_factory=lambda: schemas.typed_dict_to_instance(Properties)) # type: ignore
    type_to_output_cls: typing.Mapping[
        typing.Type,
        typing.Type
    ] = dataclasses.field(
        default_factory=lambda: {
            schemas.immutabledict: HTTPValidationErrorDict
        }
    )

    @classmethod
    def validate(
        cls,
        arg: typing.Union[
            HTTPValidationErrorDictInput,
            HTTPValidationErrorDict,
        ],
        configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
    ) -> HTTPValidationErrorDict:
        return super().validate_base(
            arg,
            configuration=configuration,
        )

