# coding: utf-8

"""
    AHS Orchestrator
    AHS Orchestrator API's  # noqa: E501
    The version of the OpenAPI document: 1.0.0
    Generated by: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator
"""

from __future__ import annotations
from ahs_orchestator_client.shared_imports.schema_imports import *  # pyright: ignore [reportWildcardImportFromLibrary]

Id: typing_extensions.TypeAlias = schemas.IntSchema
TestbedHealthStatus: typing_extensions.TypeAlias = schemas.IntSchema
TestbedName: typing_extensions.TypeAlias = schemas.StrSchema
TestbedId: typing_extensions.TypeAlias = schemas.IntSchema
TestbedReason: typing_extensions.TypeAlias = schemas.StrSchema
TestbedError: typing_extensions.TypeAlias = schemas.StrSchema
JenkinsBuildStartTime: typing_extensions.TypeAlias = schemas.DateTimeSchema
JenkinsBuildStatus: typing_extensions.TypeAlias = schemas.StrSchema
JenkinsBuildNumber: typing_extensions.TypeAlias = schemas.IntSchema
JenkinsBuildDuration: typing_extensions.TypeAlias = schemas.IntSchema
CreatedOn: typing_extensions.TypeAlias = schemas.DateTimeSchema
UpdatedOn: typing_extensions.TypeAlias = schemas.DateTimeSchema
Refs: typing_extensions.TypeAlias = schemas.DictSchema
TestbedHealthStatusText: typing_extensions.TypeAlias = schemas.StrSchema
Properties = typing.TypedDict(
    'Properties',
    {
        "id": typing.Type[Id],
        "testbed_health_status": typing.Type[TestbedHealthStatus],
        "testbed_name": typing.Type[TestbedName],
        "testbed_id": typing.Type[TestbedId],
        "testbed_reason": typing.Type[TestbedReason],
        "testbed_error": typing.Type[TestbedError],
        "jenkins_build_start_time": typing.Type[JenkinsBuildStartTime],
        "jenkins_build_status": typing.Type[JenkinsBuildStatus],
        "jenkins_build_number": typing.Type[JenkinsBuildNumber],
        "jenkins_build_duration": typing.Type[JenkinsBuildDuration],
        "created_on": typing.Type[CreatedOn],
        "updated_on": typing.Type[UpdatedOn],
        "refs": typing.Type[Refs],
        "testbed_health_status_text": typing.Type[TestbedHealthStatusText],
    }
)


class ResponseTestbedDict(schemas.immutabledict[str, schemas.OUTPUT_BASE_TYPES]):

    __required_keys__: typing.FrozenSet[str] = frozenset({
    })
    __optional_keys__: typing.FrozenSet[str] = frozenset({
        "id",
        "testbed_health_status",
        "testbed_name",
        "testbed_id",
        "testbed_reason",
        "testbed_error",
        "jenkins_build_start_time",
        "jenkins_build_status",
        "jenkins_build_number",
        "jenkins_build_duration",
        "created_on",
        "updated_on",
        "refs",
        "testbed_health_status_text",
    })
    
    def __new__(
        cls,
        *,
        id: typing.Union[
            int,
            schemas.Unset
        ] = schemas.unset,
        testbed_health_status: typing.Union[
            int,
            schemas.Unset
        ] = schemas.unset,
        testbed_name: typing.Union[
            str,
            schemas.Unset
        ] = schemas.unset,
        testbed_id: typing.Union[
            int,
            schemas.Unset
        ] = schemas.unset,
        testbed_reason: typing.Union[
            str,
            schemas.Unset
        ] = schemas.unset,
        testbed_error: typing.Union[
            str,
            schemas.Unset
        ] = schemas.unset,
        jenkins_build_start_time: typing.Union[
            str,
            datetime.datetime,
            schemas.Unset
        ] = schemas.unset,
        jenkins_build_status: typing.Union[
            str,
            schemas.Unset
        ] = schemas.unset,
        jenkins_build_number: typing.Union[
            int,
            schemas.Unset
        ] = schemas.unset,
        jenkins_build_duration: typing.Union[
            int,
            schemas.Unset
        ] = schemas.unset,
        created_on: typing.Union[
            str,
            datetime.datetime,
            schemas.Unset
        ] = schemas.unset,
        updated_on: typing.Union[
            str,
            datetime.datetime,
            schemas.Unset
        ] = schemas.unset,
        refs: typing.Union[
            typing.Mapping[str, schemas.INPUT_TYPES_ALL],
            schemas.immutabledict[str, schemas.OUTPUT_BASE_TYPES],
            schemas.Unset
        ] = schemas.unset,
        testbed_health_status_text: typing.Union[
            str,
            schemas.Unset
        ] = schemas.unset,
        configuration_: typing.Optional[schema_configuration.SchemaConfiguration] = None,
        **kwargs: schemas.INPUT_TYPES_ALL,
    ):
        arg_: typing.Dict[str, typing.Any] = {}
        for key_, val in (
            ("id", id),
            ("testbed_health_status", testbed_health_status),
            ("testbed_name", testbed_name),
            ("testbed_id", testbed_id),
            ("testbed_reason", testbed_reason),
            ("testbed_error", testbed_error),
            ("jenkins_build_start_time", jenkins_build_start_time),
            ("jenkins_build_status", jenkins_build_status),
            ("jenkins_build_number", jenkins_build_number),
            ("jenkins_build_duration", jenkins_build_duration),
            ("created_on", created_on),
            ("updated_on", updated_on),
            ("refs", refs),
            ("testbed_health_status_text", testbed_health_status_text),
        ):
            if isinstance(val, schemas.Unset):
                continue
            arg_[key_] = val
        arg_.update(kwargs)
        used_arg_ = typing.cast(ResponseTestbedDictInput, arg_)
        return ResponseTestbed.validate(used_arg_, configuration=configuration_)
    
    @staticmethod
    def from_dict_(
        arg: typing.Union[
            ResponseTestbedDictInput,
            ResponseTestbedDict
        ],
        configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
    ) -> ResponseTestbedDict:
        return ResponseTestbed.validate(arg, configuration=configuration)
    
    @property
    def id(self) -> typing.Union[int, schemas.Unset]:
        val = self.get("id", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            int,
            val
        )
    
    @property
    def testbed_health_status(self) -> typing.Union[int, schemas.Unset]:
        val = self.get("testbed_health_status", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            int,
            val
        )
    
    @property
    def testbed_name(self) -> typing.Union[str, schemas.Unset]:
        val = self.get("testbed_name", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            str,
            val
        )
    
    @property
    def testbed_id(self) -> typing.Union[int, schemas.Unset]:
        val = self.get("testbed_id", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            int,
            val
        )
    
    @property
    def testbed_reason(self) -> typing.Union[str, schemas.Unset]:
        val = self.get("testbed_reason", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            str,
            val
        )
    
    @property
    def testbed_error(self) -> typing.Union[str, schemas.Unset]:
        val = self.get("testbed_error", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            str,
            val
        )
    
    @property
    def jenkins_build_start_time(self) -> typing.Union[str, schemas.Unset]:
        val = self.get("jenkins_build_start_time", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            str,
            val
        )
    
    @property
    def jenkins_build_status(self) -> typing.Union[str, schemas.Unset]:
        val = self.get("jenkins_build_status", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            str,
            val
        )
    
    @property
    def jenkins_build_number(self) -> typing.Union[int, schemas.Unset]:
        val = self.get("jenkins_build_number", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            int,
            val
        )
    
    @property
    def jenkins_build_duration(self) -> typing.Union[int, schemas.Unset]:
        val = self.get("jenkins_build_duration", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            int,
            val
        )
    
    @property
    def created_on(self) -> typing.Union[str, schemas.Unset]:
        val = self.get("created_on", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            str,
            val
        )
    
    @property
    def updated_on(self) -> typing.Union[str, schemas.Unset]:
        val = self.get("updated_on", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            str,
            val
        )
    
    @property
    def refs(self) -> typing.Union[schemas.immutabledict[str, schemas.OUTPUT_BASE_TYPES], schemas.Unset]:
        val = self.get("refs", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            schemas.immutabledict[str, schemas.OUTPUT_BASE_TYPES],
            val
        )
    
    @property
    def testbed_health_status_text(self) -> typing.Union[str, schemas.Unset]:
        val = self.get("testbed_health_status_text", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            str,
            val
        )
    
    def get_additional_property_(self, name: str) -> typing.Union[schemas.OUTPUT_BASE_TYPES, schemas.Unset]:
        schemas.raise_if_key_known(name, self.__required_keys__, self.__optional_keys__)
        return self.get(name, schemas.unset)
ResponseTestbedDictInput = typing.Mapping[str, schemas.INPUT_TYPES_ALL]


@dataclasses.dataclass(frozen=True)
class ResponseTestbed(
    schemas.Schema[ResponseTestbedDict, tuple]
):
    """NOTE: This class is auto generated by OpenAPI JSON Schema Generator.
    Ref: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator

    Do not edit the class manually.
    """
    types: typing.FrozenSet[typing.Type] = frozenset({schemas.immutabledict})
    properties: Properties = dataclasses.field(default_factory=lambda: schemas.typed_dict_to_instance(Properties)) # type: ignore
    type_to_output_cls: typing.Mapping[
        typing.Type,
        typing.Type
    ] = dataclasses.field(
        default_factory=lambda: {
            schemas.immutabledict: ResponseTestbedDict
        }
    )

    @classmethod
    def validate(
        cls,
        arg: typing.Union[
            ResponseTestbedDictInput,
            ResponseTestbedDict,
        ],
        configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
    ) -> ResponseTestbedDict:
        return super().validate_base(
            arg,
            configuration=configuration,
        )

