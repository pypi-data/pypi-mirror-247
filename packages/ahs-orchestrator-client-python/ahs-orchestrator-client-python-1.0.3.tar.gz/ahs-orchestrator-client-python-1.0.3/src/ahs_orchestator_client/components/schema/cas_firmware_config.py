# coding: utf-8

"""
    AHS Orchestrator
    AHS Orchestrator API's  # noqa: E501
    The version of the OpenAPI document: 1.0.0
    Generated by: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator
"""

from __future__ import annotations
from ahs_orchestator_client.shared_imports.schema_imports import *  # pyright: ignore [reportWildcardImportFromLibrary]

HealthCheckName: typing_extensions.TypeAlias = schemas.StrSchema
CorrectiveActionName: typing_extensions.TypeAlias = schemas.StrSchema
CorrectiveActionDescription: typing_extensions.TypeAlias = schemas.StrSchema
DeviceName: typing_extensions.TypeAlias = schemas.StrSchema
DeviceType: typing_extensions.TypeAlias = schemas.StrSchema
DeviceModel: typing_extensions.TypeAlias = schemas.StrSchema
ActionStepNum: typing_extensions.TypeAlias = schemas.IntSchema
ExpectedResult: typing_extensions.TypeAlias = schemas.StrSchema
UbaiArtifactName: typing_extensions.TypeAlias = schemas.StrSchema
UbaiArtifactDirectDownloadUrl: typing_extensions.TypeAlias = schemas.StrSchema
UbaiArtifactExtension: typing_extensions.TypeAlias = schemas.StrSchema
Version: typing_extensions.TypeAlias = schemas.StrSchema
UpdatedOn: typing_extensions.TypeAlias = schemas.DateTimeSchema
CreatedOn: typing_extensions.TypeAlias = schemas.DateTimeSchema
UpdatedBy: typing_extensions.TypeAlias = schemas.StrSchema
Id: typing_extensions.TypeAlias = schemas.IntSchema
Properties = typing.TypedDict(
    'Properties',
    {
        "health_check_name": typing.Type[HealthCheckName],
        "corrective_action_name": typing.Type[CorrectiveActionName],
        "corrective_action_description": typing.Type[CorrectiveActionDescription],
        "device_name": typing.Type[DeviceName],
        "device_type": typing.Type[DeviceType],
        "device_model": typing.Type[DeviceModel],
        "action_step_num": typing.Type[ActionStepNum],
        "expected_result": typing.Type[ExpectedResult],
        "ubai_artifact_name": typing.Type[UbaiArtifactName],
        "ubai_artifact_direct_download_url": typing.Type[UbaiArtifactDirectDownloadUrl],
        "ubai_artifact_extension": typing.Type[UbaiArtifactExtension],
        "version": typing.Type[Version],
        "updated_on": typing.Type[UpdatedOn],
        "created_on": typing.Type[CreatedOn],
        "updated_by": typing.Type[UpdatedBy],
        "id": typing.Type[Id],
    }
)


class CasFirmwareConfigDict(schemas.immutabledict[str, schemas.OUTPUT_BASE_TYPES]):

    __required_keys__: typing.FrozenSet[str] = frozenset({
    })
    __optional_keys__: typing.FrozenSet[str] = frozenset({
        "health_check_name",
        "corrective_action_name",
        "corrective_action_description",
        "device_name",
        "device_type",
        "device_model",
        "action_step_num",
        "expected_result",
        "ubai_artifact_name",
        "ubai_artifact_direct_download_url",
        "ubai_artifact_extension",
        "version",
        "updated_on",
        "created_on",
        "updated_by",
        "id",
    })
    
    def __new__(
        cls,
        *,
        health_check_name: typing.Union[
            str,
            schemas.Unset
        ] = schemas.unset,
        corrective_action_name: typing.Union[
            str,
            schemas.Unset
        ] = schemas.unset,
        corrective_action_description: typing.Union[
            str,
            schemas.Unset
        ] = schemas.unset,
        device_name: typing.Union[
            str,
            schemas.Unset
        ] = schemas.unset,
        device_type: typing.Union[
            str,
            schemas.Unset
        ] = schemas.unset,
        device_model: typing.Union[
            str,
            schemas.Unset
        ] = schemas.unset,
        action_step_num: typing.Union[
            int,
            schemas.Unset
        ] = schemas.unset,
        expected_result: typing.Union[
            str,
            schemas.Unset
        ] = schemas.unset,
        ubai_artifact_name: typing.Union[
            str,
            schemas.Unset
        ] = schemas.unset,
        ubai_artifact_direct_download_url: typing.Union[
            str,
            schemas.Unset
        ] = schemas.unset,
        ubai_artifact_extension: typing.Union[
            str,
            schemas.Unset
        ] = schemas.unset,
        version: typing.Union[
            str,
            schemas.Unset
        ] = schemas.unset,
        updated_on: typing.Union[
            str,
            datetime.datetime,
            schemas.Unset
        ] = schemas.unset,
        created_on: typing.Union[
            str,
            datetime.datetime,
            schemas.Unset
        ] = schemas.unset,
        updated_by: typing.Union[
            str,
            schemas.Unset
        ] = schemas.unset,
        id: typing.Union[
            int,
            schemas.Unset
        ] = schemas.unset,
        configuration_: typing.Optional[schema_configuration.SchemaConfiguration] = None,
        **kwargs: schemas.INPUT_TYPES_ALL,
    ):
        arg_: typing.Dict[str, typing.Any] = {}
        for key_, val in (
            ("health_check_name", health_check_name),
            ("corrective_action_name", corrective_action_name),
            ("corrective_action_description", corrective_action_description),
            ("device_name", device_name),
            ("device_type", device_type),
            ("device_model", device_model),
            ("action_step_num", action_step_num),
            ("expected_result", expected_result),
            ("ubai_artifact_name", ubai_artifact_name),
            ("ubai_artifact_direct_download_url", ubai_artifact_direct_download_url),
            ("ubai_artifact_extension", ubai_artifact_extension),
            ("version", version),
            ("updated_on", updated_on),
            ("created_on", created_on),
            ("updated_by", updated_by),
            ("id", id),
        ):
            if isinstance(val, schemas.Unset):
                continue
            arg_[key_] = val
        arg_.update(kwargs)
        used_arg_ = typing.cast(CasFirmwareConfigDictInput, arg_)
        return CasFirmwareConfig.validate(used_arg_, configuration=configuration_)
    
    @staticmethod
    def from_dict_(
        arg: typing.Union[
            CasFirmwareConfigDictInput,
            CasFirmwareConfigDict
        ],
        configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
    ) -> CasFirmwareConfigDict:
        return CasFirmwareConfig.validate(arg, configuration=configuration)
    
    @property
    def health_check_name(self) -> typing.Union[str, schemas.Unset]:
        val = self.get("health_check_name", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            str,
            val
        )
    
    @property
    def corrective_action_name(self) -> typing.Union[str, schemas.Unset]:
        val = self.get("corrective_action_name", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            str,
            val
        )
    
    @property
    def corrective_action_description(self) -> typing.Union[str, schemas.Unset]:
        val = self.get("corrective_action_description", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            str,
            val
        )
    
    @property
    def device_name(self) -> typing.Union[str, schemas.Unset]:
        val = self.get("device_name", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            str,
            val
        )
    
    @property
    def device_type(self) -> typing.Union[str, schemas.Unset]:
        val = self.get("device_type", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            str,
            val
        )
    
    @property
    def device_model(self) -> typing.Union[str, schemas.Unset]:
        val = self.get("device_model", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            str,
            val
        )
    
    @property
    def action_step_num(self) -> typing.Union[int, schemas.Unset]:
        val = self.get("action_step_num", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            int,
            val
        )
    
    @property
    def expected_result(self) -> typing.Union[str, schemas.Unset]:
        val = self.get("expected_result", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            str,
            val
        )
    
    @property
    def ubai_artifact_name(self) -> typing.Union[str, schemas.Unset]:
        val = self.get("ubai_artifact_name", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            str,
            val
        )
    
    @property
    def ubai_artifact_direct_download_url(self) -> typing.Union[str, schemas.Unset]:
        val = self.get("ubai_artifact_direct_download_url", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            str,
            val
        )
    
    @property
    def ubai_artifact_extension(self) -> typing.Union[str, schemas.Unset]:
        val = self.get("ubai_artifact_extension", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            str,
            val
        )
    
    @property
    def version(self) -> typing.Union[str, schemas.Unset]:
        val = self.get("version", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            str,
            val
        )
    
    @property
    def updated_on(self) -> typing.Union[str, schemas.Unset]:
        val = self.get("updated_on", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            str,
            val
        )
    
    @property
    def created_on(self) -> typing.Union[str, schemas.Unset]:
        val = self.get("created_on", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            str,
            val
        )
    
    @property
    def updated_by(self) -> typing.Union[str, schemas.Unset]:
        val = self.get("updated_by", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            str,
            val
        )
    
    @property
    def id(self) -> typing.Union[int, schemas.Unset]:
        val = self.get("id", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            int,
            val
        )
    
    def get_additional_property_(self, name: str) -> typing.Union[schemas.OUTPUT_BASE_TYPES, schemas.Unset]:
        schemas.raise_if_key_known(name, self.__required_keys__, self.__optional_keys__)
        return self.get(name, schemas.unset)
CasFirmwareConfigDictInput = typing.Mapping[str, schemas.INPUT_TYPES_ALL]


@dataclasses.dataclass(frozen=True)
class CasFirmwareConfig(
    schemas.Schema[CasFirmwareConfigDict, tuple]
):
    """NOTE: This class is auto generated by OpenAPI JSON Schema Generator.
    Ref: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator

    Do not edit the class manually.
    """
    types: typing.FrozenSet[typing.Type] = frozenset({schemas.immutabledict})
    properties: Properties = dataclasses.field(default_factory=lambda: schemas.typed_dict_to_instance(Properties)) # type: ignore
    type_to_output_cls: typing.Mapping[
        typing.Type,
        typing.Type
    ] = dataclasses.field(
        default_factory=lambda: {
            schemas.immutabledict: CasFirmwareConfigDict
        }
    )

    @classmethod
    def validate(
        cls,
        arg: typing.Union[
            CasFirmwareConfigDictInput,
            CasFirmwareConfigDict,
        ],
        configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
    ) -> CasFirmwareConfigDict:
        return super().validate_base(
            arg,
            configuration=configuration,
        )

