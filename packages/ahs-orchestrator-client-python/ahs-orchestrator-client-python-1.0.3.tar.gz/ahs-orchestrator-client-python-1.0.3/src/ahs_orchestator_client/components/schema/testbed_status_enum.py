# coding: utf-8

"""
    AHS Orchestrator
    AHS Orchestrator API's  # noqa: E501
    The version of the OpenAPI document: 1.0.0
    Generated by: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator
"""

from __future__ import annotations
from ahs_orchestator_client.shared_imports.schema_imports import *  # pyright: ignore [reportWildcardImportFromLibrary]



class TestbedStatusEnumEnums:

    @schemas.classproperty
    def POSITIVE_0(cls) -> typing.Literal[0]:
        return TestbedStatusEnum.validate(0)

    @schemas.classproperty
    def POSITIVE_1(cls) -> typing.Literal[1]:
        return TestbedStatusEnum.validate(1)

    @schemas.classproperty
    def POSITIVE_2(cls) -> typing.Literal[2]:
        return TestbedStatusEnum.validate(2)

    @schemas.classproperty
    def POSITIVE_3(cls) -> typing.Literal[3]:
        return TestbedStatusEnum.validate(3)

    @schemas.classproperty
    def POSITIVE_4(cls) -> typing.Literal[4]:
        return TestbedStatusEnum.validate(4)


@dataclasses.dataclass(frozen=True)
class TestbedStatusEnum(
    schemas.Schema
):
    """NOTE: This class is auto generated by OpenAPI JSON Schema Generator.
    Ref: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator

    Do not edit the class manually.

    An enumeration.
    """
    types: typing.FrozenSet[typing.Type] = frozenset({
        float,
        int,
    })
    enum_value_to_name: typing.Mapping[typing.Union[int, float, str, schemas.Bool, None], str] = dataclasses.field(
        default_factory=lambda: {
            0: "POSITIVE_0",
            1: "POSITIVE_1",
            2: "POSITIVE_2",
            3: "POSITIVE_3",
            4: "POSITIVE_4",
        }
    )
    enums = TestbedStatusEnumEnums

    @typing.overload
    @classmethod
    def validate(
        cls,
        arg: typing.Literal[0],
        configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
    ) -> typing.Literal[0]: ...
    @typing.overload
    @classmethod
    def validate(
        cls,
        arg: typing.Literal[1],
        configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
    ) -> typing.Literal[1]: ...
    @typing.overload
    @classmethod
    def validate(
        cls,
        arg: typing.Literal[2],
        configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
    ) -> typing.Literal[2]: ...
    @typing.overload
    @classmethod
    def validate(
        cls,
        arg: typing.Literal[3],
        configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
    ) -> typing.Literal[3]: ...
    @typing.overload
    @classmethod
    def validate(
        cls,
        arg: typing.Literal[4],
        configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
    ) -> typing.Literal[4]: ...
    @typing.overload
    @classmethod
    def validate(
        cls,
        arg: int,
        configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
    ) -> typing.Literal[0,1,2,3,4,]: ...
    @classmethod
    def validate(
        cls,
        arg: typing.Union[int, float],
        configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
    ) -> typing.Union[int, float]:
        validated_arg = super().validate_base(
            arg,
            configuration=configuration,
        )
        return validated_arg
