# coding: utf-8

"""
    AHS Orchestrator
    AHS Orchestrator API's  # noqa: E501
    The version of the OpenAPI document: 1.0.0
    Generated by: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator
"""

from __future__ import annotations
from ahs_orchestator_client.shared_imports.schema_imports import *  # pyright: ignore [reportWildcardImportFromLibrary]

Id: typing_extensions.TypeAlias = schemas.IntSchema
Metric2: typing_extensions.TypeAlias = schemas.StrSchema
MetricDescription: typing_extensions.TypeAlias = schemas.StrSchema
State: typing_extensions.TypeAlias = schemas.IntSchema
CreatedOn: typing_extensions.TypeAlias = schemas.DateTimeSchema
UpdatedOn: typing_extensions.TypeAlias = schemas.DateTimeSchema
TestBed: typing_extensions.TypeAlias = schemas.StrSchema
TestbedId: typing_extensions.TypeAlias = schemas.IntSchema


@dataclasses.dataclass(frozen=True)
class Result(
    schemas.StrSchema
):
    types: typing.FrozenSet[typing.Type] = frozenset({
        str,
    })
    default: typing.Literal[""] = ""


@dataclasses.dataclass(frozen=True)
class Device(
    schemas.StrSchema
):
    types: typing.FrozenSet[typing.Type] = frozenset({
        str,
    })
    default: typing.Literal[""] = ""


@dataclasses.dataclass(frozen=True)
class DeviceIpAddress(
    schemas.StrSchema
):
    types: typing.FrozenSet[typing.Type] = frozenset({
        str,
    })
    default: typing.Literal[""] = ""


@dataclasses.dataclass(frozen=True)
class DeviceName(
    schemas.StrSchema
):
    types: typing.FrozenSet[typing.Type] = frozenset({
        str,
    })
    default: typing.Literal[""] = ""


@dataclasses.dataclass(frozen=True)
class DeviceId(
    schemas.StrSchema
):
    types: typing.FrozenSet[typing.Type] = frozenset({
        str,
    })
    default: typing.Literal[""] = ""
Reason: typing_extensions.TypeAlias = schemas.StrSchema
Error: typing_extensions.TypeAlias = schemas.StrSchema
TestModule: typing_extensions.TypeAlias = schemas.StrSchema
TestName: typing_extensions.TypeAlias = schemas.StrSchema
BuildNumber: typing_extensions.TypeAlias = schemas.IntSchema
DeviceType: typing_extensions.TypeAlias = schemas.StrSchema
DeviceModel: typing_extensions.TypeAlias = schemas.StrSchema
Properties = typing.TypedDict(
    'Properties',
    {
        "id": typing.Type[Id],
        "metric": typing.Type[Metric2],
        "metric_description": typing.Type[MetricDescription],
        "state": typing.Type[State],
        "created_on": typing.Type[CreatedOn],
        "updated_on": typing.Type[UpdatedOn],
        "test_bed": typing.Type[TestBed],
        "testbed_id": typing.Type[TestbedId],
        "result": typing.Type[Result],
        "device": typing.Type[Device],
        "device_ip_address": typing.Type[DeviceIpAddress],
        "device_name": typing.Type[DeviceName],
        "device_id": typing.Type[DeviceId],
        "reason": typing.Type[Reason],
        "error": typing.Type[Error],
        "test_module": typing.Type[TestModule],
        "test_name": typing.Type[TestName],
        "build_number": typing.Type[BuildNumber],
        "device_type": typing.Type[DeviceType],
        "device_model": typing.Type[DeviceModel],
    }
)


class MetricDict(schemas.immutabledict[str, schemas.OUTPUT_BASE_TYPES]):

    __required_keys__: typing.FrozenSet[str] = frozenset({
    })
    __optional_keys__: typing.FrozenSet[str] = frozenset({
        "id",
        "metric",
        "metric_description",
        "state",
        "created_on",
        "updated_on",
        "test_bed",
        "testbed_id",
        "result",
        "device",
        "device_ip_address",
        "device_name",
        "device_id",
        "reason",
        "error",
        "test_module",
        "test_name",
        "build_number",
        "device_type",
        "device_model",
    })
    
    def __new__(
        cls,
        *,
        id: typing.Union[
            int,
            schemas.Unset
        ] = schemas.unset,
        metric: typing.Union[
            str,
            schemas.Unset
        ] = schemas.unset,
        metric_description: typing.Union[
            str,
            schemas.Unset
        ] = schemas.unset,
        state: typing.Union[
            int,
            schemas.Unset
        ] = schemas.unset,
        created_on: typing.Union[
            str,
            datetime.datetime,
            schemas.Unset
        ] = schemas.unset,
        updated_on: typing.Union[
            str,
            datetime.datetime,
            schemas.Unset
        ] = schemas.unset,
        test_bed: typing.Union[
            str,
            schemas.Unset
        ] = schemas.unset,
        testbed_id: typing.Union[
            int,
            schemas.Unset
        ] = schemas.unset,
        result: typing.Union[
            str,
            schemas.Unset
        ] = schemas.unset,
        device: typing.Union[
            str,
            schemas.Unset
        ] = schemas.unset,
        device_ip_address: typing.Union[
            str,
            schemas.Unset
        ] = schemas.unset,
        device_name: typing.Union[
            str,
            schemas.Unset
        ] = schemas.unset,
        device_id: typing.Union[
            str,
            schemas.Unset
        ] = schemas.unset,
        reason: typing.Union[
            str,
            schemas.Unset
        ] = schemas.unset,
        error: typing.Union[
            str,
            schemas.Unset
        ] = schemas.unset,
        test_module: typing.Union[
            str,
            schemas.Unset
        ] = schemas.unset,
        test_name: typing.Union[
            str,
            schemas.Unset
        ] = schemas.unset,
        build_number: typing.Union[
            int,
            schemas.Unset
        ] = schemas.unset,
        device_type: typing.Union[
            str,
            schemas.Unset
        ] = schemas.unset,
        device_model: typing.Union[
            str,
            schemas.Unset
        ] = schemas.unset,
        configuration_: typing.Optional[schema_configuration.SchemaConfiguration] = None,
        **kwargs: schemas.INPUT_TYPES_ALL,
    ):
        arg_: typing.Dict[str, typing.Any] = {}
        for key_, val in (
            ("id", id),
            ("metric", metric),
            ("metric_description", metric_description),
            ("state", state),
            ("created_on", created_on),
            ("updated_on", updated_on),
            ("test_bed", test_bed),
            ("testbed_id", testbed_id),
            ("result", result),
            ("device", device),
            ("device_ip_address", device_ip_address),
            ("device_name", device_name),
            ("device_id", device_id),
            ("reason", reason),
            ("error", error),
            ("test_module", test_module),
            ("test_name", test_name),
            ("build_number", build_number),
            ("device_type", device_type),
            ("device_model", device_model),
        ):
            if isinstance(val, schemas.Unset):
                continue
            arg_[key_] = val
        arg_.update(kwargs)
        used_arg_ = typing.cast(MetricDictInput, arg_)
        return Metric.validate(used_arg_, configuration=configuration_)
    
    @staticmethod
    def from_dict_(
        arg: typing.Union[
            MetricDictInput,
            MetricDict
        ],
        configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
    ) -> MetricDict:
        return Metric.validate(arg, configuration=configuration)
    
    @property
    def id(self) -> typing.Union[int, schemas.Unset]:
        val = self.get("id", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            int,
            val
        )
    
    @property
    def metric(self) -> typing.Union[str, schemas.Unset]:
        val = self.get("metric", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            str,
            val
        )
    
    @property
    def metric_description(self) -> typing.Union[str, schemas.Unset]:
        val = self.get("metric_description", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            str,
            val
        )
    
    @property
    def state(self) -> typing.Union[int, schemas.Unset]:
        val = self.get("state", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            int,
            val
        )
    
    @property
    def created_on(self) -> typing.Union[str, schemas.Unset]:
        val = self.get("created_on", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            str,
            val
        )
    
    @property
    def updated_on(self) -> typing.Union[str, schemas.Unset]:
        val = self.get("updated_on", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            str,
            val
        )
    
    @property
    def test_bed(self) -> typing.Union[str, schemas.Unset]:
        val = self.get("test_bed", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            str,
            val
        )
    
    @property
    def testbed_id(self) -> typing.Union[int, schemas.Unset]:
        val = self.get("testbed_id", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            int,
            val
        )
    
    @property
    def result(self) -> typing.Union[str, schemas.Unset]:
        val = self.get("result", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            str,
            val
        )
    
    @property
    def device(self) -> typing.Union[str, schemas.Unset]:
        val = self.get("device", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            str,
            val
        )
    
    @property
    def device_ip_address(self) -> typing.Union[str, schemas.Unset]:
        val = self.get("device_ip_address", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            str,
            val
        )
    
    @property
    def device_name(self) -> typing.Union[str, schemas.Unset]:
        val = self.get("device_name", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            str,
            val
        )
    
    @property
    def device_id(self) -> typing.Union[str, schemas.Unset]:
        val = self.get("device_id", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            str,
            val
        )
    
    @property
    def reason(self) -> typing.Union[str, schemas.Unset]:
        val = self.get("reason", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            str,
            val
        )
    
    @property
    def error(self) -> typing.Union[str, schemas.Unset]:
        val = self.get("error", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            str,
            val
        )
    
    @property
    def test_module(self) -> typing.Union[str, schemas.Unset]:
        val = self.get("test_module", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            str,
            val
        )
    
    @property
    def test_name(self) -> typing.Union[str, schemas.Unset]:
        val = self.get("test_name", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            str,
            val
        )
    
    @property
    def build_number(self) -> typing.Union[int, schemas.Unset]:
        val = self.get("build_number", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            int,
            val
        )
    
    @property
    def device_type(self) -> typing.Union[str, schemas.Unset]:
        val = self.get("device_type", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            str,
            val
        )
    
    @property
    def device_model(self) -> typing.Union[str, schemas.Unset]:
        val = self.get("device_model", schemas.unset)
        if isinstance(val, schemas.Unset):
            return val
        return typing.cast(
            str,
            val
        )
    
    def get_additional_property_(self, name: str) -> typing.Union[schemas.OUTPUT_BASE_TYPES, schemas.Unset]:
        schemas.raise_if_key_known(name, self.__required_keys__, self.__optional_keys__)
        return self.get(name, schemas.unset)
MetricDictInput = typing.Mapping[str, schemas.INPUT_TYPES_ALL]


@dataclasses.dataclass(frozen=True)
class Metric(
    schemas.Schema[MetricDict, tuple]
):
    """NOTE: This class is auto generated by OpenAPI JSON Schema Generator.
    Ref: https://github.com/openapi-json-schema-tools/openapi-json-schema-generator

    Do not edit the class manually.
    """
    types: typing.FrozenSet[typing.Type] = frozenset({schemas.immutabledict})
    properties: Properties = dataclasses.field(default_factory=lambda: schemas.typed_dict_to_instance(Properties)) # type: ignore
    type_to_output_cls: typing.Mapping[
        typing.Type,
        typing.Type
    ] = dataclasses.field(
        default_factory=lambda: {
            schemas.immutabledict: MetricDict
        }
    )

    @classmethod
    def validate(
        cls,
        arg: typing.Union[
            MetricDictInput,
            MetricDict,
        ],
        configuration: typing.Optional[schema_configuration.SchemaConfiguration] = None
    ) -> MetricDict:
        return super().validate_base(
            arg,
            configuration=configuration,
        )

