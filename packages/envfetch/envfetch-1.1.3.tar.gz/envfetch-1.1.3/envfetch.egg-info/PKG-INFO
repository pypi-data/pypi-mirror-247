Metadata-Version: 2.1
Name: envfetch
Version: 1.1.3
Summary: EnvFetch - это библиотека на Python для управления переменными окружения в приложениях. Она предоставляет удобный интерфейс для загрузки переменных окружения из файлов .env с использованием библиотеки python-dotenv. С помощью EnvUtil вы можете легко и безопасно управлять конфигурацией вашего приложения, храня чувствительные данные, такие как ключи API или настройки, в файле .env и использовать их в вашем коде.
Home-page: https://github.com/HermitBroccoli/EnvUtil
Author: hBroccoli
Author-email: vovo.r@yandex.ru
License: MIT
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.6
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: python-dotenv

# EnvFetch

**EnvFetch** - универсальная библиотека, разработанная для эффективного управления переменными окружения и конфигурациями в ваших проектах. Она предоставляет интуитивно понятные инструменты для создания, управления и плавного переключения между различными настройками окружения, что значительно упрощает процесс разработки.

С помощью `EnvFetch` вы легко сможете:

- Определять и управлять переменными окружения.
- Настраивать параметры подключения к различным сервисам и базам данных.
- Управлять настройками приложения в зависимости от текущего окружения (например, разработка, тестирование, продакшн).

Эта библиотека предлагает следующие преимущества:

- **Гибкость**: Легко адаптировать приложения к различным условиям работы без изменения кода.
- **Надежность**: Создание более надежных и масштабируемых приложений путем эффективного управления окружением с минимальными усилиями и максимальной эффективностью.

**EnvFetch** дает разработчикам возможность создавать устойчивые приложения, упрощая управление окружением и обеспечивая адаптацию к различным операционным контекстам без лишних сложностей.

# Использование EnvFetch

Для интеграции **EnvFetch** в ваш проект выполните следующие шаги:

1. **Установка библиотеки:**
   Установите `EnvFetch` через ваш менеджер пакетов. Например, если вы используете pip:

   PowerShell | CMD
   ```bash
   pip install envfetch
   ```
   Linux
   ```bash
   pip3 install envfetch
   ```

2. **Использование EnvFetch:**
   
   После установки библиотеки, вы можете создать экземпляр `EnvFetch` для управления вашими переменными окружения. Вот пример использования:

   ```python
    # Импортируем класс EnvFetch из библиотеки envfetch
    from envfetch import EnvFetch

    # Создаем экземпляр EnvFetch без явного указания пути к файлу .env
    # По умолчанию будет считываться файл .env из корня проекта
    env = EnvFetch()

    # Получаем значение переменной DP_HOST из файла .env и выводим его
    print(env.get_value("DP_HOST"))

   ```

   В этом примере `EnvFetch` создается без явного указания пути к файлу .env. По умолчанию, `EnvFetch` будет пытаться считать файл `.env` из корня проекта. Вы можете использовать метод get_value для извлечения значения конкретной переменной окружения, например, переменной `DP_HOST`.
   
   ---
   ```python
    from envfetch import EnvFetch

    # По умолчанию мы считываем файл `.env` из корня проекта. Однако, если ваш файл `.env` хранится в другом месте,
    # вы можете создать переменную с путем к файлу:

    custom_env_file_path = "env\\.env"

    # Для использования файла `.env`, расположенного в другом месте, создайте экземпляр EnvFetch,
    # указав путь к файлу:

    env = EnvFetch(file_path=custom_env_file_path)

    # Этот пример показывает, как указать путь к файлу `.env` вне корня проекта при создании экземпляра EnvFetch.
    # Затем вы можете получить значения переменных окружения, например, значение переменной DP_HOST.
    print(env.get_value("DP_HOST"))

   ```
    В данном примере создается экземпляр `EnvFetch`, где указывается путь к файлу `.env` вне корня проекта. Это демонстрирует способ использования `EnvFetch` с пользовательским путем к файлу `.env`, который отличается от стандартного пути в корне проекта.

   ---   
   ```python
    # Можно также указать путь к файлу `.env` непосредственно при объявлении класса:

    from envfetch import EnvFetch

    # При создании экземпляра envfetch сразу пропишем путь к файлу `.env` в его конструкторе:
    env = EnvFetch(file_path="env\\.env")

    # Этот код демонстрирует создание экземпляра EnvFetch с указанием пути к файлу `.env` внутри объявления класса.
    # Затем вы можете получить значения переменных окружения, например, значение переменной DP_HOST.
    print(env.get_value("DP_HOST"))

   ```

   В данном примере экземпляр `EnvFetch` создается с указанием пути к файлу `.env` прямо в конструкторе класса. Это позволяет сразу при создании экземпляра указывать путь к файлу `.env`, который будет использоваться для работы с переменными окружения.

3. **Значение по умолчанию:**

   В случае, если значение переменной окружения отсутствует или не установлено в файле `.env`, можно установить значение по умолчанию. Пример:

   ```python
   from envfetch import EnvFetch

   # Создаем экземпляр EnvFetch без указания пути к файлу .env
   env = EnvFetch()

   # Получаем значение переменной, но если оно отсутствует, используем значение по умолчанию
   default_value = env.get_value("SOME_VARIABLE_NAME", default="DEFAULT_VALUE")
   print(default_value)
   ```

   Этот пример иллюстрирует способ использования `EnvFetch` для извлечения значения переменной `SOME_VARIABLE_NAME` из файла `.env`. В случае, если данная переменная отсутствует или не имеет значения, установленного в файле, будет использовано значение по умолчанию, указанное как `DEFAULT_VALUE`. Такой механизм предоставляет гибкость в работе с переменными окружения, позволяя задавать значения по умолчанию для обеспечения более предсказуемой работы приложения, даже если некоторые переменные не были установлены или не найдены в файле `.env`.

4. **Управление переменными окружения:**

   В настоящее время `EnvFetch` предоставляет возможности только для чтения значений переменных окружения из файла `.env`. Операции изменения или удаления переменных окружения непосредственно через `EnvFetch` не поддерживаются в текущей версии библиотеки.

   В будущих версиях планируется расширение функциональности для управления переменными окружения, включая добавление, изменение и удаление переменных. При появлении обновлений вам будет доступна возможность более активно взаимодействовать с переменными окружения с помощью `EnvFetch`.

5. **Использование переменных окружения в условиях:**

   Переменные окружения могут быть использованы для управления поведением вашего приложения в зависимости от среды исполнения или установленных настроек. Пример использования переменных окружения в условиях:

   ```python
   from envfetch import EnvFetch

   # Создаем экземпляр EnvFetch для доступа к переменным окружения
   env = EnvFetch()

   # Проверяем наличие переменной и выполняем определенные действия, если она установлена
   if env.get_value("DEBUG_MODE") == "True":
       # Выполняем действия в режиме отладки
       print("Debug mode is enabled.")
   else:
       # Выполняем обычные действия
       print("Running in standard mode.")
    ```



   
