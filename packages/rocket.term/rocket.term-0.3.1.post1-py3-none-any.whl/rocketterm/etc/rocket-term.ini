[connection]
# the DNS name of the Rocket.chat server
server = chat.example.com

# the protocol to use for the REST API. https:// by default. For testing
# purposes you could be using http://, but beware of the security implications
#rest_protocol = scheme://
# the protocol to use for the realtime API. wss:// by default. For testing
# purposes you could be using ws:// (unencrypted), but beware of the security
# implications
#realtime_protocol = scheme://

# the Rocket.chat username to authenticate
username = your_username
# the authentication mechanism to use: oauth, cleartext or external
auth_type = oauth

# for auth_type external this would be the external command that produces the
# cleartext password
#password_eval = gpg --decrypt /home/myuser/.rocket.term.gpg

# for auth_type cleartext this would be the cleartext password
#password = cleartext_password

# for auth_type oauth these define the user_id an access_token to use
#oauth_user_id = acbd1234_ACBD
#oauth_access_token = long1234_string_and_stuff

[global]
# here you can configure a default room to select upon startup like @mygroup,
# mychannel or @mybuddy
#default_room = $mygroup

# where to place the room box widget, left or right of the main chat widget.
# possible values: left, right
# default: left
#roombox_position = left

# whether to show the roombox widget upon startup.
# possible values: true, false
# default: true
#show_roombox = true

[color]
# supported colors names for the settings in this and its related sections
# are:
#
# foreground colors:
# ------------------
# black, "dark red", "dark green", brown, "dark blue", "dark magenta",
# "dark cyan", "light gray", "dark gray", "light red", "light green",
# yellow, "light blue", "light magenta", "light cyan", white
#
# background colors:
# ------------------
# black, "dark red", "dark green", brown, "dark blue", "dark magenta",
# "dark cyan", "light gray"
#
# combined foreground/background color pairs are separated by a slash like
# black/white for black on white background. For some entries one part of the
# pair is ignored in which case the string 'none' can be used like none/red for
# unassigned foreground color or green/none for unassigned background color.

# this sets a fixed color for the logged in user in chats. By default an
# arbitrary color is selected.
#own_user_color = "light green"

# this is a comma separated list of colors that will be dynamically assigned
# to usernames for which no fixed color assignment exists in [username_colors].
# by default all available colors will be used.
#dynamic_user_colors = black, "dark red", brown, white

# this is a comma separted list of colors that will be dynamically assigned
# to thread nrs#.
# by default all available colors will be used.
#dynamic_thread_colors = "dark cyan", yellow

[color.palette]
# these settings allow to tune the general color "theme" of rocket.term

# color for regular text
#text = white/black
# color for selected regular text items
#selected_text = black/white
# color for text indicating activity occured (currently used for room list
# entries and reactions in chat messages)
#activity_text = "light magenta"/black
# color for text indicating attention is required (currently used for room list)
#attention_text = "light red"/black
# color for chat and room box (only background color has an effect here)
#box = none/black
# color pair for separating bars and header bars
#bar = "light magenta"/white
# color pair for the room topic heading
#room_topic = brown/"dark green"
# color pair for separating date bars in chat rooms
#date_bar = white/"dark gray"
# color pair for the command input line
#input = white/black
# color pair for link identifiers like [1]
#link_id = "light green"/black
# color pair for file identifiers like [1]
#file_id = brown/black
# the background color that will be applied to the dynamic_thread_colors
# foreground colors (see above). The foreground part will be ignored.
#thread_id = none/black
# color for online user status (only fg color used)
#user_online = "dark green"/none
# color for offline user status
#user_offline = white/none
# color for busy user status
#user_busy = "light red"/none
# color for away user status
#user_away = yellow/none

[color.users]
# this sets fixed colors for the given usernames denoted by the configuration
# key
#someuser = brown
#otheruser = "light red"

[keys]
# in this section the keyboard mapping is configured
#
# there seems to be no full online list of supported key labels for urwid
#
# depending on the terminal emulator you use different outcomes are possible
# e.g. for what the 'meta' key is and which types of key combinations are
# recognized.
#
# you can debug rocket.term by running with "--loglevel-set screen=DEBUG" and
# look for "User input received" log lines while you test different key
# combinations.

# this quits rocket.term without asking for confirmation
#quit = "meta q"

# selects the next (lower) room from the open room list
#next_room = "meta down"
# selects the previous (next upper) room from the open room list
#prev_room = "meta up"
# selects the next (lower) room in the list that has activity (new messages)
#next_active_room = "shift down"
# selects the previous (next upper) room  in the list that has activity (new messages)
#prev_active_room = "shift up"

# selects the next-newer command line history entry
#cmd_history_newer = "down"
# selects the next-older command line history entry
#cmd_history_older = "up"

# scroll chat history upwards by a single step (line)
#single_step_history_older = "meta page up"
# scroll chat history downwards by a single step (line)
#single_step_history_newer = "meta page down"
# scroll chat history upwards by a page (or large chunk)
#scroll_history_older = "page up"
# scroll chat history downwards by a page (or large chunk)
#scroll_history_newer = "page down"
# scroll chat history downwards to the newest message
#scroll_history_newest = "meta end"
# scroll chat history upwards to the oldest message
#scroll_history_oldest = "meta home"


[hooks]
# Hooks are external programs that get executed upon certain events in
# rocket.term. They can be used to react to certain messages, for example,
# to play a sound or display a popup window etc.

# The hook command lines are parsed in shell style i.e. you can use quotes and
# the path to the program can contain a ~ character to refer to the user's home
# directory.
# A couple of Python format placeholders are supported in the command line
# arguments. These have to be specified like {this} and will be expanded to the
# respective values, during invocation.
# The contextual data will also be passed in form of environment variables
# during invocation of the hook. Each such variable is prefixed with 'RC_'.
#
# Each hook receives at a minimum the following environment variable:
# - RC_HOOK: the name of the hook that is executing like 'room_opened'.
# Each hook supports at a minimum the following format specifier:
# {hook}: the same as RC_HOOK above.
#
# The stdout and stderr output of each hook will be discarded to avoid messing
# with the console application window of rocket.term.
#
# If the execution of a hook fails, because the program cannot be found or for
# other reasons like bad format specifiers in the command line, then the hook
# will be removed from further processing.
#
# Hooks will be executed synchronously. That means that a blocking hook
# invocation will block the rocket.term application. You need to take
# precautions to daemonize a hook if this is not desired.
#
# Note that some of the hooks may be called seemingly spuriously multiple
# times, due to the nature of the Rocket Chat API behaviour. For example when
# a new message with an embedded URL comes in, then two 'on_new_message'
# invocations will occur, because the URL will be resolved by the server. You
# can use the {is_update} specifier to ignore such updates. Determining the
# exact reason for an update is difficult, though.

# This hook is called when a room is opened either through explicit user
# interaction, because the user got added to a chat room or private group,
# or because a new direct chat message was received.
# All room related hooks support the following environment environment variables:
# - RC_JSON: the raw JSON data for the room object.
# - RC_ROOM_NAME: the short room name like 'mygroup'.
# - RC_ROOM_LABEL: like RC_ROOM_NAME but prefixed with the type character like '$mygroup'.
# - RC_ROOM_TYPE: room type string like "direct chat".
# - RC_ROOM_FRIENDLY_NAME: friendly name of a room like "my group of four".
# Supported format specifiers have the same meaning as the environment variables:
# - {json}, {name}, {label}, {type}, {friendly_name}

#on_room_opened = ~/myscript --hook {hook} --room "{label}"

# This hook is called when a room is closed, the inverse of 'on_room_opened'.
# It supports the same format specifiers and environment variables.

#on_room_hidden = ~/myscript --hook {hook} --room "{label}"

# This hook is called when a new room is added to the user's subscription.
# It supports the same format specifiers and environment variables as
# 'on_room_opened'.

#on_room_added = ~/myscript --hook {hook} --room "{label}"

# This hook is called when a room is removed from the user's subscription.
# This is the inverse of 'on_room_added' and supports the same format
# specifiers and environment variables

#on_room_removed = ~/myscript room_removed --room "{room}"

# This hook is called when the connection to the Rocket Chat server is lost.
# It supports no special format specifiers or environment variables.

#on_lost_connection = ~/myscript --hook {hook}

# This hook is called when an internal error occurs in rocket.term.
# Supported environment variables:
# - RC_ERROR_TEXT: the text describing the internal error.
# Support format specifiers have the same meaning as the environment variables:
#   {error_text}

#on_internal_error = ~/myscript --hook {hook} --error "{error_text}"

# This hook is called when a new message is received in any of the rooms
# the logged in user has open. It supports the following environment
# variables:
# - RC_JSON: the plain JSON data describing the message.
# - RC_ROOM_NAME: the short name of the room the message was posted in like 'mygroup'.
# - RC_ROOM_LABEL: like the ROOM_NAME but including the type prefix like '$mygroup'.
# - RC_ROOM_TYPE: room type string like "direct chat".
# - RC_ROOM_FRIENDLY_NAME: friendly name of the room like "my group of four".
# - RC_ROOM_JSON: the plain JSON data describing the room.
# - RC_IS_UPDATE: boolean string indicating whether this is only an update to an existing message e.g. "True".
# - RC_MSG_ID: the msg ID string of the new message.
# - RC_ROOM_ID: the room ID string of the room.
# - RC_MSG_TEXT: the message text of the new message.
# - RC_MSG_TYPE: the type of the message like 'normal-message' or 'user-muted'.
# - RC_MSG_AUTHOR: the username of the author of the message like 'auser'.
# - RC_MSG_IS_THREAD: a boolean string indicating whether the message is part of a thread.
# - RC_MSG_WAS_EDITED: a boolean string indicating whether the message was edited.
# the supported format specifiers have the same meaning as the environment variables:
#   {json}, {room_json}, {room_name}, {room_label}, {room_type}, {room_friendly_name},
#   {is_update}, {msg_id}, {room_id}, {msg_text}, {msg_author}, {msg_is_thread},
#   {msg_was_edited}, {msg_type}

#on_new_room_message = ~/myscript --hook {hook} --text "{msg_text}"

# This hook works just like the 'on_new_room_message' hook with the exception
# that it is only called when the message in question is directed towards the
# logged in user e.g. it mentions the user explicitly or occured in a direct
# chat. This hook is a simple way to play a sound to notify the user about
# an important new message.

#on_mentioned = ~/myscript  --hook {hook} --text "{msg_text}"
