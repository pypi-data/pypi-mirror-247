# coding: utf-8

"""
    NIUM Platform

    NIUM Platform

    The version of the OpenAPI document: 2023.12.5
    Contact: experience@nium.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from nium.models.customer_data_request_dto import CustomerDataRequestDTO  # noqa: E501

class TestCustomerDataRequestDTO(unittest.TestCase):
    """CustomerDataRequestDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CustomerDataRequestDTO:
        """Test CustomerDataRequestDTO
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CustomerDataRequestDTO`
        """
        model = CustomerDataRequestDTO()  # noqa: E501
        if include_optional:
            return CustomerDataRequestDTO(
                additional_info = {"identificationType":"Passport","identificationValue":"P123456A"},
                billing_address1 = '72 James Buildin',
                billing_address2 = 'Springfield Road',
                billing_city = 'Paris',
                billing_country = 'FR',
                billing_landmark = 'near Post Office',
                billing_state = 'Ile-de-France',
                billing_zip_code = '048581',
                birth_country = '',
                correspondence_address1 = '472 James Building',
                correspondence_address2 = 'Springfield Road',
                correspondence_city = 'Paris',
                correspondence_country = 'FR',
                correspondence_landmark = 'near Post Office',
                correspondence_state = 'Ile-de-France',
                correspondence_zip_code = '048581',
                country_code = 'SG',
                country_ip = '2.2.2.2',
                country_of_birth = 'FR',
                customer_hash_id = '2992c5c6-823b-4fa9-a64b-add0ea88bb66',
                date_of_birth = '1995-01-13',
                delivery_address1 = '472 James Building',
                delivery_address2 = 'Springfield Road',
                delivery_city = 'Paris',
                delivery_country = 'FR',
                delivery_landmark = 'near Post Office',
                delivery_state = 'Ile-de-France',
                delivery_zip_code = '048581',
                device_info = 'android',
                email = 'arnav42@xyzmail.com',
                enable_doc_upload = True,
                estimated_monthly_funding = '<1000',
                estimated_monthly_funding_currency = 'EUR',
                expected_countries_to_send_receive_from = FR,DE,
                first_name = 'Arnav',
                gender = 'Male',
                identification_doc = [
                    nium.models.compliance_identification_doc_dto.ComplianceIdentificationDocDTO(
                        identification_doc_color = '', 
                        identification_doc_expiry = '', 
                        identification_doc_holder_name = '', 
                        identification_doc_issuance_country = '', 
                        identification_doc_reference_number = '', 
                        identification_document = [
                            nium.models.identification_document_dto.IdentificationDocumentDTO(
                                document = '', 
                                file_name = '', 
                                file_type = '', )
                            ], 
                        identification_issuing_authority = '', 
                        identification_issuing_date = '', 
                        identification_type = '', 
                        identification_value = '', )
                    ],
                intended_use_of_account = 'Receiving from/Transfers to friends or family',
                international_payments_supported = True,
                ip_address = '1.1.1.1',
                kyc = True,
                last_name = 'Paul',
                middle_name = 'Kumar',
                mobile = '991122142',
                nationality = 'SG',
                native_language_name = '界限',
                occupation = 'OC0001',
                pep = False,
                preferred_name = 'Arnav',
                segment = 'gold',
                session_id = '1234',
                tax_details = [
                    nium.models.customer_tax_detail_dto.CustomerTaxDetailDTO(
                        country_of_residence = 'FR', 
                        tax_id_number = 'FR123456', )
                    ],
                upgrade_request = True
            )
        else:
            return CustomerDataRequestDTO(
                billing_address1 = '72 James Buildin',
                billing_city = 'Paris',
                billing_country = 'FR',
                billing_zip_code = '048581',
                country_code = 'SG',
                customer_hash_id = '2992c5c6-823b-4fa9-a64b-add0ea88bb66',
                date_of_birth = '1995-01-13',
                delivery_address1 = '472 James Building',
                delivery_city = 'Paris',
                delivery_country = 'FR',
                delivery_zip_code = '048581',
                email = 'arnav42@xyzmail.com',
                first_name = 'Arnav',
                last_name = 'Paul',
                mobile = '991122142',
                nationality = 'SG',
                pep = False,
                tax_details = [
                    nium.models.customer_tax_detail_dto.CustomerTaxDetailDTO(
                        country_of_residence = 'FR', 
                        tax_id_number = 'FR123456', )
                    ],
        )
        """

    def testCustomerDataRequestDTO(self):
        """Test CustomerDataRequestDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
