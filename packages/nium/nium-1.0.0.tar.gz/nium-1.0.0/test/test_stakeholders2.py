# coding: utf-8

"""
    NIUM Platform

    NIUM Platform

    The version of the OpenAPI document: 2023.12.5
    Contact: experience@nium.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from nium.models.stakeholders2 import Stakeholders2  # noqa: E501

class TestStakeholders2(unittest.TestCase):
    """Stakeholders2 unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Stakeholders2:
        """Test Stakeholders2
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Stakeholders2`
        """
        model = Stakeholders2()  # noqa: E501
        if include_optional:
            return Stakeholders2(
                business_partner = nium.models.business_partner2.BusinessPartner2(
                    addresses = nium.models.addresses.Addresses(
                        business_address = nium.models.business_address.BusinessAddress(
                            address_line1 = '', 
                            address_line2 = '', 
                            city = '', 
                            country = '', 
                            postcode = '', 
                            state = '', ), 
                        registered_address = nium.models.registered_address.RegisteredAddress(
                            address_line1 = '', 
                            address_line2 = '', 
                            city = '', 
                            country = '', 
                            postcode = '', 
                            state = '', ), ), 
                    business_entity_type = '', 
                    business_in_other_countries = [
                        None
                        ], 
                    business_name = '', 
                    business_registration_number = '', 
                    business_type = '', 
                    description = '', 
                    document_details = nium.models.document_detail.DocumentDetail(
                        document = [
                            nium.models.document.Document(
                                file_name = '', 
                                file_type = '', )
                            ], 
                        document_color = '', 
                        document_expiry_date = '', 
                        document_holder_name = '', 
                        document_issuance_country = '', 
                        document_issuance_state = '', 
                        document_issued_date = '', 
                        document_issuing_authority = '', 
                        document_number = '6565666', 
                        document_reference_number = '', 
                        document_type = '', ), 
                    legal_details = nium.models.legal_details.LegalDetails(
                        legislation_name = '', 
                        legislation_type = '', 
                        listed_exchange = '', 
                        registered_country = '', 
                        registered_date = '', 
                        registration_type = '', ), 
                    purpose_code = '', 
                    regulatory_details = nium.models.regulatory_details.RegulatoryDetails(
                        regulated_trust_type = [
                            ''
                            ], 
                        unregulated_trust_type = [
                            ''
                            ], ), 
                    share_percentage = '', 
                    ticker = '', 
                    trade_name = '', 
                    trustee_name = '', 
                    website = '', ),
                entity_type = '',
                reference_id = '137889fb-8569-4e34-b50b-1a71c787dc61',
                stakeholder_details = nium.models.stakeholder_details2.StakeholderDetails2(
                    additional_info = {
                        'key' : ''
                        }, 
                    address = nium.models.address.Address(
                        address_line1 = '', 
                        address_line2 = '', 
                        city = '', 
                        country = '', 
                        postcode = '', 
                        state = '', ), 
                    birth_country = '', 
                    contact_details = nium.models.contact_details.ContactDetails(
                        contact_no = '', 
                        country_code = '', 
                        email = '', ), 
                    date_of_birth = '', 
                    document_details = nium.models.document_detail.DocumentDetail(
                        document = [
                            nium.models.document.Document(
                                file_name = '', 
                                file_type = '', )
                            ], 
                        document_color = '', 
                        document_expiry_date = '', 
                        document_holder_name = '', 
                        document_issuance_country = '', 
                        document_issuance_state = '', 
                        document_issued_date = '', 
                        document_issuing_authority = '', 
                        document_number = '6565666', 
                        document_reference_number = '', 
                        document_type = '', ), 
                    first_name = '', 
                    gender = '', 
                    is_primary_applicant = '', 
                    last_name = '', 
                    middle_name = '', 
                    nationality = '', 
                    professional_details = [
                        nium.models.professional_details.ProfessionalDetails(
                            position = '', 
                            position_end_date = '', 
                            position_start_date = '', 
                            share_percentage = '', )
                        ], 
                    source_of_funds = '', 
                    tax_details = [
                        nium.models.tax_details.TaxDetails(
                            country = '', 
                            tax_number = '', )
                        ], 
                    title = '', )
            )
        else:
            return Stakeholders2(
        )
        """

    def testStakeholders2(self):
        """Test Stakeholders2"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
