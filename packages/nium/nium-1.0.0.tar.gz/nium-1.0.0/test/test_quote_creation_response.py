# coding: utf-8

"""
    NIUM Platform

    NIUM Platform

    The version of the OpenAPI document: 2023.12.5
    Contact: experience@nium.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from nium.models.quote_creation_response import QuoteCreationResponse  # noqa: E501

class TestQuoteCreationResponse(unittest.TestCase):
    """QuoteCreationResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> QuoteCreationResponse:
        """Test QuoteCreationResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `QuoteCreationResponse`
        """
        model = QuoteCreationResponse()  # noqa: E501
        if include_optional:
            return QuoteCreationResponse(
                id = 'quote_1234567890abcdefABCDEF',
                net_exchange_rate = 1.342255231,
                expiry_time = '2021-03-09T06:46:03Z',
                source_currency_code = 'USD',
                destination_currency_code = 'SGD',
                quote_type = 'balance_transfer',
                conversion_schedule = 'immediate',
                lock_period = '5_mins',
                exchange_rate = 1.349324513,
                markup_rate = 0.006745677,
                ecb_exchange_rate = 1.349324513,
                rate_capture_time = '2021-03-09T06:46:03Z',
                source_amount = 13.42,
                destination_amount = 13.42,
                destination_markup_amount = 0.07,
                created_time = '2021-03-09T06:46:03Z',
                is_rate_stale = True
            )
        else:
            return QuoteCreationResponse(
        )
        """

    def testQuoteCreationResponse(self):
        """Test QuoteCreationResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
