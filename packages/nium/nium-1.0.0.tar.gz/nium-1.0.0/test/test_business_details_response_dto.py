# coding: utf-8

"""
    NIUM Platform

    NIUM Platform

    The version of the OpenAPI document: 2023.12.5
    Contact: experience@nium.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from nium.models.business_details_response_dto import BusinessDetailsResponseDTO  # noqa: E501

class TestBusinessDetailsResponseDTO(unittest.TestCase):
    """BusinessDetailsResponseDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BusinessDetailsResponseDTO:
        """Test BusinessDetailsResponseDTO
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BusinessDetailsResponseDTO`
        """
        model = BusinessDetailsResponseDTO()  # noqa: E501
        if include_optional:
            return BusinessDetailsResponseDTO(
                association_detail = nium.models.association_details.AssociationDetails(
                    association_chair_person = '', 
                    association_name = '', 
                    association_number = '', ),
                business_address = nium.models.corporate_address_dto.CorporateAddressDTO(
                    address1 = '221 Mulford Drive', 
                    address2 = 'Johnson Square', 
                    city = 'Sydney', 
                    country = 'AU', 
                    state = 'New South Wales', 
                    zip_code = '2001', ),
                business_extract_covered_stakeholder = '',
                business_name = 'ABCD XYZ LTD',
                business_registration_number = '10519001',
                business_registration_type = 'null',
                business_type = 'Public Company',
                case_id = 'null',
                client_id = 'null',
                compliance_region = 'SG',
                description = '',
                document_details = [
                    nium.models.corporate_document_details_dto.CorporateDocumentDetailsDTO(
                        document_issuance_country = 'SG', 
                        identification_type = 'PASSPORT', 
                        identification_value = '234234423', )
                    ],
                former_name = '',
                legislation_name = '',
                legislation_type = '',
                listed_exchange = 'internationalExchange',
                partnership_details = nium.models.partnership_details.PartnershipDetails(
                    partner_country = '', 
                    partner_name = '', 
                    partner_state = '', ),
                reference_id = '',
                registered_address = nium.models.corporate_address_dto.CorporateAddressDTO(
                    address1 = '221 Mulford Drive', 
                    address2 = 'Johnson Square', 
                    city = 'Sydney', 
                    country = 'AU', 
                    state = 'New South Wales', 
                    zip_code = '2001', ),
                registered_country = 'AU',
                registered_date = '2021-08-10',
                regulatory_details = nium.models.regulatory_details.RegulatoryDetails(
                    regulated_trust_type = [
                        ''
                        ], 
                    unregulated_trust_type = [
                        ''
                        ], ),
                settlor_name = '',
                stock_symbol = '',
                tax_details = [
                    nium.models.tax_details.TaxDetails(
                        country = '', 
                        tax_number = '', )
                    ],
                trade_name = 'ABCD XYZ',
                trustee_name = '',
                website = 'www.abcxyz.com'
            )
        else:
            return BusinessDetailsResponseDTO(
        )
        """

    def testBusinessDetailsResponseDTO(self):
        """Test BusinessDetailsResponseDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
