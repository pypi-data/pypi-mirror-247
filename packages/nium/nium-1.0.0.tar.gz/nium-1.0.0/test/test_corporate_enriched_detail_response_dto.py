# coding: utf-8

"""
    NIUM Platform

    NIUM Platform

    The version of the OpenAPI document: 2023.12.5
    Contact: experience@nium.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from nium.models.corporate_enriched_detail_response_dto import CorporateEnrichedDetailResponseDTO  # noqa: E501

class TestCorporateEnrichedDetailResponseDTO(unittest.TestCase):
    """CorporateEnrichedDetailResponseDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CorporateEnrichedDetailResponseDTO:
        """Test CorporateEnrichedDetailResponseDTO
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CorporateEnrichedDetailResponseDTO`
        """
        model = CorporateEnrichedDetailResponseDTO()  # noqa: E501
        if include_optional:
            return CorporateEnrichedDetailResponseDTO(
                business_details = nium.models.corporate_business_details.CorporateBusinessDetails(
                    additional_info = {
                        'key' : ''
                        }, 
                    addresses = nium.models.corporate_addresses.CorporateAddresses(
                        registered_address = nium.models.corporate_registered_address.CorporateRegisteredAddress(
                            address_line1 = '', 
                            address_line2 = '', 
                            city = '', 
                            country = '', 
                            postcode = '', 
                            state = '', ), ), 
                    business_name = '', 
                    business_registration_number = '', 
                    legal_details = nium.models.corporate_legal_details.CorporateLegalDetails(
                        registered_country = '', 
                        registered_date = '', ), 
                    stakeholders = [
                        nium.models.corporate_stakeholders.CorporateStakeholders(
                            business_partner = nium.models.corporate_business_partner.CorporateBusinessPartner(
                                business_entity_type = '', 
                                business_name = '', 
                                business_registration_number = '', ), 
                            entity_type = '', 
                            stakeholder_details = nium.models.corporate_stakeholder_details.CorporateStakeholderDetails(
                                address = nium.models.corporate_address.CorporateAddress(
                                    address_line1 = '', 
                                    address_line2 = '', 
                                    city = '', 
                                    country = '', 
                                    postcode = '', 
                                    state = '', ), 
                                contact_details = nium.models.corporate_contact_details.CorporateContactDetails(
                                    contact_no = '', 
                                    country_code = '', 
                                    email = '', ), 
                                date_of_birth = '', 
                                document_details = [
                                    nium.models.corporate_document_detail.CorporateDocumentDetail(
                                        document_number = '6565666', 
                                        document_type = '', )
                                    ], 
                                first_name = '', 
                                last_name = '', 
                                middle_name = '', 
                                nationality = '', 
                                professional_details = [
                                    nium.models.corporate_professional_details.CorporateProfessionalDetails(
                                        position = '', 
                                        share_percentage = '', )
                                    ], ), )
                        ], 
                    website = '', ),
                risk_assessment_info = nium.models.corporate_risk_assessment_info.CorporateRiskAssessmentInfo(
                    annual_turnover = '', 
                    total_employees = '', )
            )
        else:
            return CorporateEnrichedDetailResponseDTO(
        )
        """

    def testCorporateEnrichedDetailResponseDTO(self):
        """Test CorporateEnrichedDetailResponseDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
