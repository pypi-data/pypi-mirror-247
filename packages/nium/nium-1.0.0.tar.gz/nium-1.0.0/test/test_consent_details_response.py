# coding: utf-8

"""
    NIUM Platform

    NIUM Platform

    The version of the OpenAPI document: 2023.12.5
    Contact: experience@nium.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from nium.models.consent_details_response import ConsentDetailsResponse  # noqa: E501

class TestConsentDetailsResponse(unittest.TestCase):
    """ConsentDetailsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ConsentDetailsResponse:
        """Test ConsentDetailsResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ConsentDetailsResponse`
        """
        model = ConsentDetailsResponse()  # noqa: E501
        if include_optional:
            return ConsentDetailsResponse(
                consent = nium.models.consent.Consent(
                    access = nium.models.access.Access(
                        accounts = [
                            nium.models.account.Account(
                                bban = '', 
                                currency = '', 
                                iban = '', 
                                masked_pan = '', 
                                msisdn = '', 
                                pan = '', )
                            ], 
                        all_psd2 = '', 
                        available_accounts = '', 
                        balances = [
                            nium.models.balance.Balance(
                                balance_amount = nium.models.balance_amount.BalanceAmount(
                                    amount = '', 
                                    currency = '', ), 
                                balance_type = '', 
                                bban = '', 
                                currency = '', 
                                iban = '', 
                                masked_pan = '', 
                                msisdn = '', 
                                pan = '', )
                            ], 
                        transactions = [
                            nium.models.transaction.Transaction(
                                bban = '', 
                                booking_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                card_acceptor_address = nium.models.card_acceptor_address.CardAcceptorAddress(
                                    city = '', 
                                    country = '', ), 
                                card_acceptor_id = '', 
                                card_transaction_id = '', 
                                currency = '', 
                                iban = '', 
                                masked_pan = '', 
                                masked_pan = '', 
                                msisdn = '', 
                                original_amount = nium.models.transaction_amount.TransactionAmount(
                                    amount = '', 
                                    currency = '', ), 
                                pan = '', 
                                transaction_amount = nium.models.transaction_amount.TransactionAmount(
                                    amount = '', 
                                    currency = '', ), 
                                transaction_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                            ], ), 
                    consent_status = '', 
                    frequency_per_day = 56, 
                    last_action_date = '', 
                    recurring_indicator = True, 
                    sca_status = nium.models.sca_status.ScaStatus(
                        sca_approach = '', 
                        sca_requred = True, ), 
                    valid_until = '', ),
                id = '',
                payment = nium.models.payment.Payment(
                    creditor_account = '', 
                    creditor_currency = '', 
                    creditor_name = '', 
                    debtor_account = '', 
                    debtor_currency = '', 
                    instructed_amount = '', 
                    instructed_currency = '', )
            )
        else:
            return ConsentDetailsResponse(
        )
        """

    def testConsentDetailsResponse(self):
        """Test ConsentDetailsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
