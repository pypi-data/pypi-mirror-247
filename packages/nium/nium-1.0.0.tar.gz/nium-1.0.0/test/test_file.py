# coding: utf-8

"""
    NIUM Platform

    NIUM Platform

    The version of the OpenAPI document: 2023.12.5
    Contact: experience@nium.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from nium.models.file import File  # noqa: E501

class TestFile(unittest.TestCase):
    """File unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> File:
        """Test File
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `File`
        """
        model = File()  # noqa: E501
        if include_optional:
            return File(
                absolute = True,
                absolute_file = nium.models.file.File(
                    absolute = True, 
                    absolute_file = nium.models.file.File(
                        absolute = True, 
                        absolute_path = '', 
                        canonical_file = , 
                        canonical_path = '', 
                        directory = True, 
                        file = True, 
                        free_space = 56, 
                        hidden = True, 
                        name = '', 
                        parent = '', 
                        parent_file = , 
                        path = '', 
                        total_space = 56, 
                        usable_space = 56, ), 
                    absolute_path = '', 
                    canonical_file = , 
                    canonical_path = '', 
                    directory = True, 
                    file = True, 
                    free_space = 56, 
                    hidden = True, 
                    name = '', 
                    parent = '', 
                    parent_file = , 
                    path = '', 
                    total_space = 56, 
                    usable_space = 56, ),
                absolute_path = '',
                canonical_file = nium.models.file.File(
                    absolute = True, 
                    absolute_file = nium.models.file.File(
                        absolute = True, 
                        absolute_path = '', 
                        canonical_path = '', 
                        directory = True, 
                        file = True, 
                        free_space = 56, 
                        hidden = True, 
                        name = '', 
                        parent = '', 
                        parent_file = , 
                        path = '', 
                        total_space = 56, 
                        usable_space = 56, ), 
                    absolute_path = '', 
                    canonical_path = '', 
                    directory = True, 
                    file = True, 
                    free_space = 56, 
                    hidden = True, 
                    name = '', 
                    parent = '', 
                    parent_file = , 
                    path = '', 
                    total_space = 56, 
                    usable_space = 56, ),
                canonical_path = '',
                directory = True,
                file = True,
                free_space = 56,
                hidden = True,
                name = '',
                parent = '',
                parent_file = nium.models.file.File(
                    absolute = True, 
                    absolute_file = nium.models.file.File(
                        absolute = True, 
                        absolute_path = '', 
                        canonical_file = , 
                        canonical_path = '', 
                        directory = True, 
                        file = True, 
                        free_space = 56, 
                        hidden = True, 
                        name = '', 
                        parent = '', 
                        path = '', 
                        total_space = 56, 
                        usable_space = 56, ), 
                    absolute_path = '', 
                    canonical_file = , 
                    canonical_path = '', 
                    directory = True, 
                    file = True, 
                    free_space = 56, 
                    hidden = True, 
                    name = '', 
                    parent = '', 
                    path = '', 
                    total_space = 56, 
                    usable_space = 56, ),
                path = '',
                total_space = 56,
                usable_space = 56
            )
        else:
            return File(
        )
        """

    def testFile(self):
        """Test File"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
