# coding: utf-8

"""
    NIUM Platform

    NIUM Platform

    The version of the OpenAPI document: 2023.12.5
    Contact: experience@nium.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from nium.models.business_details2 import BusinessDetails2  # noqa: E501

class TestBusinessDetails2(unittest.TestCase):
    """BusinessDetails2 unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BusinessDetails2:
        """Test BusinessDetails2
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BusinessDetails2`
        """
        model = BusinessDetails2()  # noqa: E501
        if include_optional:
            return BusinessDetails2(
                additional_info = {
                    'key' : ''
                    },
                addresses = nium.models.addresses.Addresses(
                    business_address = nium.models.business_address.BusinessAddress(
                        address_line1 = '', 
                        address_line2 = '', 
                        city = '', 
                        country = '', 
                        postcode = '', 
                        state = '', ), 
                    registered_address = nium.models.registered_address.RegisteredAddress(
                        address_line1 = '', 
                        address_line2 = '', 
                        city = '', 
                        country = '', 
                        postcode = '', 
                        state = '', ), ),
                applicant_details = nium.models.applicant_details2.ApplicantDetails2(
                    additional_info = {
                        'key' : ''
                        }, 
                    address = nium.models.address.Address(
                        address_line1 = '', 
                        address_line2 = '', 
                        city = '', 
                        country = '', 
                        postcode = '', 
                        state = '', ), 
                    birth_country = '', 
                    contact_details = nium.models.contact_details.ContactDetails(
                        contact_no = '', 
                        country_code = '', 
                        email = '', ), 
                    date_of_birth = '', 
                    document_details = nium.models.document_detail.DocumentDetail(
                        document = [
                            nium.models.document.Document(
                                file_name = '', 
                                file_type = '', )
                            ], 
                        document_color = '', 
                        document_expiry_date = '', 
                        document_holder_name = '', 
                        document_issuance_country = '', 
                        document_issuance_state = '', 
                        document_issued_date = '', 
                        document_issuing_authority = '', 
                        document_number = '6565666', 
                        document_reference_number = '', 
                        document_type = '', ), 
                    first_name = '', 
                    gender = '', 
                    is_resident = '', 
                    kyc_mode = '', 
                    last_name = '', 
                    middle_name = '', 
                    nationality = '', 
                    occupation = 'OC0001', 
                    professional_details = [
                        nium.models.professional_details.ProfessionalDetails(
                            position = '', 
                            position_end_date = '', 
                            position_start_date = '', 
                            share_percentage = '', )
                        ], 
                    reference_id = '', 
                    tax_details = [
                        nium.models.tax_details.TaxDetails(
                            country = '', 
                            tax_number = '', )
                        ], ),
                association_details = nium.models.association_details.AssociationDetails(
                    association_chair_person = '', 
                    association_name = '', 
                    association_number = '', ),
                business_in_other_countries = [
                    None
                    ],
                business_name = 'updated business name',
                business_registration_number = '',
                business_type = '',
                description = '',
                document_details = nium.models.document_detail.DocumentDetail(
                    document = [
                        nium.models.document.Document(
                            file_name = '', 
                            file_type = '', )
                        ], 
                    document_color = '', 
                    document_expiry_date = '', 
                    document_holder_name = '', 
                    document_issuance_country = '', 
                    document_issuance_state = '', 
                    document_issued_date = '', 
                    document_issuing_authority = '', 
                    document_number = '6565666', 
                    document_reference_number = '', 
                    document_type = '', ),
                legal_details = nium.models.legal_details.LegalDetails(
                    legislation_name = '', 
                    legislation_type = '', 
                    listed_exchange = '', 
                    registered_country = '', 
                    registered_date = '', 
                    registration_type = '', ),
                onboarding_details = nium.models.onboarding_details.OnboardingDetails(
                    onboarding_by_partner = '', 
                    onboarding_partner_name = '', ),
                partnership_details = nium.models.partnership_details.PartnershipDetails(
                    partner_country = '', 
                    partner_name = '', 
                    partner_state = '', ),
                purpose_code = '',
                reference_id = '11e93365-d383-4eee-9686-7f06bcb8671e',
                regulatory_details = nium.models.regulatory_details.RegulatoryDetails(
                    regulated_trust_type = [
                        ''
                        ], 
                    unregulated_trust_type = [
                        ''
                        ], ),
                revenue_info = nium.models.revenue_info.RevenueInfo(
                    annual_turn_over = '', 
                    monthly_volume = '', ),
                settlor_name = '',
                stakeholders = [
                    nium.models.stakeholders2.Stakeholders2(
                        business_partner = nium.models.business_partner2.BusinessPartner2(
                            addresses = nium.models.addresses.Addresses(
                                business_address = nium.models.business_address.BusinessAddress(
                                    address_line1 = '', 
                                    address_line2 = '', 
                                    city = '', 
                                    country = '', 
                                    postcode = '', 
                                    state = '', ), 
                                registered_address = nium.models.registered_address.RegisteredAddress(
                                    address_line1 = '', 
                                    address_line2 = '', 
                                    city = '', 
                                    country = '', 
                                    postcode = '', 
                                    state = '', ), ), 
                            business_entity_type = '', 
                            business_in_other_countries = [
                                None
                                ], 
                            business_name = '', 
                            business_registration_number = '', 
                            business_type = '', 
                            description = '', 
                            document_details = nium.models.document_detail.DocumentDetail(
                                document = [
                                    nium.models.document.Document(
                                        file_name = '', 
                                        file_type = '', )
                                    ], 
                                document_color = '', 
                                document_expiry_date = '', 
                                document_holder_name = '', 
                                document_issuance_country = '', 
                                document_issuance_state = '', 
                                document_issued_date = '', 
                                document_issuing_authority = '', 
                                document_number = '6565666', 
                                document_reference_number = '', 
                                document_type = '', ), 
                            legal_details = nium.models.legal_details.LegalDetails(
                                legislation_name = '', 
                                legislation_type = '', 
                                listed_exchange = '', 
                                registered_country = '', 
                                registered_date = '', 
                                registration_type = '', ), 
                            purpose_code = '', 
                            regulatory_details = nium.models.regulatory_details.RegulatoryDetails(
                                regulated_trust_type = [
                                    ''
                                    ], 
                                unregulated_trust_type = [
                                    ''
                                    ], ), 
                            share_percentage = '', 
                            ticker = '', 
                            trade_name = '', 
                            trustee_name = '', 
                            website = '', ), 
                        entity_type = '', 
                        reference_id = '137889fb-8569-4e34-b50b-1a71c787dc61', 
                        stakeholder_details = nium.models.stakeholder_details2.StakeholderDetails2(
                            additional_info = {
                                'key' : ''
                                }, 
                            address = nium.models.address.Address(
                                address_line1 = '', 
                                address_line2 = '', 
                                city = '', 
                                country = '', 
                                postcode = '', 
                                state = '', ), 
                            birth_country = '', 
                            contact_details = nium.models.contact_details.ContactDetails(
                                contact_no = '', 
                                country_code = '', 
                                email = '', ), 
                            date_of_birth = '', 
                            first_name = '', 
                            gender = '', 
                            is_primary_applicant = '', 
                            last_name = '', 
                            middle_name = '', 
                            nationality = '', 
                            professional_details = [
                                nium.models.professional_details.ProfessionalDetails(
                                    position = '', 
                                    position_end_date = '', 
                                    position_start_date = '', 
                                    share_percentage = '', )
                                ], 
                            source_of_funds = '', 
                            tax_details = [
                                nium.models.tax_details.TaxDetails(
                                    country = '', 
                                    tax_number = '', )
                                ], 
                            title = '', ), )
                    ],
                tax_details = [
                    nium.models.tax_details.TaxDetails(
                        country = '', 
                        tax_number = '', )
                    ],
                ticker = '',
                trade_name = '',
                trustee_name = '',
                website = ''
            )
        else:
            return BusinessDetails2(
        )
        """

    def testBusinessDetails2(self):
        """Test BusinessDetails2"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
