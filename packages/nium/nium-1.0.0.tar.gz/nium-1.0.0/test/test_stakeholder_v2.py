# coding: utf-8

"""
    NIUM Platform

    NIUM Platform

    The version of the OpenAPI document: 2023.12.5
    Contact: experience@nium.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from nium.models.stakeholder_v2 import StakeholderV2  # noqa: E501

class TestStakeholderV2(unittest.TestCase):
    """StakeholderV2 unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> StakeholderV2:
        """Test StakeholderV2
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `StakeholderV2`
        """
        model = StakeholderV2()  # noqa: E501
        if include_optional:
            return StakeholderV2(
                business_partner = nium.models.business_partner_v2.BusinessPartnerV2(
                    business_entity_type = '', 
                    business_name = '', 
                    business_registration_number = '', 
                    business_type = '', 
                    legal_details = nium.models.business_partner_legal_details.BusinessPartnerLegalDetails(
                        registered_country = '', 
                        registered_date = '', ), 
                    registered_address = nium.models.address_v2.AddressV2(
                        address_line1 = '', 
                        address_line2 = '', 
                        city = 'Sydney', 
                        country = 'AU', 
                        post_code = '2001', 
                        state = 'New South Wales', ), 
                    share_percentage = '', ),
                reference_id = '',
                stakeholder_details = nium.models.stakeholder_details_v2.StakeholderDetailsV2(
                    address = nium.models.address_v2.AddressV2(
                        address_line1 = '', 
                        address_line2 = '', 
                        city = 'Sydney', 
                        country = 'AU', 
                        post_code = '2001', 
                        state = 'New South Wales', ), 
                    birth_country = '', 
                    contact_details = nium.models.stakeholder_contact_details_response_dto.StakeholderContactDetailsResponseDTO(
                        contact_no = '', 
                        email = '', ), 
                    date_of_birth = '', 
                    document_details = [
                        nium.models.corporate_document_details2_dto.CorporateDocumentDetails2DTO(
                            document_issuance_country = 'SG', 
                            identification_type = 'PASSPORT', 
                            identification_value = '234234423', )
                        ], 
                    first_name = '', 
                    gender = '', 
                    is_pep = True, 
                    last_name = '', 
                    middle_name = '', 
                    nationality = '', 
                    professional_details = [
                        nium.models.professional_details_response_dto.ProfessionalDetailsResponseDTO(
                            position = '', 
                            position_start_date = '', 
                            share_percentage = '', )
                        ], 
                    tax_details = [
                        nium.models.tax_details_response_dto.TaxDetailsResponseDTO(
                            country = 'France', 
                            tax_number = 'FR123456', )
                        ], )
            )
        else:
            return StakeholderV2(
        )
        """

    def testStakeholderV2(self):
        """Test StakeholderV2"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
