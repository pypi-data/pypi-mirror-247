# coding: utf-8

"""
    NIUM Platform

    NIUM Platform

    The version of the OpenAPI document: 2023.12.5
    Contact: experience@nium.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from nium.models.wallet_transactions_response_dto import WalletTransactionsResponseDTO  # noqa: E501

class TestWalletTransactionsResponseDTO(unittest.TestCase):
    """WalletTransactionsResponseDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> WalletTransactionsResponseDTO:
        """Test WalletTransactionsResponseDTO
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `WalletTransactionsResponseDTO`
        """
        model = WalletTransactionsResponseDTO()  # noqa: E501
        if include_optional:
            return WalletTransactionsResponseDTO(
                content = [
                    nium.models.transaction_response_dto.TransactionResponseDTO(
                        tags = {
                            'key' : ''
                            }, 
                        acquirer_country_code = '', 
                        acquiring_institution_code = '', 
                        auth_amount = 1.337, 
                        auth_code = '', 
                        auth_currency_code = '', 
                        billing_amount = 1.337, 
                        billing_conversion_rate = '', 
                        billing_currency_code = '', 
                        billing_replacement_amount = 1.337, 
                        business_transaction = True, 
                        card_hash_id = '', 
                        card_transaction_amount = 1.337, 
                        child_customer_hash_id = '', 
                        client_hash_id = '', 
                        comments = '', 
                        compliance_status = 'NONE', 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        current_with_holding_balance = 1.337, 
                        customer_hash_id = '', 
                        date_of_transaction = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        debit = True, 
                        effective_auth_amount = 1.337, 
                        labels = {
                            'key' : ''
                            }, 
                        local_date = '', 
                        local_time = '', 
                        masked_card_number = '', 
                        mcc = '', 
                        merchant_category = '', 
                        merchant_city = '', 
                        merchant_country = '', 
                        merchant_id = '', 
                        merchant_latitude = '', 
                        merchant_longitude = '', 
                        merchant_name = '', 
                        merchant_name_location = '', 
                        merchant_tagged_name = '', 
                        merchant_zoom_index = '', 
                        original_authorization_code = '', 
                        partner_reference_number = '', 
                        payment_instrument_hash_id = '', 
                        pos_condition_code = '', 
                        pos_entry_capability_code = '', 
                        pos_entry_mode = '', 
                        previous_balance = 1.337, 
                        processing_code = '', 
                        receipt_file_name = '', 
                        receipt_type = '', 
                        retrieval_reference_number = '', 
                        rfi_details = [
                            nium.models.transaction_rfi_details_response.TransactionRfiDetailsResponse(
                                description = '', 
                                document_type = '', 
                                mandatory = True, 
                                remarks = '', 
                                required_data = [
                                    nium.models.rfi_attribute_response.RfiAttributeResponse(
                                        label = '', 
                                        type = '', 
                                        value = '', )
                                    ], 
                                rfi_hash_id = '', 
                                rfi_id = '', 
                                rfi_status = 'NONE', 
                                transaction_entity_type = 'DEBTOR', 
                                type = '', )
                            ], 
                        rha_transaction_id = '', 
                        settlement_amount = 1.337, 
                        settlement_auth_amount = 1.337, 
                        settlement_billing_amount = 1.337, 
                        settlement_currency = '', 
                        settlement_date = '', 
                        settlement_status = 'APPROVED', 
                        settlement_transaction_amount = 1.337, 
                        status = 'APPROVED', 
                        system_trace_audit_number = '', 
                        terminal_id = '', 
                        transaction_currency_code = '', 
                        transaction_replacement_amount = 1.337, 
                        transaction_type = 'Debit', 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        wallet_hash_id = '', )
                    ],
                total_elements = 56,
                total_pages = 56
            )
        else:
            return WalletTransactionsResponseDTO(
        )
        """

    def testWalletTransactionsResponseDTO(self):
        """Test WalletTransactionsResponseDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
