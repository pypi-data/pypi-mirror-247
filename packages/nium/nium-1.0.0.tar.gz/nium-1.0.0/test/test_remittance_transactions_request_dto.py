# coding: utf-8

"""
    NIUM Platform

    NIUM Platform

    The version of the OpenAPI document: 2023.12.5
    Contact: experience@nium.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from nium.models.remittance_transactions_request_dto import RemittanceTransactionsRequestDTO  # noqa: E501

class TestRemittanceTransactionsRequestDTO(unittest.TestCase):
    """RemittanceTransactionsRequestDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RemittanceTransactionsRequestDTO:
        """Test RemittanceTransactionsRequestDTO
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RemittanceTransactionsRequestDTO`
        """
        model = RemittanceTransactionsRequestDTO()  # noqa: E501
        if include_optional:
            return RemittanceTransactionsRequestDTO(
                additional_fees = nium.models.additional_fees_dto.AdditionalFeesDTO(
                    fee_type = 'FIXED', 
                    fee_value = 2, 
                    fx_markup = 0.2, ),
                authentication_code = '',
                beneficiary = nium.models.beneficiary.Beneficiary(
                    id = '5f7ddd6a56b63400178319c5', ),
                customer_comments = 'Transfer to family',
                device_details = nium.models.device_details_dto.DeviceDetailsDTO(
                    country_ip = '66.249.74.64', 
                    device_info = 'macOS', 
                    ip_address = '45.48.241.198', 
                    session_id = '40531ac01a6f11edafc28dba55d51275', ),
                exemption_code = '01',
                own_payment = True,
                payout = nium.models.payout.Payout(
                    audit_id = 112, 
                    destination_amount = 0, 
                    pre_screening = False, 
                    scheduled_payout_date = '2022-11-29', 
                    service_time = '2022-11-29', 
                    source_amount = 100, 
                    source_currency = 'INR', 
                    swift_fee_type = 'BEN', 
                    trade_order_id = 'TR012345', ),
                purpose_code = 'IR01802',
                remitter = nium.models.remitter_request_dto.RemitterRequestDTO(
                    account_type = 'INDIVIDUAL', 
                    address = '', 
                    bank_account_number = '', 
                    city = '', 
                    contact_number = '', 
                    country_code = '', 
                    dob = '', 
                    identification_number = '', 
                    identification_type = '', 
                    industry_type = '', 
                    name = '', 
                    nationality = '', 
                    originating_fi_name = '', 
                    place_of_birth = '', 
                    postcode = '', 
                    state = '', ),
                source_of_funds = 'Business Owner/Shareholder'
            )
        else:
            return RemittanceTransactionsRequestDTO(
                beneficiary = nium.models.beneficiary.Beneficiary(
                    id = '5f7ddd6a56b63400178319c5', ),
                payout = nium.models.payout.Payout(
                    audit_id = 112, 
                    destination_amount = 0, 
                    pre_screening = False, 
                    scheduled_payout_date = '2022-11-29', 
                    service_time = '2022-11-29', 
                    source_amount = 100, 
                    source_currency = 'INR', 
                    swift_fee_type = 'BEN', 
                    trade_order_id = 'TR012345', ),
                purpose_code = 'IR01802',
                source_of_funds = 'Business Owner/Shareholder',
        )
        """

    def testRemittanceTransactionsRequestDTO(self):
        """Test RemittanceTransactionsRequestDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
