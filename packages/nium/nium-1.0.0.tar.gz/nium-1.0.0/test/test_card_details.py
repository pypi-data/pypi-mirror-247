# coding: utf-8

"""
    NIUM Platform

    NIUM Platform

    The version of the OpenAPI document: 2023.12.5
    Contact: experience@nium.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from nium.models.card_details import CardDetails  # noqa: E501

class TestCardDetails(unittest.TestCase):
    """CardDetails unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CardDetails:
        """Test CardDetails
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CardDetails`
        """
        model = CardDetails()  # noqa: E501
        if include_optional:
            return CardDetails(
                card_hash_id = 'dcfe0a79-9386-4b50-a1e1-7299f6bfb0c0',
                details = nium.models.card_info.CardInfo(
                    card_product_id = '100', 
                    plastic_id = '750065001', 
                    region_code = 'AU', 
                    masked_card_number = '4572-50xx-xxxx-0123', 
                    proxy_number = '0007570020000010123', 
                    card_type = 'GPR_VIR', 
                    issuance_type = 'primaryCard', 
                    card_status = 'VIRTUAL_ACTIVE', 
                    child_customer_hash_id = '', ),
                embossing = nium.models.embossing_details.EmbossingDetails(
                    name_on_card = 'John Doe', 
                    additional_line = 'John Doe', 
                    issuance_mode = 'NORMAL_DELIVERY_LOCAL', 
                    created_on = '2021-03-12 04:16:46', 
                    processed_on = '2021-03-12 04:16:46', 
                    printed_on = '', 
                    dispatched_on = '', 
                    dispatch_awb = '', ),
                last_updated_on = '2021-03-12 04:16:46',
                block_and_replace_status = nium.models.block_and_replace_status.BlockAndReplaceStatus(
                    block_reason = 'lost', 
                    replaced_on = '2022-01-01', ),
                demographics = nium.models.demographics.Demographics(
                    first_name = 'John', 
                    middle_name = 'W', 
                    last_name = 'Smith', 
                    email = 'johnsmith@xyzmail.com', 
                    country_code = 'AU', 
                    mobile = '0412345111', 
                    current_delivery_address = nium.models.address.Address(
                        address_line1 = '', 
                        address_line2 = '', 
                        city = '', 
                        country = '', 
                        state = '', 
                        zip = '', ), ),
                delivered_to = nium.models.address.Address(
                    address_line1 = '', 
                    address_line2 = '', 
                    city = '', 
                    country = '', 
                    state = '', 
                    zip = '', ),
                tokens = [
                    nium.models.card_tokens_dto.CardTokensDTO(
                        provider_type = 'applePay', 
                        token_reference_number = 'DNITHE400000000000000037', 
                        token_number = '0004611350190078050', 
                        token_requester_id = '40010030273', 
                        device_id = '04312E7B342C80014328036811932950DA075B1C4DD45672', 
                        device_type = '01', 
                        status = 'DEACTIVATED', 
                        created_at = '2021-05-28 06:06:11', 
                        updated_at = '2021-05-28 06:24:33', )
                    ]
            )
        else:
            return CardDetails(
        )
        """

    def testCardDetails(self):
        """Test CardDetails"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
