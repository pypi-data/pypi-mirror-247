# coding: utf-8

"""
    NIUM Platform

    NIUM Platform

    The version of the OpenAPI document: 2023.12.5
    Contact: experience@nium.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from nium.models.corporate_customer_requests_dto import CorporateCustomerRequestsDTO  # noqa: E501

class TestCorporateCustomerRequestsDTO(unittest.TestCase):
    """CorporateCustomerRequestsDTO unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CorporateCustomerRequestsDTO:
        """Test CorporateCustomerRequestsDTO
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CorporateCustomerRequestsDTO`
        """
        model = CorporateCustomerRequestsDTO()  # noqa: E501
        if include_optional:
            return CorporateCustomerRequestsDTO(
                tags = [
                    nium.models.customer_tag_dto.CustomerTagDTO(
                        key = '', 
                        value = '', )
                    ],
                authentication_code = 'authCode',
                business_details = nium.models.business_details.BusinessDetails(
                    additional_info = {
                        'key' : ''
                        }, 
                    addresses = nium.models.addresses.Addresses(
                        business_address = nium.models.business_address.BusinessAddress(
                            address_line1 = '', 
                            address_line2 = '', 
                            city = '', 
                            country = '', 
                            postcode = '', 
                            state = '', ), 
                        registered_address = nium.models.registered_address.RegisteredAddress(
                            address_line1 = '', 
                            address_line2 = '', 
                            city = '', 
                            country = '', 
                            postcode = '', 
                            state = '', ), ), 
                    applicant_details = nium.models.applicant_details.ApplicantDetails(
                        address = nium.models.address.Address(
                            address_line1 = '', 
                            address_line2 = '', 
                            city = '', 
                            country = '', 
                            postcode = '', 
                            state = '', ), 
                        birth_country = '', 
                        contact_details = nium.models.contact_details.ContactDetails(
                            contact_no = '', 
                            country_code = '', 
                            email = '', ), 
                        date_of_birth = '', 
                        document_details = [
                            nium.models.document_detail.DocumentDetail(
                                document = [
                                    nium.models.document.Document(
                                        file_name = '', 
                                        file_type = '', )
                                    ], 
                                document_color = '', 
                                document_expiry_date = '', 
                                document_holder_name = '', 
                                document_issuance_country = '', 
                                document_issuance_state = '', 
                                document_issued_date = '', 
                                document_issuing_authority = '', 
                                document_number = '6565666', 
                                document_reference_number = '', 
                                document_type = '', )
                            ], 
                        first_name = '', 
                        gender = '', 
                        kyc_mode = '', 
                        last_name = '', 
                        middle_name = '', 
                        nationality = '', 
                        occupation = 'OC0001', 
                        professional_details = [
                            nium.models.professional_details.ProfessionalDetails(
                                position = '', 
                                position_end_date = '', 
                                position_start_date = '', 
                                share_percentage = '', )
                            ], 
                        reference_id = '', 
                        tax_details = [
                            nium.models.tax_details.TaxDetails(
                                country = '', 
                                tax_number = '', )
                            ], ), 
                    association_details = nium.models.association_details.AssociationDetails(
                        association_chair_person = '', 
                        association_name = '', 
                        association_number = '', ), 
                    bank_account_details = nium.models.bank_account_details.BankAccountDetails(
                        account_name = '', 
                        account_number = '', 
                        bank_name = '', 
                        currency = '', 
                        routing_type = '', 
                        routing_value = '', ), 
                    business_name = '', 
                    business_registration_number = '', 
                    business_type = '', 
                    description = '', 
                    document_details = [
                        nium.models.document_detail.DocumentDetail(
                            document_color = '', 
                            document_expiry_date = '', 
                            document_holder_name = '', 
                            document_issuance_country = '', 
                            document_issuance_state = '', 
                            document_issued_date = '', 
                            document_issuing_authority = '', 
                            document_number = '6565666', 
                            document_reference_number = '', 
                            document_type = '', )
                        ], 
                    former_name = '', 
                    legal_details = nium.models.legal_details.LegalDetails(
                        legislation_name = '', 
                        legislation_type = '', 
                        listed_exchange = '', 
                        registered_country = '', 
                        registered_date = '', 
                        registration_type = '', ), 
                    partnership_details = nium.models.partnership_details.PartnershipDetails(
                        partner_country = '', 
                        partner_name = '', 
                        partner_state = '', ), 
                    reference_id = '', 
                    regulatory_details = nium.models.regulatory_details.RegulatoryDetails(
                        regulated_trust_type = [
                            ''
                            ], 
                        unregulated_trust_type = [
                            ''
                            ], ), 
                    settlor_name = '', 
                    stakeholders = [
                        nium.models.stakeholders.Stakeholders(
                            business_partner = nium.models.business_partner.BusinessPartner(
                                business_entity_type = '', 
                                business_name = '', 
                                business_registration_number = '', 
                                business_type = '', 
                                description = '', 
                                share_percentage = '', ), 
                            reference_id = '', 
                            stakeholder_details = nium.models.stakeholder_details.StakeholderDetails(
                                birth_country = '', 
                                date_of_birth = '', 
                                first_name = '', 
                                gender = '', 
                                kyc_mode = '', 
                                last_name = '', 
                                middle_name = '', 
                                nationality = '', ), )
                        ], 
                    stock_symbol = '', 
                    tax_details = [
                        nium.models.tax_details.TaxDetails(
                            country = '', 
                            tax_number = '', )
                        ], 
                    trade_name = '', 
                    trustee_name = '', 
                    website = '', ),
                client_id = '',
                customer_hash_id = '',
                region = '',
                risk_assessment_info = nium.models.risk_assessment_info.RiskAssessmentInfo(
                    annual_turnover = '', 
                    country_of_operation = [
                        ''
                        ], 
                    industry_sector = '', 
                    intended_use_of_account = '', 
                    ofac_licence_present = '', 
                    restricted_countries = [
                        ''
                        ], 
                    risk_score = '', 
                    risk_severity = '', 
                    total_employees = '', 
                    transaction_countries = [
                        ''
                        ], 
                    travel_restricted_country = '', )
            )
        else:
            return CorporateCustomerRequestsDTO(
        )
        """

    def testCorporateCustomerRequestsDTO(self):
        """Test CorporateCustomerRequestsDTO"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
