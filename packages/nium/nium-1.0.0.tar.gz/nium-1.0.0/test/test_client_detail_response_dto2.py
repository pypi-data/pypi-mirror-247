# coding: utf-8

"""
    NIUM Platform

    NIUM Platform

    The version of the OpenAPI document: 2023.12.5
    Contact: experience@nium.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from nium.models.client_detail_response_dto2 import ClientDetailResponseDTO2  # noqa: E501

class TestClientDetailResponseDTO2(unittest.TestCase):
    """ClientDetailResponseDTO2 unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ClientDetailResponseDTO2:
        """Test ClientDetailResponseDTO2
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ClientDetailResponseDTO2`
        """
        model = ClientDetailResponseDTO2()  # noqa: E501
        if include_optional:
            return ClientDetailResponseDTO2(
                account_validation = False,
                allow_inter_client_wallet_transfer = False,
                allow_third_party_funding = False,
                apple_pay_support = False,
                auto_sweep_bank_details = nium.models.auto_sweep_bank_details.AutoSweepBankDetails(
                    bank_account_details = nium.models.bank_account_details.BankAccountDetails(
                        account_name = '', 
                        account_number = '', 
                        bank_name = '', 
                        currency = '', 
                        routing_type = '', 
                        routing_value = '', ), 
                    client_registered_address = nium.models.registered_address.RegisteredAddress(
                        address_line1 = '', 
                        address_line2 = '', 
                        city = '', 
                        country = '', 
                        postcode = '', 
                        state = '', ), ),
                billing_address_as_corporate = False,
                card_txn_narrative = 'null',
                card_txn_product_code = 'null',
                card_txn_redirect_url = 'null',
                child_must_have_parent = False,
                client_hash_id = '82c68bab-3c04-3451-8d7b-cb38ad713d97',
                client_id_number = '',
                compliance_callback_url = 'null',
                compliance_status_callback_url = 'https://acme-notification.com/callback/compliance?customerHashId=%s',
                confirmation_of_payee = False,
                contact_no = '+6588008100',
                country_code = 'SG',
                currencies = [
                    nium.models.client_currency_response_dto.ClientCurrencyResponseDTO(
                        authorization_order = 56, 
                        currency_code = 'SGD', 
                        decimal_unit = 0, 
                        fx_sell_allowed = False, 
                        remittance_allowed = False, )
                    ],
                currency_authorization_type = 'MULTI',
                custom_fee_enabled = False,
                customer_auth_url = 'null',
                deduplication_flag = False,
                ekyc_redirect_url = '',
                email = 'admin@acme.com',
                funding_instrument_type = 'RESTRICTED',
                google_pay_support = False,
                license_entity = 'THIRD_PARTY',
                logo_url = 'null',
                markup = 0.5,
                minimum_customer_age = 18,
                name = 'Acme In',
                notification_webhook = 'https://acme-notification.com/webhook',
                payment_ids = [
                    nium.models.payment_ids_dto.PaymentIdsDTO(
                        account_name = 'John', 
                        account_type = 'LOCAL', 
                        bank_address = '108,MG Road', 
                        bank_name = 'DBS_SG', 
                        bank_name_full = 'DBS', 
                        currency_code = 'SGD', 
                        routing_code_type1 = '', 
                        routing_code_type2 = '', 
                        routing_code_value1 = '', 
                        routing_code_value2 = '', 
                        unique_payer_id = 'null', 
                        unique_payment_id = '8850932057194', )
                    ],
                post_funded_payout = False,
                prefund_name = 'Acme Inc',
                regulatory_region = 'SG',
                samsung_pay_support = False,
                whitelisted_remitter_accounts = [
                    nium.models.remitter_account_white_list.RemitterAccountWhiteList(
                        active = False, 
                        remitter_account_number = '9890098900', 
                        remitter_allowed_currency = '', )
                    ]
            )
        else:
            return ClientDetailResponseDTO2(
        )
        """

    def testClientDetailResponseDTO2(self):
        """Test ClientDetailResponseDTO2"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
