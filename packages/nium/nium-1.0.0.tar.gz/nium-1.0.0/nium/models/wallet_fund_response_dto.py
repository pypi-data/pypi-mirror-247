# coding: utf-8

"""
    NIUM Platform

    NIUM Platform

    Contact: experience@nium.com
    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist

class WalletFundResponseDTO(BaseModel):
    """
    WalletFundResponseDTO
    """
    charge_date: Optional[StrictStr] = Field(None, alias="chargeDate", description="Charge date of the payment")
    destination_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="destinationAmount", description="The credited amount.")
    destination_currency_code: Optional[StrictStr] = Field(None, alias="destinationCurrencyCode", description="This field contains the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the destination amount.")
    payment_methods: Optional[conlist(Dict[str, Dict[str, Any]])] = Field(None, alias="paymentMethods", description="It is an array having three objects:  1.Bank transfer data 2.Code for dynamic paynow 3.Static paynow data  paymentMethods.bankName - Bank to which money has to be transferred. paymentMethods.type - Type of payment method such as staticPayNow, dynamicPayNow or bankTransfer paymentMethods.accountNumber - Physical bank account number of NIUM. paymentMethods.accountName - Name of NIUM bank account paymentMethods.qrCode - This is a codec-base64 encoded QRCode image data. This will provide the QRCode image on decoding. This image can be read by devices such as smartphone or camera. paymentMethods.UEN - UEN number associated with NIUM PayNow account.")
    return_url: Optional[StrictStr] = Field(None, alias="returnUrl", description="This is 3DS stripe URL generated for entering OTP.  Fund Wallet with a Card: 1.Customer onboarded successfully with e-KYC calls Fund Wallet API with funding channel as cards 2.NIUM provides returnURL where customer should enter 3DS OTP. 3.If 3DS verification fails, customer needs to restart the transaction. 4.If 3DS verification is completed, NIUM shall redirect(302) the customer to a predefined URL provided by client. Format should be as follows: URL: GET https://<client_URL>/wallet/fund/{systemReferenceNumber} Following which: 1.Client needs to call GET Transactions API with query parameter systemReferenceNumber={authCode}2.If status is Approved or Declined, client may display the same to customer 3.If the status is Pending, client should wait to receive CARD_WALLET_FUNDING_WEBHOOK on success. 4.The client may redirect the customer to any internal page as needed")
    source_amount: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="sourceAmount", description="An amount to be converted.")
    source_currency_code: Optional[StrictStr] = Field(None, alias="sourceCurrencyCode", description="This field contains the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the source amount.")
    status: Optional[StrictStr] = Field(None, description="This field can take the following values:  Pending: Transaction authorization is awaiting success or failure Approved: Transaction is successfully authorized Rejected: Transaction is rejected due to NIUM risk and compliance policies Declined: Transaction is declined Reversal: Transaction is reversed Disputed: A dispute has been raised for the transaction DisputeClosed: Dispute raised for the transaction is resolved.")
    system_reference_number: Optional[StrictStr] = Field(None, alias="systemReferenceNumber", description="Transaction reference number generated by card issuance platform.")
    __properties = ["chargeDate", "destinationAmount", "destinationCurrencyCode", "paymentMethods", "returnUrl", "sourceAmount", "sourceCurrencyCode", "status", "systemReferenceNumber"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WalletFundResponseDTO:
        """Create an instance of WalletFundResponseDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WalletFundResponseDTO:
        """Create an instance of WalletFundResponseDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WalletFundResponseDTO.parse_obj(obj)

        _obj = WalletFundResponseDTO.parse_obj({
            "charge_date": obj.get("chargeDate"),
            "destination_amount": obj.get("destinationAmount"),
            "destination_currency_code": obj.get("destinationCurrencyCode"),
            "payment_methods": obj.get("paymentMethods"),
            "return_url": obj.get("returnUrl"),
            "source_amount": obj.get("sourceAmount"),
            "source_currency_code": obj.get("sourceCurrencyCode"),
            "status": obj.get("status"),
            "system_reference_number": obj.get("systemReferenceNumber")
        })
        return _obj


