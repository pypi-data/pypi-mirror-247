# coding: utf-8

"""
    NIUM Platform

    NIUM Platform

    Contact: experience@nium.com
    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictStr

from typing import List, Optional

from nium.models.supported_corridors_response_dto2 import SupportedCorridorsResponseDTO2

# from nium.api_client import ApiClient
import nium.api_client
from nium.api_response import ApiResponse
from nium.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class PayoutControllerApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = nium.api_client.ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def fetch_supported_corridors_v3(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], beneficiary_account_type : Annotated[Optional[StrictStr], Field(description="This field accepts the beneficiary account type.")] = None, customer_type : Annotated[Optional[StrictStr], Field(description="This field accepts the type of customer.")] = None, destination_country : Annotated[Optional[StrictStr], Field(description="This field accepts the 2-letter [2-letter ISO-2 country code](https://docs.nium.com/apis/docs/currency-and-country-codes) destination country code. destinationCurrency or destinationCountry is required.")] = None, destination_currency : Annotated[Optional[StrictStr], Field(description="This field accepts the 3-letter [ISO-4217 currency code](https://docs.nium.com/apis/docs/currency-and-country-codes) currency code which will be used to filter the user selected currency and get the payout method. destinationCurrency or destinationCountry is required.")] = None, payout_method : Annotated[Optional[StrictStr], Field(description="This field accepts the different modes of payout.")] = None, routing_code_type : Annotated[Optional[StrictStr], Field(description="This field determines the routing code type for the currency.  The possible values are:  • SWIFT for all cases where SWIFT is applicable  • IFSC (relevant for India)  • ACH CODE (relevant for USA)  • BSB CODE (relevant for Australia)  • SORT CODE (relevant for the UK)  • LOCATION ID (relevant for Nepal)  • BANK CODE (relevant for few countries including Canada, Hong Kong, Sri Lanka, South Korea, Pakistan, Brazil, and some more)  • TRANSIT NUMBER (relevant for Canada)  • BRANCH CODE (relevant for Sri Lanka, Vietnam, Brazil, Uruguay, Kenya and some more) ")] = None, x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> List[SupportedCorridorsResponseDTO2]:  # noqa: E501
        """Fetch Supported Corridors V3  # noqa: E501

        This API will allow you to fetch the supported corridors for remittance with details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.fetch_supported_corridors_v3(client_hash_id, beneficiary_account_type, customer_type, destination_country, destination_currency, payout_method, routing_code_type, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param beneficiary_account_type: This field accepts the beneficiary account type.
        :type beneficiary_account_type: str
        :param customer_type: This field accepts the type of customer.
        :type customer_type: str
        :param destination_country: This field accepts the 2-letter [2-letter ISO-2 country code](https://docs.nium.com/apis/docs/currency-and-country-codes) destination country code. destinationCurrency or destinationCountry is required.
        :type destination_country: str
        :param destination_currency: This field accepts the 3-letter [ISO-4217 currency code](https://docs.nium.com/apis/docs/currency-and-country-codes) currency code which will be used to filter the user selected currency and get the payout method. destinationCurrency or destinationCountry is required.
        :type destination_currency: str
        :param payout_method: This field accepts the different modes of payout.
        :type payout_method: str
        :param routing_code_type: This field determines the routing code type for the currency.  The possible values are:  • SWIFT for all cases where SWIFT is applicable  • IFSC (relevant for India)  • ACH CODE (relevant for USA)  • BSB CODE (relevant for Australia)  • SORT CODE (relevant for the UK)  • LOCATION ID (relevant for Nepal)  • BANK CODE (relevant for few countries including Canada, Hong Kong, Sri Lanka, South Korea, Pakistan, Brazil, and some more)  • TRANSIT NUMBER (relevant for Canada)  • BRANCH CODE (relevant for Sri Lanka, Vietnam, Brazil, Uruguay, Kenya and some more) 
        :type routing_code_type: str
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[SupportedCorridorsResponseDTO2]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the fetch_supported_corridors_v3_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.fetch_supported_corridors_v3_with_http_info(client_hash_id, beneficiary_account_type, customer_type, destination_country, destination_currency, payout_method, routing_code_type, x_request_id, **kwargs)  # noqa: E501

    @validate_arguments
    def fetch_supported_corridors_v3_with_http_info(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], beneficiary_account_type : Annotated[Optional[StrictStr], Field(description="This field accepts the beneficiary account type.")] = None, customer_type : Annotated[Optional[StrictStr], Field(description="This field accepts the type of customer.")] = None, destination_country : Annotated[Optional[StrictStr], Field(description="This field accepts the 2-letter [2-letter ISO-2 country code](https://docs.nium.com/apis/docs/currency-and-country-codes) destination country code. destinationCurrency or destinationCountry is required.")] = None, destination_currency : Annotated[Optional[StrictStr], Field(description="This field accepts the 3-letter [ISO-4217 currency code](https://docs.nium.com/apis/docs/currency-and-country-codes) currency code which will be used to filter the user selected currency and get the payout method. destinationCurrency or destinationCountry is required.")] = None, payout_method : Annotated[Optional[StrictStr], Field(description="This field accepts the different modes of payout.")] = None, routing_code_type : Annotated[Optional[StrictStr], Field(description="This field determines the routing code type for the currency.  The possible values are:  • SWIFT for all cases where SWIFT is applicable  • IFSC (relevant for India)  • ACH CODE (relevant for USA)  • BSB CODE (relevant for Australia)  • SORT CODE (relevant for the UK)  • LOCATION ID (relevant for Nepal)  • BANK CODE (relevant for few countries including Canada, Hong Kong, Sri Lanka, South Korea, Pakistan, Brazil, and some more)  • TRANSIT NUMBER (relevant for Canada)  • BRANCH CODE (relevant for Sri Lanka, Vietnam, Brazil, Uruguay, Kenya and some more) ")] = None, x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Fetch Supported Corridors V3  # noqa: E501

        This API will allow you to fetch the supported corridors for remittance with details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.fetch_supported_corridors_v3_with_http_info(client_hash_id, beneficiary_account_type, customer_type, destination_country, destination_currency, payout_method, routing_code_type, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param beneficiary_account_type: This field accepts the beneficiary account type.
        :type beneficiary_account_type: str
        :param customer_type: This field accepts the type of customer.
        :type customer_type: str
        :param destination_country: This field accepts the 2-letter [2-letter ISO-2 country code](https://docs.nium.com/apis/docs/currency-and-country-codes) destination country code. destinationCurrency or destinationCountry is required.
        :type destination_country: str
        :param destination_currency: This field accepts the 3-letter [ISO-4217 currency code](https://docs.nium.com/apis/docs/currency-and-country-codes) currency code which will be used to filter the user selected currency and get the payout method. destinationCurrency or destinationCountry is required.
        :type destination_currency: str
        :param payout_method: This field accepts the different modes of payout.
        :type payout_method: str
        :param routing_code_type: This field determines the routing code type for the currency.  The possible values are:  • SWIFT for all cases where SWIFT is applicable  • IFSC (relevant for India)  • ACH CODE (relevant for USA)  • BSB CODE (relevant for Australia)  • SORT CODE (relevant for the UK)  • LOCATION ID (relevant for Nepal)  • BANK CODE (relevant for few countries including Canada, Hong Kong, Sri Lanka, South Korea, Pakistan, Brazil, and some more)  • TRANSIT NUMBER (relevant for Canada)  • BRANCH CODE (relevant for Sri Lanka, Vietnam, Brazil, Uruguay, Kenya and some more) 
        :type routing_code_type: str
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[SupportedCorridorsResponseDTO2], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'client_hash_id',
            'beneficiary_account_type',
            'customer_type',
            'destination_country',
            'destination_currency',
            'payout_method',
            'routing_code_type',
            'x_request_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_supported_corridors_v3" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['client_hash_id']:
            _path_params['clientHashId'] = _params['client_hash_id']


        # process the query parameters
        _query_params = []
        if _params.get('beneficiary_account_type') is not None:  # noqa: E501
            _query_params.append(('beneficiaryAccountType', _params['beneficiary_account_type']))

        if _params.get('customer_type') is not None:  # noqa: E501
            _query_params.append(('customerType', _params['customer_type']))

        if _params.get('destination_country') is not None:  # noqa: E501
            _query_params.append(('destinationCountry', _params['destination_country']))

        if _params.get('destination_currency') is not None:  # noqa: E501
            _query_params.append(('destinationCurrency', _params['destination_currency']))

        if _params.get('payout_method') is not None:  # noqa: E501
            _query_params.append(('payoutMethod', _params['payout_method']))

        if _params.get('routing_code_type') is not None:  # noqa: E501
            _query_params.append(('routingCodeType', _params['routing_code_type']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_request_id']:
            _header_params['x-request-id'] = _params['x_request_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {
            '200': "List[SupportedCorridorsResponseDTO2]",
            '400': "CustomerApiError",
            '401': "str",
            '403': "str",
            '404': "CustomerApiError",
            '500': "CustomerApiError",
        }

        return self.api_client.call_api(
            '/api/v3/client/{clientHashId}/supportedCorridors', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
