# coding: utf-8

"""
    NIUM Platform

    NIUM Platform

    Contact: experience@nium.com
    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictFloat, StrictInt, StrictStr, constr

from typing import Optional, Union

from nium.models.exchange_rate_v2_response_dto import ExchangeRateV2ResponseDto
from nium.models.fx_hold_lock_response_content import FxHoldLockResponseContent

# from nium.api_client import ApiClient
import nium.api_client
from nium.api_response import ApiResponse
from nium.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class QuotesPreviousVersionApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = nium.api_client.ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def exchange_rate_lockand_hold(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], destination_currency : Annotated[StrictStr, Field(..., description="This field contains the [3-letter ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the destination amount.")], source_currency : Annotated[StrictStr, Field(..., description="This field contains the [3-letter ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the source amount.")], wallet_hash_id : Annotated[StrictStr, Field(..., description="Unique wallet identifier generated simultaneously with customer creation.")], additional_fx_markup : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="This field contains the additional Fx Markup.")] = None, x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> FxHoldLockResponseContent:  # noqa: E501
        """Exchange Rate Lock and Hold  # noqa: E501

        This API allows you to fetch exchange rate, and lock and hold the rates till a certain amount of time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.exchange_rate_lockand_hold(client_hash_id, customer_hash_id, destination_currency, source_currency, wallet_hash_id, additional_fx_markup, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param destination_currency: This field contains the [3-letter ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the destination amount. (required)
        :type destination_currency: str
        :param source_currency: This field contains the [3-letter ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the source amount. (required)
        :type source_currency: str
        :param wallet_hash_id: Unique wallet identifier generated simultaneously with customer creation. (required)
        :type wallet_hash_id: str
        :param additional_fx_markup: This field contains the additional Fx Markup.
        :type additional_fx_markup: float
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: FxHoldLockResponseContent
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the exchange_rate_lockand_hold_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.exchange_rate_lockand_hold_with_http_info(client_hash_id, customer_hash_id, destination_currency, source_currency, wallet_hash_id, additional_fx_markup, x_request_id, **kwargs)  # noqa: E501

    @validate_arguments
    def exchange_rate_lockand_hold_with_http_info(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], destination_currency : Annotated[StrictStr, Field(..., description="This field contains the [3-letter ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the destination amount.")], source_currency : Annotated[StrictStr, Field(..., description="This field contains the [3-letter ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the source amount.")], wallet_hash_id : Annotated[StrictStr, Field(..., description="Unique wallet identifier generated simultaneously with customer creation.")], additional_fx_markup : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="This field contains the additional Fx Markup.")] = None, x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Exchange Rate Lock and Hold  # noqa: E501

        This API allows you to fetch exchange rate, and lock and hold the rates till a certain amount of time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.exchange_rate_lockand_hold_with_http_info(client_hash_id, customer_hash_id, destination_currency, source_currency, wallet_hash_id, additional_fx_markup, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param destination_currency: This field contains the [3-letter ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the destination amount. (required)
        :type destination_currency: str
        :param source_currency: This field contains the [3-letter ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the source amount. (required)
        :type source_currency: str
        :param wallet_hash_id: Unique wallet identifier generated simultaneously with customer creation. (required)
        :type wallet_hash_id: str
        :param additional_fx_markup: This field contains the additional Fx Markup.
        :type additional_fx_markup: float
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(FxHoldLockResponseContent, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'client_hash_id',
            'customer_hash_id',
            'destination_currency',
            'source_currency',
            'wallet_hash_id',
            'additional_fx_markup',
            'x_request_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exchange_rate_lockand_hold" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['client_hash_id']:
            _path_params['clientHashId'] = _params['client_hash_id']

        if _params['customer_hash_id']:
            _path_params['customerHashId'] = _params['customer_hash_id']

        if _params['wallet_hash_id']:
            _path_params['walletHashId'] = _params['wallet_hash_id']


        # process the query parameters
        _query_params = []
        if _params.get('additional_fx_markup') is not None:  # noqa: E501
            _query_params.append(('additionalFxMarkup', _params['additional_fx_markup']))

        if _params.get('destination_currency') is not None:  # noqa: E501
            _query_params.append(('destinationCurrency', _params['destination_currency']))

        if _params.get('source_currency') is not None:  # noqa: E501
            _query_params.append(('sourceCurrency', _params['source_currency']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_request_id']:
            _header_params['x-request-id'] = _params['x_request_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {
            '200': "FxHoldLockResponseContent",
            '400': "WalletApiError",
            '401': "str",
            '403': "str",
            '404': "WalletApiError",
            '500': "WalletApiError",
        }

        return self.api_client.call_api(
            '/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/lockExchangeRate', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def exchange_rate_with_markup(self, client_hash_id : Annotated[constr(strict=True, max_length=36, min_length=36), Field(..., description="Unique customer identifier generated on customer creation.")], source_currency_code : Annotated[constr(strict=True, max_length=3, min_length=3), Field(..., description="This field contains the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the source amount.")], destination_currency_code : Annotated[constr(strict=True, max_length=3, min_length=3), Field(..., description="This field contains the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the destination amount.")], source_amount : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="An amount to be converted. This field takes precedence over destinationAmount, in case both are provided.")] = None, destination_amount : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="An amount to which the source is converted. It can be used to find the necessary source amount value. If both sourceAmount and destinationAmount are provided, this field is ignored.")] = None, x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> ExchangeRateV2ResponseDto:  # noqa: E501
        """Exchange Rate With Markup  # noqa: E501

        This API fetches the exchange rate between source currency and destination currency. If either source or destination amount is provided, the equivalent amount will also be returned. Please note that you may not send both sourceAmount and destinationAmount as query parameters together. If both are provided, sourceAmount shall be taken for conversion.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.exchange_rate_with_markup(client_hash_id, source_currency_code, destination_currency_code, source_amount, destination_amount, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique customer identifier generated on customer creation. (required)
        :type client_hash_id: str
        :param source_currency_code: This field contains the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the source amount. (required)
        :type source_currency_code: str
        :param destination_currency_code: This field contains the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the destination amount. (required)
        :type destination_currency_code: str
        :param source_amount: An amount to be converted. This field takes precedence over destinationAmount, in case both are provided.
        :type source_amount: float
        :param destination_amount: An amount to which the source is converted. It can be used to find the necessary source amount value. If both sourceAmount and destinationAmount are provided, this field is ignored.
        :type destination_amount: float
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ExchangeRateV2ResponseDto
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the exchange_rate_with_markup_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.exchange_rate_with_markup_with_http_info(client_hash_id, source_currency_code, destination_currency_code, source_amount, destination_amount, x_request_id, **kwargs)  # noqa: E501

    @validate_arguments
    def exchange_rate_with_markup_with_http_info(self, client_hash_id : Annotated[constr(strict=True, max_length=36, min_length=36), Field(..., description="Unique customer identifier generated on customer creation.")], source_currency_code : Annotated[constr(strict=True, max_length=3, min_length=3), Field(..., description="This field contains the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the source amount.")], destination_currency_code : Annotated[constr(strict=True, max_length=3, min_length=3), Field(..., description="This field contains the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the destination amount.")], source_amount : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="An amount to be converted. This field takes precedence over destinationAmount, in case both are provided.")] = None, destination_amount : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="An amount to which the source is converted. It can be used to find the necessary source amount value. If both sourceAmount and destinationAmount are provided, this field is ignored.")] = None, x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Exchange Rate With Markup  # noqa: E501

        This API fetches the exchange rate between source currency and destination currency. If either source or destination amount is provided, the equivalent amount will also be returned. Please note that you may not send both sourceAmount and destinationAmount as query parameters together. If both are provided, sourceAmount shall be taken for conversion.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.exchange_rate_with_markup_with_http_info(client_hash_id, source_currency_code, destination_currency_code, source_amount, destination_amount, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique customer identifier generated on customer creation. (required)
        :type client_hash_id: str
        :param source_currency_code: This field contains the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the source amount. (required)
        :type source_currency_code: str
        :param destination_currency_code: This field contains the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the destination amount. (required)
        :type destination_currency_code: str
        :param source_amount: An amount to be converted. This field takes precedence over destinationAmount, in case both are provided.
        :type source_amount: float
        :param destination_amount: An amount to which the source is converted. It can be used to find the necessary source amount value. If both sourceAmount and destinationAmount are provided, this field is ignored.
        :type destination_amount: float
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ExchangeRateV2ResponseDto, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'client_hash_id',
            'source_currency_code',
            'destination_currency_code',
            'source_amount',
            'destination_amount',
            'x_request_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exchange_rate_with_markup" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['client_hash_id']:
            _path_params['clientHashId'] = _params['client_hash_id']


        # process the query parameters
        _query_params = []
        if _params.get('source_currency_code') is not None:  # noqa: E501
            _query_params.append(('sourceCurrencyCode', _params['source_currency_code']))

        if _params.get('destination_currency_code') is not None:  # noqa: E501
            _query_params.append(('destinationCurrencyCode', _params['destination_currency_code']))

        if _params.get('source_amount') is not None:  # noqa: E501
            _query_params.append(('sourceAmount', _params['source_amount']))

        if _params.get('destination_amount') is not None:  # noqa: E501
            _query_params.append(('destinationAmount', _params['destination_amount']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_request_id']:
            _header_params['x-request-id'] = _params['x_request_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {
            '200': "ExchangeRateV2ResponseDto",
            '401': None,
            '403': None,
            '404': None,
        }

        return self.api_client.call_api(
            '/api/v1/client/{clientHashId}/exchangeRate', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
