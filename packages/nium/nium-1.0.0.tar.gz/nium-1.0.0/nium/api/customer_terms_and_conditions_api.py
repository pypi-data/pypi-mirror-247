# coding: utf-8

"""
    NIUM Platform

    NIUM Platform

    Contact: experience@nium.com
    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictStr

from typing import Optional

from nium.models.terms_and_conditions_accept_response_dto import TermsAndConditionsAcceptResponseDTO
from nium.models.terms_and_conditions_request_dto import TermsAndConditionsRequestDTO
from nium.models.terms_and_conditions_response_dto import TermsAndConditionsResponseDTO

# from nium.api_client import ApiClient
import nium.api_client
from nium.api_response import ApiResponse
from nium.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class CustomerTermsAndConditionsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = nium.api_client.ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def accept_termsand_conditions(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], terms_and_conditions_request_dto : Annotated[TermsAndConditionsRequestDTO, Field(..., description="termsAndConditionsRequestDTO")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> TermsAndConditionsAcceptResponseDTO:  # noqa: E501
        """Accept Terms and Conditions  # noqa: E501

        This API updates the Terms and Conditions acceptance status for a customer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.accept_termsand_conditions(client_hash_id, customer_hash_id, terms_and_conditions_request_dto, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param terms_and_conditions_request_dto: termsAndConditionsRequestDTO (required)
        :type terms_and_conditions_request_dto: TermsAndConditionsRequestDTO
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TermsAndConditionsAcceptResponseDTO
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the accept_termsand_conditions_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.accept_termsand_conditions_with_http_info(client_hash_id, customer_hash_id, terms_and_conditions_request_dto, x_request_id, **kwargs)  # noqa: E501

    @validate_arguments
    def accept_termsand_conditions_with_http_info(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], terms_and_conditions_request_dto : Annotated[TermsAndConditionsRequestDTO, Field(..., description="termsAndConditionsRequestDTO")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Accept Terms and Conditions  # noqa: E501

        This API updates the Terms and Conditions acceptance status for a customer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.accept_termsand_conditions_with_http_info(client_hash_id, customer_hash_id, terms_and_conditions_request_dto, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param terms_and_conditions_request_dto: termsAndConditionsRequestDTO (required)
        :type terms_and_conditions_request_dto: TermsAndConditionsRequestDTO
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TermsAndConditionsAcceptResponseDTO, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'client_hash_id',
            'customer_hash_id',
            'terms_and_conditions_request_dto',
            'x_request_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accept_termsand_conditions" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['client_hash_id']:
            _path_params['clientHashId'] = _params['client_hash_id']

        if _params['customer_hash_id']:
            _path_params['customerHashId'] = _params['customer_hash_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_request_id']:
            _header_params['x-request-id'] = _params['x_request_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['terms_and_conditions_request_dto'] is not None:
            _body_params = _params['terms_and_conditions_request_dto']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {
            '200': "TermsAndConditionsAcceptResponseDTO",
            '400': "CustomerApiError",
            '401': "str",
            '403': "str",
            '404': "CustomerApiError",
            '500': "CustomerApiError",
        }

        return self.api_client.call_api(
            '/api/v1/client/{clientHashId}/customer/{customerHashId}/termsAndConditions', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def termsand_conditions(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> TermsAndConditionsResponseDTO:  # noqa: E501
        """Terms and Conditions  # noqa: E501

        This API allows you to fetch the Terms and Conditions which are mandatory to be accepted by customers as per the flow described below.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.termsand_conditions(client_hash_id, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TermsAndConditionsResponseDTO
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the termsand_conditions_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.termsand_conditions_with_http_info(client_hash_id, x_request_id, **kwargs)  # noqa: E501

    @validate_arguments
    def termsand_conditions_with_http_info(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Terms and Conditions  # noqa: E501

        This API allows you to fetch the Terms and Conditions which are mandatory to be accepted by customers as per the flow described below.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.termsand_conditions_with_http_info(client_hash_id, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TermsAndConditionsResponseDTO, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'client_hash_id',
            'x_request_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method termsand_conditions" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['client_hash_id']:
            _path_params['clientHashId'] = _params['client_hash_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_request_id']:
            _header_params['x-request-id'] = _params['x_request_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {
            '200': "TermsAndConditionsResponseDTO",
            '400': "CustomerApiError",
            '401': "str",
            '403': "str",
            '404': "CustomerApiError",
            '500': "CustomerApiError",
        }

        return self.api_client.call_api(
            '/api/v1/client/{clientHashId}/termsAndConditions', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
