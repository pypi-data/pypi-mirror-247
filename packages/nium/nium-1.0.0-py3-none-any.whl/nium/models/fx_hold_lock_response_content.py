# coding: utf-8

"""
    NIUM Platform

    NIUM Platform

    Contact: experience@nium.com
    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class FxHoldLockResponseContent(BaseModel):
    """
    FxHoldLockResponseContent
    """
    additional_fx_markup: Optional[StrictStr] = Field(None, alias="additionalFxMarkup", description="This field contains the Additional Fx Markup of the given auditId")
    audit_id: Optional[StrictInt] = Field(None, description="This field contains the audit ID which is generated by NIUM as a unique number for internal purpose.")
    destination_currency: Optional[StrictStr] = Field(None, description="This field contains the 3-letter [ISO-4217 destination currency code](https://www.iso.org/iso-4217-currency-codes.html) for the destination amount.")
    ecb_fx_rate: Optional[StrictStr] = Field(None, description="This field contains the ECB exchange rate.")
    fx_hold_id: Optional[StrictStr] = Field(None, description="This field contains the foreign exchange hold ID.")
    fx_rate: Optional[StrictStr] = Field(None, description="This field contains the real time FX provider rate.")
    hold_expiry_at: Optional[StrictStr] = Field(None, description="This field contains the timestamp till which the exchange rate will be valid. In other words, the timestamp at which the exchange rate held by NIUM shall expire. Format of this field is yyyy-MM-ddTHH:mm:ss.SSSZ.")
    markup_rate: Optional[StrictStr] = Field(None, description="This field contains the markup rate charged by NIUM.")
    source_currency: Optional[StrictStr] = Field(None, description="This field contains the 3-letter [ISO-4217 source currency code](https://www.iso.org/iso-4217-currency-codes.html) for the source amount.")
    status: Optional[StrictStr] = Field(None, description="This field contains the status of the given auditId")
    __properties = ["additionalFxMarkup", "audit_id", "destination_currency", "ecb_fx_rate", "fx_hold_id", "fx_rate", "hold_expiry_at", "markup_rate", "source_currency", "status"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FxHoldLockResponseContent:
        """Create an instance of FxHoldLockResponseContent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FxHoldLockResponseContent:
        """Create an instance of FxHoldLockResponseContent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FxHoldLockResponseContent.parse_obj(obj)

        _obj = FxHoldLockResponseContent.parse_obj({
            "additional_fx_markup": obj.get("additionalFxMarkup"),
            "audit_id": obj.get("audit_id"),
            "destination_currency": obj.get("destination_currency"),
            "ecb_fx_rate": obj.get("ecb_fx_rate"),
            "fx_hold_id": obj.get("fx_hold_id"),
            "fx_rate": obj.get("fx_rate"),
            "hold_expiry_at": obj.get("hold_expiry_at"),
            "markup_rate": obj.get("markup_rate"),
            "source_currency": obj.get("source_currency"),
            "status": obj.get("status")
        })
        return _obj


