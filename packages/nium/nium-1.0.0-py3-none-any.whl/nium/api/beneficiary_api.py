# coding: utf-8

"""
    NIUM Platform

    NIUM Platform

    Contact: experience@nium.com
    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictStr, conlist

from typing import Dict, List, Optional

from nium.models.account_validation_request_dto import AccountValidationRequestDTO
from nium.models.account_validation_response_dto import AccountValidationResponseDTO
from nium.models.add_beneficiary_request import AddBeneficiaryRequest
from nium.models.add_beneficiary_request_dto import AddBeneficiaryRequestDTO
from nium.models.beneficiary_response_dto import BeneficiaryResponseDTO
from nium.models.beneficiary_validation_request_dto import BeneficiaryValidationRequestDTO
from nium.models.beneficiary_validation_response_dto import BeneficiaryValidationResponseDTO
from nium.models.resource import Resource
from nium.models.update_beneficiary_request_dto import UpdateBeneficiaryRequestDTO

# from nium.api_client import ApiClient
import nium.api_client
from nium.api_response import ApiResponse
from nium.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class BeneficiaryApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = nium.api_client.ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def account_verification(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], account_validation_request_dto : Annotated[AccountValidationRequestDTO, Field(..., description="accountValidationRequestDTO")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> AccountValidationResponseDTO:  # noqa: E501
        """Account verification (Confirmation of Payee)  # noqa: E501

        Account verification (Confirmation of Payee)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.account_verification(client_hash_id, customer_hash_id, account_validation_request_dto, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param account_validation_request_dto: accountValidationRequestDTO (required)
        :type account_validation_request_dto: AccountValidationRequestDTO
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AccountValidationResponseDTO
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the account_verification_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.account_verification_with_http_info(client_hash_id, customer_hash_id, account_validation_request_dto, x_request_id, **kwargs)  # noqa: E501

    @validate_arguments
    def account_verification_with_http_info(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], account_validation_request_dto : Annotated[AccountValidationRequestDTO, Field(..., description="accountValidationRequestDTO")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Account verification (Confirmation of Payee)  # noqa: E501

        Account verification (Confirmation of Payee)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.account_verification_with_http_info(client_hash_id, customer_hash_id, account_validation_request_dto, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param account_validation_request_dto: accountValidationRequestDTO (required)
        :type account_validation_request_dto: AccountValidationRequestDTO
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AccountValidationResponseDTO, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'client_hash_id',
            'customer_hash_id',
            'account_validation_request_dto',
            'x_request_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_verification" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['client_hash_id']:
            _path_params['clientHashId'] = _params['client_hash_id']

        if _params['customer_hash_id']:
            _path_params['customerHashId'] = _params['customer_hash_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_request_id']:
            _header_params['x-request-id'] = _params['x_request_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['account_validation_request_dto'] is not None:
            _body_params = _params['account_validation_request_dto']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {
            '200': "AccountValidationResponseDTO",
            '400': "WalletApiError",
            '401': "str",
            '403': "str",
            '404': "WalletApiError",
            '500': "WalletApiError",
        }

        return self.api_client.call_api(
            '/api/v1/client/{clientHashId}/customer/{customerHashId}/accountVerification', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def add_beneficiary(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], add_beneficiary_request : Annotated[AddBeneficiaryRequest, Field(..., description="addBeneficiaryRequest")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> Resource:  # noqa: E501
        """Add Beneficiary  # noqa: E501

        This API allows you to add a beneficiary to transfer funds.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_beneficiary(client_hash_id, customer_hash_id, add_beneficiary_request, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param add_beneficiary_request: addBeneficiaryRequest (required)
        :type add_beneficiary_request: AddBeneficiaryRequest
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Resource
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the add_beneficiary_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.add_beneficiary_with_http_info(client_hash_id, customer_hash_id, add_beneficiary_request, x_request_id, **kwargs)  # noqa: E501

    @validate_arguments
    def add_beneficiary_with_http_info(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], add_beneficiary_request : Annotated[AddBeneficiaryRequest, Field(..., description="addBeneficiaryRequest")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Add Beneficiary  # noqa: E501

        This API allows you to add a beneficiary to transfer funds.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_beneficiary_with_http_info(client_hash_id, customer_hash_id, add_beneficiary_request, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param add_beneficiary_request: addBeneficiaryRequest (required)
        :type add_beneficiary_request: AddBeneficiaryRequest
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Resource, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'client_hash_id',
            'customer_hash_id',
            'add_beneficiary_request',
            'x_request_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_beneficiary" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['client_hash_id']:
            _path_params['clientHashId'] = _params['client_hash_id']

        if _params['customer_hash_id']:
            _path_params['customerHashId'] = _params['customer_hash_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_request_id']:
            _header_params['x-request-id'] = _params['x_request_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['add_beneficiary_request'] is not None:
            _body_params = _params['add_beneficiary_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {
            '200': "Resource",
            '400': "CustomerApiError",
            '401': "str",
            '403': "str",
            '404': "CustomerApiError",
            '500': "CustomerApiError",
        }

        return self.api_client.call_api(
            '/api/v1/client/{clientHashId}/customer/{customerHashId}/beneficiaries', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def add_beneficiary_v2(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], add_beneficiary_request_dto : Annotated[AddBeneficiaryRequestDTO, Field(..., description="addBeneficiaryRequestDTO")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> BeneficiaryResponseDTO:  # noqa: E501
        """Add Beneficiary V2  # noqa: E501

        This API allows you to add a beneficiary to transfer funds.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_beneficiary_v2(client_hash_id, customer_hash_id, add_beneficiary_request_dto, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param add_beneficiary_request_dto: addBeneficiaryRequestDTO (required)
        :type add_beneficiary_request_dto: AddBeneficiaryRequestDTO
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: BeneficiaryResponseDTO
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the add_beneficiary_v2_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.add_beneficiary_v2_with_http_info(client_hash_id, customer_hash_id, add_beneficiary_request_dto, x_request_id, **kwargs)  # noqa: E501

    @validate_arguments
    def add_beneficiary_v2_with_http_info(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], add_beneficiary_request_dto : Annotated[AddBeneficiaryRequestDTO, Field(..., description="addBeneficiaryRequestDTO")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Add Beneficiary V2  # noqa: E501

        This API allows you to add a beneficiary to transfer funds.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_beneficiary_v2_with_http_info(client_hash_id, customer_hash_id, add_beneficiary_request_dto, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param add_beneficiary_request_dto: addBeneficiaryRequestDTO (required)
        :type add_beneficiary_request_dto: AddBeneficiaryRequestDTO
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(BeneficiaryResponseDTO, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'client_hash_id',
            'customer_hash_id',
            'add_beneficiary_request_dto',
            'x_request_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_beneficiary_v2" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['client_hash_id']:
            _path_params['clientHashId'] = _params['client_hash_id']

        if _params['customer_hash_id']:
            _path_params['customerHashId'] = _params['customer_hash_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_request_id']:
            _header_params['x-request-id'] = _params['x_request_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['add_beneficiary_request_dto'] is not None:
            _body_params = _params['add_beneficiary_request_dto']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {
            '200': "BeneficiaryResponseDTO",
            '400': "CustomerApiError",
            '401': "str",
            '403': "str",
            '404': "CustomerApiError",
            '500': "CustomerApiError",
        }

        return self.api_client.call_api(
            '/api/v2/client/{clientHashId}/customer/{customerHashId}/beneficiaries', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def beneficiary_details(self, beneficiary_hash_id : Annotated[StrictStr, Field(..., description="Unique beneficiary hash ID.")], client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> Resource:  # noqa: E501
        """Beneficiary Details  # noqa: E501

        This API allows you to fetch beneficiary details of an individual beneficiary.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.beneficiary_details(beneficiary_hash_id, client_hash_id, customer_hash_id, x_request_id, async_req=True)
        >>> result = thread.get()

        :param beneficiary_hash_id: Unique beneficiary hash ID. (required)
        :type beneficiary_hash_id: str
        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Resource
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the beneficiary_details_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.beneficiary_details_with_http_info(beneficiary_hash_id, client_hash_id, customer_hash_id, x_request_id, **kwargs)  # noqa: E501

    @validate_arguments
    def beneficiary_details_with_http_info(self, beneficiary_hash_id : Annotated[StrictStr, Field(..., description="Unique beneficiary hash ID.")], client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Beneficiary Details  # noqa: E501

        This API allows you to fetch beneficiary details of an individual beneficiary.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.beneficiary_details_with_http_info(beneficiary_hash_id, client_hash_id, customer_hash_id, x_request_id, async_req=True)
        >>> result = thread.get()

        :param beneficiary_hash_id: Unique beneficiary hash ID. (required)
        :type beneficiary_hash_id: str
        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Resource, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'beneficiary_hash_id',
            'client_hash_id',
            'customer_hash_id',
            'x_request_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method beneficiary_details" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['beneficiary_hash_id']:
            _path_params['beneficiaryHashId'] = _params['beneficiary_hash_id']

        if _params['client_hash_id']:
            _path_params['clientHashId'] = _params['client_hash_id']

        if _params['customer_hash_id']:
            _path_params['customerHashId'] = _params['customer_hash_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_request_id']:
            _header_params['x-request-id'] = _params['x_request_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {
            '200': "Resource",
            '400': "CustomerApiError",
            '401': "str",
            '403': "str",
            '404': "CustomerApiError",
            '500': "CustomerApiError",
        }

        return self.api_client.call_api(
            '/api/v1/client/{clientHashId}/customer/{customerHashId}/beneficiaries/{beneficiaryHashId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def beneficiary_details_v2(self, beneficiary_hash_id : Annotated[StrictStr, Field(..., description="Unique beneficiary hash ID.")], client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> BeneficiaryResponseDTO:  # noqa: E501
        """Beneficiary Details V2  # noqa: E501

        This API allows you to fetch beneficiary details of an individual beneficiary.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.beneficiary_details_v2(beneficiary_hash_id, client_hash_id, customer_hash_id, x_request_id, async_req=True)
        >>> result = thread.get()

        :param beneficiary_hash_id: Unique beneficiary hash ID. (required)
        :type beneficiary_hash_id: str
        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: BeneficiaryResponseDTO
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the beneficiary_details_v2_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.beneficiary_details_v2_with_http_info(beneficiary_hash_id, client_hash_id, customer_hash_id, x_request_id, **kwargs)  # noqa: E501

    @validate_arguments
    def beneficiary_details_v2_with_http_info(self, beneficiary_hash_id : Annotated[StrictStr, Field(..., description="Unique beneficiary hash ID.")], client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Beneficiary Details V2  # noqa: E501

        This API allows you to fetch beneficiary details of an individual beneficiary.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.beneficiary_details_v2_with_http_info(beneficiary_hash_id, client_hash_id, customer_hash_id, x_request_id, async_req=True)
        >>> result = thread.get()

        :param beneficiary_hash_id: Unique beneficiary hash ID. (required)
        :type beneficiary_hash_id: str
        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(BeneficiaryResponseDTO, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'beneficiary_hash_id',
            'client_hash_id',
            'customer_hash_id',
            'x_request_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method beneficiary_details_v2" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['beneficiary_hash_id']:
            _path_params['beneficiaryHashId'] = _params['beneficiary_hash_id']

        if _params['client_hash_id']:
            _path_params['clientHashId'] = _params['client_hash_id']

        if _params['customer_hash_id']:
            _path_params['customerHashId'] = _params['customer_hash_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_request_id']:
            _header_params['x-request-id'] = _params['x_request_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {
            '200': "BeneficiaryResponseDTO",
            '400': "CustomerApiError",
            '401': "str",
            '403': "str",
            '404': "CustomerApiError",
            '500': "CustomerApiError",
        }

        return self.api_client.call_api(
            '/api/v2/client/{clientHashId}/customer/{customerHashId}/beneficiaries/{beneficiaryHashId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def beneficiary_list(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], parameters : Annotated[Optional[conlist(Dict[str, StrictStr])], Field(description="parameters")] = None, x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> Resource:  # noqa: E501
        """Beneficiary List  # noqa: E501

        This API allows you to fetch beneficiary details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.beneficiary_list(client_hash_id, customer_hash_id, parameters, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param parameters: parameters
        :type parameters: List[Dict[str, str]]
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Resource
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the beneficiary_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.beneficiary_list_with_http_info(client_hash_id, customer_hash_id, parameters, x_request_id, **kwargs)  # noqa: E501

    @validate_arguments
    def beneficiary_list_with_http_info(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], parameters : Annotated[Optional[conlist(Dict[str, StrictStr])], Field(description="parameters")] = None, x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Beneficiary List  # noqa: E501

        This API allows you to fetch beneficiary details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.beneficiary_list_with_http_info(client_hash_id, customer_hash_id, parameters, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param parameters: parameters
        :type parameters: List[Dict[str, str]]
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Resource, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'client_hash_id',
            'customer_hash_id',
            'parameters',
            'x_request_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method beneficiary_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['client_hash_id']:
            _path_params['clientHashId'] = _params['client_hash_id']

        if _params['customer_hash_id']:
            _path_params['customerHashId'] = _params['customer_hash_id']


        # process the query parameters
        _query_params = []
        if _params.get('parameters') is not None:  # noqa: E501
            _query_params.append(('parameters', _params['parameters']))
            _collection_formats['parameters'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_request_id']:
            _header_params['x-request-id'] = _params['x_request_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {
            '200': "Resource",
            '400': "CustomerApiError",
            '401': "str",
            '403': "str",
            '404': "CustomerApiError",
            '500': "CustomerApiError",
        }

        return self.api_client.call_api(
            '/api/v1/client/{clientHashId}/customer/{customerHashId}/beneficiaries', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def beneficiary_list_v2(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], parameters : Annotated[Optional[conlist(Dict[str, StrictStr])], Field(description="parameters")] = None, x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> List[BeneficiaryResponseDTO]:  # noqa: E501
        """Beneficiary List V2  # noqa: E501

        This API allows you to fetch beneficiary details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.beneficiary_list_v2(client_hash_id, customer_hash_id, parameters, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param parameters: parameters
        :type parameters: List[Dict[str, str]]
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[BeneficiaryResponseDTO]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the beneficiary_list_v2_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.beneficiary_list_v2_with_http_info(client_hash_id, customer_hash_id, parameters, x_request_id, **kwargs)  # noqa: E501

    @validate_arguments
    def beneficiary_list_v2_with_http_info(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], parameters : Annotated[Optional[conlist(Dict[str, StrictStr])], Field(description="parameters")] = None, x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Beneficiary List V2  # noqa: E501

        This API allows you to fetch beneficiary details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.beneficiary_list_v2_with_http_info(client_hash_id, customer_hash_id, parameters, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param parameters: parameters
        :type parameters: List[Dict[str, str]]
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[BeneficiaryResponseDTO], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'client_hash_id',
            'customer_hash_id',
            'parameters',
            'x_request_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method beneficiary_list_v2" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['client_hash_id']:
            _path_params['clientHashId'] = _params['client_hash_id']

        if _params['customer_hash_id']:
            _path_params['customerHashId'] = _params['customer_hash_id']


        # process the query parameters
        _query_params = []
        if _params.get('parameters') is not None:  # noqa: E501
            _query_params.append(('parameters', _params['parameters']))
            _collection_formats['parameters'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_request_id']:
            _header_params['x-request-id'] = _params['x_request_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {
            '200': "List[BeneficiaryResponseDTO]",
            '400': "CustomerApiError",
            '401': "str",
            '403': "str",
            '404': "CustomerApiError",
            '500': "CustomerApiError",
        }

        return self.api_client.call_api(
            '/api/v2/client/{clientHashId}/customer/{customerHashId}/beneficiaries', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def beneficiary_validation_schema(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], currency_code : Annotated[StrictStr, Field(..., description="This field accepts the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html).")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], payout_method : Annotated[Optional[StrictStr], Field(description="This field can accept the different modes of payout.This field can accept one of the following values: 1.LOCAL 2.SWIFT 3.WALLET Default value of the parameter is LOCAL.")] = None, x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> Resource:  # noqa: E501
        """Beneficiary Validation Schema  # noqa: E501

        This API will allow you to fetch the validation schema for beneficiary validation details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.beneficiary_validation_schema(client_hash_id, currency_code, customer_hash_id, payout_method, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param currency_code: This field accepts the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html). (required)
        :type currency_code: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param payout_method: This field can accept the different modes of payout.This field can accept one of the following values: 1.LOCAL 2.SWIFT 3.WALLET Default value of the parameter is LOCAL.
        :type payout_method: str
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Resource
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the beneficiary_validation_schema_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.beneficiary_validation_schema_with_http_info(client_hash_id, currency_code, customer_hash_id, payout_method, x_request_id, **kwargs)  # noqa: E501

    @validate_arguments
    def beneficiary_validation_schema_with_http_info(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], currency_code : Annotated[StrictStr, Field(..., description="This field accepts the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html).")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], payout_method : Annotated[Optional[StrictStr], Field(description="This field can accept the different modes of payout.This field can accept one of the following values: 1.LOCAL 2.SWIFT 3.WALLET Default value of the parameter is LOCAL.")] = None, x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Beneficiary Validation Schema  # noqa: E501

        This API will allow you to fetch the validation schema for beneficiary validation details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.beneficiary_validation_schema_with_http_info(client_hash_id, currency_code, customer_hash_id, payout_method, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param currency_code: This field accepts the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html). (required)
        :type currency_code: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param payout_method: This field can accept the different modes of payout.This field can accept one of the following values: 1.LOCAL 2.SWIFT 3.WALLET Default value of the parameter is LOCAL.
        :type payout_method: str
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Resource, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'client_hash_id',
            'currency_code',
            'customer_hash_id',
            'payout_method',
            'x_request_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method beneficiary_validation_schema" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['client_hash_id']:
            _path_params['clientHashId'] = _params['client_hash_id']

        if _params['currency_code']:
            _path_params['currencyCode'] = _params['currency_code']

        if _params['customer_hash_id']:
            _path_params['customerHashId'] = _params['customer_hash_id']


        # process the query parameters
        _query_params = []
        if _params.get('payout_method') is not None:  # noqa: E501
            _query_params.append(('payoutMethod', _params['payout_method']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_request_id']:
            _header_params['x-request-id'] = _params['x_request_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {
            '200': "Resource",
            '400': "CustomerApiError",
            '401': "str",
            '403': "str",
            '404': "CustomerApiError",
            '500': "CustomerApiError",
        }

        return self.api_client.call_api(
            '/api/v1/client/{clientHashId}/customer/{customerHashId}/currency/{currencyCode}/validationSchemas', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def beneficiary_validation_schema_v2(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], currency_code : Annotated[StrictStr, Field(..., description="This field accepts the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html).")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], payout_method : Annotated[Optional[StrictStr], Field(description="This field can accept the different modes of payout. This field can accept one of the following values: LOCAL SWIFT WALLET CARD PROXY Default value of the parameter is LOCAL.")] = None, x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> str:  # noqa: E501
        """Beneficiary Validation Schema V2  # noqa: E501

        This API will allow you to fetch the validation schema for beneficiary validation details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.beneficiary_validation_schema_v2(client_hash_id, currency_code, customer_hash_id, payout_method, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param currency_code: This field accepts the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html). (required)
        :type currency_code: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param payout_method: This field can accept the different modes of payout. This field can accept one of the following values: LOCAL SWIFT WALLET CARD PROXY Default value of the parameter is LOCAL.
        :type payout_method: str
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the beneficiary_validation_schema_v2_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.beneficiary_validation_schema_v2_with_http_info(client_hash_id, currency_code, customer_hash_id, payout_method, x_request_id, **kwargs)  # noqa: E501

    @validate_arguments
    def beneficiary_validation_schema_v2_with_http_info(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], currency_code : Annotated[StrictStr, Field(..., description="This field accepts the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html).")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], payout_method : Annotated[Optional[StrictStr], Field(description="This field can accept the different modes of payout. This field can accept one of the following values: LOCAL SWIFT WALLET CARD PROXY Default value of the parameter is LOCAL.")] = None, x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Beneficiary Validation Schema V2  # noqa: E501

        This API will allow you to fetch the validation schema for beneficiary validation details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.beneficiary_validation_schema_v2_with_http_info(client_hash_id, currency_code, customer_hash_id, payout_method, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param currency_code: This field accepts the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html). (required)
        :type currency_code: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param payout_method: This field can accept the different modes of payout. This field can accept one of the following values: LOCAL SWIFT WALLET CARD PROXY Default value of the parameter is LOCAL.
        :type payout_method: str
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'client_hash_id',
            'currency_code',
            'customer_hash_id',
            'payout_method',
            'x_request_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method beneficiary_validation_schema_v2" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['client_hash_id']:
            _path_params['clientHashId'] = _params['client_hash_id']

        if _params['currency_code']:
            _path_params['currencyCode'] = _params['currency_code']

        if _params['customer_hash_id']:
            _path_params['customerHashId'] = _params['customer_hash_id']


        # process the query parameters
        _query_params = []
        if _params.get('payout_method') is not None:  # noqa: E501
            _query_params.append(('payoutMethod', _params['payout_method']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_request_id']:
            _header_params['x-request-id'] = _params['x_request_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {
            '200': "str",
            '400': "CustomerApiError",
            '401': "str",
            '403': "str",
            '404': "CustomerApiError",
            '500': "CustomerApiError",
        }

        return self.api_client.call_api(
            '/api/v2/client/{clientHashId}/customer/{customerHashId}/currency/{currencyCode}/validationSchemas', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def confirmationof_payee(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], beneficiary_validation_request_dto : Annotated[BeneficiaryValidationRequestDTO, Field(..., description="beneficiaryValidationRequestDTO")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> BeneficiaryValidationResponseDTO:  # noqa: E501
        """Confirmation of Payee  # noqa: E501

        This API allows you to Validate Beneficiary Details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.confirmationof_payee(client_hash_id, customer_hash_id, beneficiary_validation_request_dto, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param beneficiary_validation_request_dto: beneficiaryValidationRequestDTO (required)
        :type beneficiary_validation_request_dto: BeneficiaryValidationRequestDTO
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: BeneficiaryValidationResponseDTO
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the confirmationof_payee_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.confirmationof_payee_with_http_info(client_hash_id, customer_hash_id, beneficiary_validation_request_dto, x_request_id, **kwargs)  # noqa: E501

    @validate_arguments
    def confirmationof_payee_with_http_info(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], beneficiary_validation_request_dto : Annotated[BeneficiaryValidationRequestDTO, Field(..., description="beneficiaryValidationRequestDTO")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Confirmation of Payee  # noqa: E501

        This API allows you to Validate Beneficiary Details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.confirmationof_payee_with_http_info(client_hash_id, customer_hash_id, beneficiary_validation_request_dto, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param beneficiary_validation_request_dto: beneficiaryValidationRequestDTO (required)
        :type beneficiary_validation_request_dto: BeneficiaryValidationRequestDTO
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(BeneficiaryValidationResponseDTO, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'client_hash_id',
            'customer_hash_id',
            'beneficiary_validation_request_dto',
            'x_request_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method confirmationof_payee" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['client_hash_id']:
            _path_params['clientHashId'] = _params['client_hash_id']

        if _params['customer_hash_id']:
            _path_params['customerHashId'] = _params['customer_hash_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_request_id']:
            _header_params['x-request-id'] = _params['x_request_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['beneficiary_validation_request_dto'] is not None:
            _body_params = _params['beneficiary_validation_request_dto']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {
            '200': "BeneficiaryValidationResponseDTO",
            '400': "CustomerApiError",
            '401': "str",
            '403': "str",
            '404': "CustomerApiError",
            '500': "CustomerApiError",
        }

        return self.api_client.call_api(
            '/api/v2/client/{clientHashId}/customer/{customerHashId}/beneficiaries/validate', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_beneficiary(self, beneficiary_hash_id : Annotated[StrictStr, Field(..., description="Unique beneficiary hash ID.")], client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> Resource:  # noqa: E501
        """Delete Beneficiary  # noqa: E501

        This API allows you to delete a funding instrument that has been registered previously.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_beneficiary(beneficiary_hash_id, client_hash_id, customer_hash_id, x_request_id, async_req=True)
        >>> result = thread.get()

        :param beneficiary_hash_id: Unique beneficiary hash ID. (required)
        :type beneficiary_hash_id: str
        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Resource
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delete_beneficiary_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_beneficiary_with_http_info(beneficiary_hash_id, client_hash_id, customer_hash_id, x_request_id, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_beneficiary_with_http_info(self, beneficiary_hash_id : Annotated[StrictStr, Field(..., description="Unique beneficiary hash ID.")], client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Beneficiary  # noqa: E501

        This API allows you to delete a funding instrument that has been registered previously.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_beneficiary_with_http_info(beneficiary_hash_id, client_hash_id, customer_hash_id, x_request_id, async_req=True)
        >>> result = thread.get()

        :param beneficiary_hash_id: Unique beneficiary hash ID. (required)
        :type beneficiary_hash_id: str
        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Resource, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'beneficiary_hash_id',
            'client_hash_id',
            'customer_hash_id',
            'x_request_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_beneficiary" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['beneficiary_hash_id']:
            _path_params['beneficiaryHashId'] = _params['beneficiary_hash_id']

        if _params['client_hash_id']:
            _path_params['clientHashId'] = _params['client_hash_id']

        if _params['customer_hash_id']:
            _path_params['customerHashId'] = _params['customer_hash_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_request_id']:
            _header_params['x-request-id'] = _params['x_request_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {
            '200': "Resource",
            '400': "CustomerApiError",
            '401': "str",
            '403': "str",
            '404': "CustomerApiError",
            '500': "CustomerApiError",
        }

        return self.api_client.call_api(
            '/api/v1/client/{clientHashId}/customer/{customerHashId}/beneficiaries/{beneficiaryHashId}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_beneficiary(self, beneficiary_hash_id : Annotated[StrictStr, Field(..., description="Unique beneficiary hash ID.")], client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, add_beneficiary_request : Annotated[Optional[AddBeneficiaryRequest], Field(description="Info:  Update Beneficiary API will be restricted when a remittance transaction for the beneficiary is Pending.")] = None, **kwargs) -> Resource:  # noqa: E501
        """Update Beneficiary  # noqa: E501

        This API allows you to update beneficiary details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_beneficiary(beneficiary_hash_id, client_hash_id, customer_hash_id, x_request_id, add_beneficiary_request, async_req=True)
        >>> result = thread.get()

        :param beneficiary_hash_id: Unique beneficiary hash ID. (required)
        :type beneficiary_hash_id: str
        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param add_beneficiary_request: Info:  Update Beneficiary API will be restricted when a remittance transaction for the beneficiary is Pending.
        :type add_beneficiary_request: AddBeneficiaryRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Resource
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_beneficiary_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.update_beneficiary_with_http_info(beneficiary_hash_id, client_hash_id, customer_hash_id, x_request_id, add_beneficiary_request, **kwargs)  # noqa: E501

    @validate_arguments
    def update_beneficiary_with_http_info(self, beneficiary_hash_id : Annotated[StrictStr, Field(..., description="Unique beneficiary hash ID.")], client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, add_beneficiary_request : Annotated[Optional[AddBeneficiaryRequest], Field(description="Info:  Update Beneficiary API will be restricted when a remittance transaction for the beneficiary is Pending.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Beneficiary  # noqa: E501

        This API allows you to update beneficiary details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_beneficiary_with_http_info(beneficiary_hash_id, client_hash_id, customer_hash_id, x_request_id, add_beneficiary_request, async_req=True)
        >>> result = thread.get()

        :param beneficiary_hash_id: Unique beneficiary hash ID. (required)
        :type beneficiary_hash_id: str
        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param add_beneficiary_request: Info:  Update Beneficiary API will be restricted when a remittance transaction for the beneficiary is Pending.
        :type add_beneficiary_request: AddBeneficiaryRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Resource, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'beneficiary_hash_id',
            'client_hash_id',
            'customer_hash_id',
            'x_request_id',
            'add_beneficiary_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_beneficiary" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['beneficiary_hash_id']:
            _path_params['beneficiaryHashId'] = _params['beneficiary_hash_id']

        if _params['client_hash_id']:
            _path_params['clientHashId'] = _params['client_hash_id']

        if _params['customer_hash_id']:
            _path_params['customerHashId'] = _params['customer_hash_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_request_id']:
            _header_params['x-request-id'] = _params['x_request_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['add_beneficiary_request'] is not None:
            _body_params = _params['add_beneficiary_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {
            '200': "Resource",
            '400': "CustomerApiError",
            '401': "str",
            '403': "str",
            '404': "CustomerApiError",
            '500': "CustomerApiError",
        }

        return self.api_client.call_api(
            '/api/v1/client/{clientHashId}/customer/{customerHashId}/beneficiaries/{beneficiaryHashId}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_beneficiary_v2(self, beneficiary_hash_id : Annotated[StrictStr, Field(..., description="Unique beneficiary hash ID.")], client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, update_beneficiary_request_dto : Annotated[Optional[UpdateBeneficiaryRequestDTO], Field(description="Info:  Update Beneficiary API will be restricted when a remittance transaction for the beneficiary is Pending.")] = None, **kwargs) -> BeneficiaryResponseDTO:  # noqa: E501
        """Update Beneficiary V2  # noqa: E501

        This API allows you to update beneficiary details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_beneficiary_v2(beneficiary_hash_id, client_hash_id, customer_hash_id, x_request_id, update_beneficiary_request_dto, async_req=True)
        >>> result = thread.get()

        :param beneficiary_hash_id: Unique beneficiary hash ID. (required)
        :type beneficiary_hash_id: str
        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param update_beneficiary_request_dto: Info:  Update Beneficiary API will be restricted when a remittance transaction for the beneficiary is Pending.
        :type update_beneficiary_request_dto: UpdateBeneficiaryRequestDTO
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: BeneficiaryResponseDTO
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_beneficiary_v2_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.update_beneficiary_v2_with_http_info(beneficiary_hash_id, client_hash_id, customer_hash_id, x_request_id, update_beneficiary_request_dto, **kwargs)  # noqa: E501

    @validate_arguments
    def update_beneficiary_v2_with_http_info(self, beneficiary_hash_id : Annotated[StrictStr, Field(..., description="Unique beneficiary hash ID.")], client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, update_beneficiary_request_dto : Annotated[Optional[UpdateBeneficiaryRequestDTO], Field(description="Info:  Update Beneficiary API will be restricted when a remittance transaction for the beneficiary is Pending.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Beneficiary V2  # noqa: E501

        This API allows you to update beneficiary details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_beneficiary_v2_with_http_info(beneficiary_hash_id, client_hash_id, customer_hash_id, x_request_id, update_beneficiary_request_dto, async_req=True)
        >>> result = thread.get()

        :param beneficiary_hash_id: Unique beneficiary hash ID. (required)
        :type beneficiary_hash_id: str
        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param update_beneficiary_request_dto: Info:  Update Beneficiary API will be restricted when a remittance transaction for the beneficiary is Pending.
        :type update_beneficiary_request_dto: UpdateBeneficiaryRequestDTO
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(BeneficiaryResponseDTO, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'beneficiary_hash_id',
            'client_hash_id',
            'customer_hash_id',
            'x_request_id',
            'update_beneficiary_request_dto'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_beneficiary_v2" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['beneficiary_hash_id']:
            _path_params['beneficiaryHashId'] = _params['beneficiary_hash_id']

        if _params['client_hash_id']:
            _path_params['clientHashId'] = _params['client_hash_id']

        if _params['customer_hash_id']:
            _path_params['customerHashId'] = _params['customer_hash_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_request_id']:
            _header_params['x-request-id'] = _params['x_request_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['update_beneficiary_request_dto'] is not None:
            _body_params = _params['update_beneficiary_request_dto']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {
            '200': "BeneficiaryResponseDTO",
            '400': "CustomerApiError",
            '401': "str",
            '403': "str",
            '404': "CustomerApiError",
            '500': "CustomerApiError",
        }

        return self.api_client.call_api(
            '/api/v2/client/{clientHashId}/customer/{customerHashId}/beneficiaries/{beneficiaryHashId}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
