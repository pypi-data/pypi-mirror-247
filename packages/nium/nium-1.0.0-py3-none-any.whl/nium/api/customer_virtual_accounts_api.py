# coding: utf-8

"""
    NIUM Platform

    NIUM Platform

    Contact: experience@nium.com
    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictBool, StrictInt, StrictStr

from typing import List, Optional

from nium.models.payment_id_cient_tags_response_dto import PaymentIdCientTagsResponseDTO
from nium.models.payment_id_request_dto2 import PaymentIdRequestDTO2
from nium.models.payment_id_response_dto2 import PaymentIdResponseDTO2
from nium.models.payment_id_tag_request_dto import PaymentIdTagRequestDTO
from nium.models.virtual_account_response_dto import VirtualAccountResponseDTO
from nium.models.wallet_payment_ids_response_dto import WalletPaymentIdsResponseDTO

# from nium.api_client import ApiClient
import nium.api_client
from nium.api_response import ApiResponse
from nium.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class CustomerVirtualAccountsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = nium.api_client.ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def account_ownership_certificate(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], currencies : Annotated[Optional[StrictStr], Field(description="This field accepts the list of currencies in 3-letter [ISO-4217 transaction currency code](https://docs.nium.com/apis/docs/currency-and-country-codes) for which the account ownership certificate to be generated. If no currencies are being sent in query param then account ownership certificate will be generated for all the currencies enabled to the customer.")] = None, current_account_balance : Annotated[Optional[StrictBool], Field(description="This field will display the account balance of the customer as on date")] = None, x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> None:  # noqa: E501
        """Account Ownership Certificate  # noqa: E501

        This API allows you to download an account ownership certificate.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.account_ownership_certificate(client_hash_id, customer_hash_id, currencies, current_account_balance, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param currencies: This field accepts the list of currencies in 3-letter [ISO-4217 transaction currency code](https://docs.nium.com/apis/docs/currency-and-country-codes) for which the account ownership certificate to be generated. If no currencies are being sent in query param then account ownership certificate will be generated for all the currencies enabled to the customer.
        :type currencies: str
        :param current_account_balance: This field will display the account balance of the customer as on date
        :type current_account_balance: bool
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the account_ownership_certificate_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.account_ownership_certificate_with_http_info(client_hash_id, customer_hash_id, currencies, current_account_balance, x_request_id, **kwargs)  # noqa: E501

    @validate_arguments
    def account_ownership_certificate_with_http_info(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], currencies : Annotated[Optional[StrictStr], Field(description="This field accepts the list of currencies in 3-letter [ISO-4217 transaction currency code](https://docs.nium.com/apis/docs/currency-and-country-codes) for which the account ownership certificate to be generated. If no currencies are being sent in query param then account ownership certificate will be generated for all the currencies enabled to the customer.")] = None, current_account_balance : Annotated[Optional[StrictBool], Field(description="This field will display the account balance of the customer as on date")] = None, x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Account Ownership Certificate  # noqa: E501

        This API allows you to download an account ownership certificate.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.account_ownership_certificate_with_http_info(client_hash_id, customer_hash_id, currencies, current_account_balance, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param currencies: This field accepts the list of currencies in 3-letter [ISO-4217 transaction currency code](https://docs.nium.com/apis/docs/currency-and-country-codes) for which the account ownership certificate to be generated. If no currencies are being sent in query param then account ownership certificate will be generated for all the currencies enabled to the customer.
        :type currencies: str
        :param current_account_balance: This field will display the account balance of the customer as on date
        :type current_account_balance: bool
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'client_hash_id',
            'customer_hash_id',
            'currencies',
            'current_account_balance',
            'x_request_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_ownership_certificate" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['client_hash_id']:
            _path_params['clientHashId'] = _params['client_hash_id']

        if _params['customer_hash_id']:
            _path_params['customerHashId'] = _params['customer_hash_id']


        # process the query parameters
        _query_params = []
        if _params.get('currencies') is not None:  # noqa: E501
            _query_params.append(('currencies', _params['currencies']))

        if _params.get('current_account_balance') is not None:  # noqa: E501
            _query_params.append(('currentAccountBalance', _params['current_account_balance']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_request_id']:
            _header_params['x-request-id'] = _params['x_request_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/api/v1/client/{clientHashId}/customer/{customerHashId}/accountOwnershipCertificate', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def assign_payment_id(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], wallet_hash_id : Annotated[StrictStr, Field(..., description="Unique wallet identifier generated simultaneously with customer creation.")], payment_id_request_dto2 : Annotated[PaymentIdRequestDTO2, Field(..., description="paymentIdRequestDTO2")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> PaymentIdResponseDTO2:  # noqa: E501
        """Assign Payment ID  # noqa: E501

        This API allows you to assign virtual account numbers to customer for specific source.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.assign_payment_id(client_hash_id, customer_hash_id, wallet_hash_id, payment_id_request_dto2, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param wallet_hash_id: Unique wallet identifier generated simultaneously with customer creation. (required)
        :type wallet_hash_id: str
        :param payment_id_request_dto2: paymentIdRequestDTO2 (required)
        :type payment_id_request_dto2: PaymentIdRequestDTO2
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PaymentIdResponseDTO2
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the assign_payment_id_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.assign_payment_id_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, payment_id_request_dto2, x_request_id, **kwargs)  # noqa: E501

    @validate_arguments
    def assign_payment_id_with_http_info(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], wallet_hash_id : Annotated[StrictStr, Field(..., description="Unique wallet identifier generated simultaneously with customer creation.")], payment_id_request_dto2 : Annotated[PaymentIdRequestDTO2, Field(..., description="paymentIdRequestDTO2")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Assign Payment ID  # noqa: E501

        This API allows you to assign virtual account numbers to customer for specific source.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.assign_payment_id_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, payment_id_request_dto2, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param wallet_hash_id: Unique wallet identifier generated simultaneously with customer creation. (required)
        :type wallet_hash_id: str
        :param payment_id_request_dto2: paymentIdRequestDTO2 (required)
        :type payment_id_request_dto2: PaymentIdRequestDTO2
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PaymentIdResponseDTO2, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'client_hash_id',
            'customer_hash_id',
            'wallet_hash_id',
            'payment_id_request_dto2',
            'x_request_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assign_payment_id" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['client_hash_id']:
            _path_params['clientHashId'] = _params['client_hash_id']

        if _params['customer_hash_id']:
            _path_params['customerHashId'] = _params['customer_hash_id']

        if _params['wallet_hash_id']:
            _path_params['walletHashId'] = _params['wallet_hash_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_request_id']:
            _header_params['x-request-id'] = _params['x_request_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['payment_id_request_dto2'] is not None:
            _body_params = _params['payment_id_request_dto2']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {
            '200': "PaymentIdResponseDTO2",
            '400': "WalletApiError",
            '401': "str",
            '403': "str",
            '404': "WalletApiError",
            '500': "WalletApiError",
        }

        return self.api_client.call_api(
            '/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/paymentId', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def manage_virtual_account_tags(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], wallet_hash_id : Annotated[StrictStr, Field(..., description="Unique wallet identifier generated simultaneously with customer creation.")], payment_id_tag_request_dto : Annotated[PaymentIdTagRequestDTO, Field(..., description="tags")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> PaymentIdCientTagsResponseDTO:  # noqa: E501
        """Manage Virtual Account Tags  # noqa: E501

        This API allows you to add, update, delete client tags against each virtual account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.manage_virtual_account_tags(client_hash_id, customer_hash_id, wallet_hash_id, payment_id_tag_request_dto, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param wallet_hash_id: Unique wallet identifier generated simultaneously with customer creation. (required)
        :type wallet_hash_id: str
        :param payment_id_tag_request_dto: tags (required)
        :type payment_id_tag_request_dto: PaymentIdTagRequestDTO
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PaymentIdCientTagsResponseDTO
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the manage_virtual_account_tags_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.manage_virtual_account_tags_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, payment_id_tag_request_dto, x_request_id, **kwargs)  # noqa: E501

    @validate_arguments
    def manage_virtual_account_tags_with_http_info(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], wallet_hash_id : Annotated[StrictStr, Field(..., description="Unique wallet identifier generated simultaneously with customer creation.")], payment_id_tag_request_dto : Annotated[PaymentIdTagRequestDTO, Field(..., description="tags")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Manage Virtual Account Tags  # noqa: E501

        This API allows you to add, update, delete client tags against each virtual account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.manage_virtual_account_tags_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, payment_id_tag_request_dto, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param wallet_hash_id: Unique wallet identifier generated simultaneously with customer creation. (required)
        :type wallet_hash_id: str
        :param payment_id_tag_request_dto: tags (required)
        :type payment_id_tag_request_dto: PaymentIdTagRequestDTO
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PaymentIdCientTagsResponseDTO, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'client_hash_id',
            'customer_hash_id',
            'wallet_hash_id',
            'payment_id_tag_request_dto',
            'x_request_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method manage_virtual_account_tags" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['client_hash_id']:
            _path_params['clientHashId'] = _params['client_hash_id']

        if _params['customer_hash_id']:
            _path_params['customerHashId'] = _params['customer_hash_id']

        if _params['wallet_hash_id']:
            _path_params['walletHashId'] = _params['wallet_hash_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_request_id']:
            _header_params['x-request-id'] = _params['x_request_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['payment_id_tag_request_dto'] is not None:
            _body_params = _params['payment_id_tag_request_dto']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {
            '200': "PaymentIdCientTagsResponseDTO",
            '400': "WalletApiError",
            '401': "str",
            '403': "str",
            '404': "WalletApiError",
            '500': "WalletApiError",
        }

        return self.api_client.call_api(
            '/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/paymentId/tags', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def virtual_account_details(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated and shared before API handshake.")], wallet_hash_id : Annotated[StrictStr, Field(..., description="Unique wallet identifier generated and shared before API handshake.")], currency_code : Optional[StrictStr] = None, end_date : Optional[StrictStr] = None, order : Optional[StrictStr] = None, page : Optional[StrictInt] = None, var_property : Optional[StrictStr] = None, size : Optional[StrictInt] = None, start_date : Optional[StrictStr] = None, tag_key : Optional[StrictStr] = None, tag_value : Optional[StrictStr] = None, x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> List[WalletPaymentIdsResponseDTO]:  # noqa: E501
        """Virtual Account Details  # noqa: E501

        This API allows you to fetch virtual accounts assigned to a customer's wallet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.virtual_account_details(client_hash_id, customer_hash_id, wallet_hash_id, currency_code, end_date, order, page, var_property, size, start_date, tag_key, tag_value, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated and shared before API handshake. (required)
        :type customer_hash_id: str
        :param wallet_hash_id: Unique wallet identifier generated and shared before API handshake. (required)
        :type wallet_hash_id: str
        :param currency_code:
        :type currency_code: str
        :param end_date:
        :type end_date: str
        :param order:
        :type order: str
        :param page:
        :type page: int
        :param var_property:
        :type var_property: str
        :param size:
        :type size: int
        :param start_date:
        :type start_date: str
        :param tag_key:
        :type tag_key: str
        :param tag_value:
        :type tag_value: str
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[WalletPaymentIdsResponseDTO]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the virtual_account_details_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.virtual_account_details_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, currency_code, end_date, order, page, var_property, size, start_date, tag_key, tag_value, x_request_id, **kwargs)  # noqa: E501

    @validate_arguments
    def virtual_account_details_with_http_info(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated and shared before API handshake.")], wallet_hash_id : Annotated[StrictStr, Field(..., description="Unique wallet identifier generated and shared before API handshake.")], currency_code : Optional[StrictStr] = None, end_date : Optional[StrictStr] = None, order : Optional[StrictStr] = None, page : Optional[StrictInt] = None, var_property : Optional[StrictStr] = None, size : Optional[StrictInt] = None, start_date : Optional[StrictStr] = None, tag_key : Optional[StrictStr] = None, tag_value : Optional[StrictStr] = None, x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Virtual Account Details  # noqa: E501

        This API allows you to fetch virtual accounts assigned to a customer's wallet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.virtual_account_details_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, currency_code, end_date, order, page, var_property, size, start_date, tag_key, tag_value, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated and shared before API handshake. (required)
        :type customer_hash_id: str
        :param wallet_hash_id: Unique wallet identifier generated and shared before API handshake. (required)
        :type wallet_hash_id: str
        :param currency_code:
        :type currency_code: str
        :param end_date:
        :type end_date: str
        :param order:
        :type order: str
        :param page:
        :type page: int
        :param var_property:
        :type var_property: str
        :param size:
        :type size: int
        :param start_date:
        :type start_date: str
        :param tag_key:
        :type tag_key: str
        :param tag_value:
        :type tag_value: str
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[WalletPaymentIdsResponseDTO], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'client_hash_id',
            'customer_hash_id',
            'wallet_hash_id',
            'currency_code',
            'end_date',
            'order',
            'page',
            'var_property',
            'size',
            'start_date',
            'tag_key',
            'tag_value',
            'x_request_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method virtual_account_details" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['client_hash_id']:
            _path_params['clientHashId'] = _params['client_hash_id']

        if _params['customer_hash_id']:
            _path_params['customerHashId'] = _params['customer_hash_id']

        if _params['wallet_hash_id']:
            _path_params['walletHashId'] = _params['wallet_hash_id']


        # process the query parameters
        _query_params = []
        if _params.get('currency_code') is not None:  # noqa: E501
            _query_params.append(('currencyCode', _params['currency_code']))

        if _params.get('end_date') is not None:  # noqa: E501
            _query_params.append(('endDate', _params['end_date']))

        if _params.get('order') is not None:  # noqa: E501
            _query_params.append(('order', _params['order']))

        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('var_property') is not None:  # noqa: E501
            _query_params.append(('property', _params['var_property']))

        if _params.get('size') is not None:  # noqa: E501
            _query_params.append(('size', _params['size']))

        if _params.get('start_date') is not None:  # noqa: E501
            _query_params.append(('startDate', _params['start_date']))

        if _params.get('tag_key') is not None:  # noqa: E501
            _query_params.append(('tagKey', _params['tag_key']))

        if _params.get('tag_value') is not None:  # noqa: E501
            _query_params.append(('tagValue', _params['tag_value']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_request_id']:
            _header_params['x-request-id'] = _params['x_request_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {
            '200': "List[WalletPaymentIdsResponseDTO]",
            '400': "WalletApiError",
            '401': "str",
            '403': "str",
            '404': "WalletApiError",
            '500': "WalletApiError",
        }

        return self.api_client.call_api(
            '/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/paymentIds', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def virtual_account_details_v2(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated and shared before API handshake.")], wallet_hash_id : Annotated[StrictStr, Field(..., description="Unique wallet identifier generated and shared before API handshake.")], currency_code : Optional[StrictStr] = None, end_date : Optional[StrictStr] = None, order : Optional[StrictStr] = None, page : Optional[StrictInt] = None, var_property : Optional[StrictStr] = None, size : Optional[StrictInt] = None, start_date : Optional[StrictStr] = None, tag_key : Optional[StrictStr] = None, tag_value : Optional[StrictStr] = None, x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> VirtualAccountResponseDTO:  # noqa: E501
        """Virtual Account Details V2  # noqa: E501

        This API allows you to fetch virtual accounts assigned to a customer's wallet.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.virtual_account_details_v2(client_hash_id, customer_hash_id, wallet_hash_id, currency_code, end_date, order, page, var_property, size, start_date, tag_key, tag_value, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated and shared before API handshake. (required)
        :type customer_hash_id: str
        :param wallet_hash_id: Unique wallet identifier generated and shared before API handshake. (required)
        :type wallet_hash_id: str
        :param currency_code:
        :type currency_code: str
        :param end_date:
        :type end_date: str
        :param order:
        :type order: str
        :param page:
        :type page: int
        :param var_property:
        :type var_property: str
        :param size:
        :type size: int
        :param start_date:
        :type start_date: str
        :param tag_key:
        :type tag_key: str
        :param tag_value:
        :type tag_value: str
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: VirtualAccountResponseDTO
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the virtual_account_details_v2_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.virtual_account_details_v2_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, currency_code, end_date, order, page, var_property, size, start_date, tag_key, tag_value, x_request_id, **kwargs)  # noqa: E501

    @validate_arguments
    def virtual_account_details_v2_with_http_info(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated and shared before API handshake.")], wallet_hash_id : Annotated[StrictStr, Field(..., description="Unique wallet identifier generated and shared before API handshake.")], currency_code : Optional[StrictStr] = None, end_date : Optional[StrictStr] = None, order : Optional[StrictStr] = None, page : Optional[StrictInt] = None, var_property : Optional[StrictStr] = None, size : Optional[StrictInt] = None, start_date : Optional[StrictStr] = None, tag_key : Optional[StrictStr] = None, tag_value : Optional[StrictStr] = None, x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Virtual Account Details V2  # noqa: E501

        This API allows you to fetch virtual accounts assigned to a customer's wallet.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.virtual_account_details_v2_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, currency_code, end_date, order, page, var_property, size, start_date, tag_key, tag_value, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated and shared before API handshake. (required)
        :type customer_hash_id: str
        :param wallet_hash_id: Unique wallet identifier generated and shared before API handshake. (required)
        :type wallet_hash_id: str
        :param currency_code:
        :type currency_code: str
        :param end_date:
        :type end_date: str
        :param order:
        :type order: str
        :param page:
        :type page: int
        :param var_property:
        :type var_property: str
        :param size:
        :type size: int
        :param start_date:
        :type start_date: str
        :param tag_key:
        :type tag_key: str
        :param tag_value:
        :type tag_value: str
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(VirtualAccountResponseDTO, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'client_hash_id',
            'customer_hash_id',
            'wallet_hash_id',
            'currency_code',
            'end_date',
            'order',
            'page',
            'var_property',
            'size',
            'start_date',
            'tag_key',
            'tag_value',
            'x_request_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method virtual_account_details_v2" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['client_hash_id']:
            _path_params['clientHashId'] = _params['client_hash_id']

        if _params['customer_hash_id']:
            _path_params['customerHashId'] = _params['customer_hash_id']

        if _params['wallet_hash_id']:
            _path_params['walletHashId'] = _params['wallet_hash_id']


        # process the query parameters
        _query_params = []
        if _params.get('currency_code') is not None:  # noqa: E501
            _query_params.append(('currencyCode', _params['currency_code']))

        if _params.get('end_date') is not None:  # noqa: E501
            _query_params.append(('endDate', _params['end_date']))

        if _params.get('order') is not None:  # noqa: E501
            _query_params.append(('order', _params['order']))

        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('var_property') is not None:  # noqa: E501
            _query_params.append(('property', _params['var_property']))

        if _params.get('size') is not None:  # noqa: E501
            _query_params.append(('size', _params['size']))

        if _params.get('start_date') is not None:  # noqa: E501
            _query_params.append(('startDate', _params['start_date']))

        if _params.get('tag_key') is not None:  # noqa: E501
            _query_params.append(('tagKey', _params['tag_key']))

        if _params.get('tag_value') is not None:  # noqa: E501
            _query_params.append(('tagValue', _params['tag_value']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_request_id']:
            _header_params['x-request-id'] = _params['x_request_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {
            '200': "VirtualAccountResponseDTO",
            '400': "WalletApiError",
            '401': "str",
            '403': "str",
            '404': "WalletApiError",
            '500': "WalletApiError",
        }

        return self.api_client.call_api(
            '/api/v2/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/paymentIds', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
