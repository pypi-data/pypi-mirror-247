# coding: utf-8

"""
    NIUM Platform

    NIUM Platform

    Contact: experience@nium.com
    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictInt, StrictStr

from typing import Any, Dict, List, Optional

from nium.models.account_response_dto import AccountResponseDTO
from nium.models.client_prefund_response_dto import ClientPrefundResponseDTO
from nium.models.prefund_request_dto import PrefundRequestDTO

# from nium.api_client import ApiClient
import nium.api_client
from nium.api_response import ApiResponse
from nium.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ClientPrefundAccountApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = nium.api_client.ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def client_prefund_balances(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> List[AccountResponseDTO]:  # noqa: E501
        """Client Prefund Balances  # noqa: E501

        This API allows you to fetch the available prefund balance for a client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.client_prefund_balances(client_hash_id, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[AccountResponseDTO]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the client_prefund_balances_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.client_prefund_balances_with_http_info(client_hash_id, x_request_id, **kwargs)  # noqa: E501

    @validate_arguments
    def client_prefund_balances_with_http_info(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Client Prefund Balances  # noqa: E501

        This API allows you to fetch the available prefund balance for a client.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.client_prefund_balances_with_http_info(client_hash_id, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[AccountResponseDTO], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'client_hash_id',
            'x_request_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method client_prefund_balances" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['client_hash_id']:
            _path_params['clientHashId'] = _params['client_hash_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_request_id']:
            _header_params['x-request-id'] = _params['x_request_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {
            '200': "List[AccountResponseDTO]",
            '400': "WalletApiError",
            '401': "str",
            '403': "str",
            '404': "WalletApiError",
            '500': "WalletApiError",
        }

        return self.api_client.call_api(
            '/api/v1/client/{clientHashId}/balances', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def client_prefund_request(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], prefund_request_dto : Annotated[PrefundRequestDTO, Field(..., description="prefundRequestDTO")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> ClientPrefundResponseDTO:  # noqa: E501
        """Client Prefund Request  # noqa: E501

        This API allows our clients to raise a prefund request in the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.client_prefund_request(client_hash_id, prefund_request_dto, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param prefund_request_dto: prefundRequestDTO (required)
        :type prefund_request_dto: PrefundRequestDTO
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ClientPrefundResponseDTO
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the client_prefund_request_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.client_prefund_request_with_http_info(client_hash_id, prefund_request_dto, x_request_id, **kwargs)  # noqa: E501

    @validate_arguments
    def client_prefund_request_with_http_info(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], prefund_request_dto : Annotated[PrefundRequestDTO, Field(..., description="prefundRequestDTO")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Client Prefund Request  # noqa: E501

        This API allows our clients to raise a prefund request in the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.client_prefund_request_with_http_info(client_hash_id, prefund_request_dto, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param prefund_request_dto: prefundRequestDTO (required)
        :type prefund_request_dto: PrefundRequestDTO
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ClientPrefundResponseDTO, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'client_hash_id',
            'prefund_request_dto',
            'x_request_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method client_prefund_request" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['client_hash_id']:
            _path_params['clientHashId'] = _params['client_hash_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_request_id']:
            _header_params['x-request-id'] = _params['x_request_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['prefund_request_dto'] is not None:
            _body_params = _params['prefund_request_dto']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {
            '200': "ClientPrefundResponseDTO",
            '400': "PayinApiError",
            '401': "str",
            '403': "str",
            '404': "PayinApiError",
            '500': "PayinApiError",
        }

        return self.api_client.call_api(
            '/api/v1/client/{clientHashId}/prefund', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def fetch_client_prefund_request(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client Id assigned to the client during the onboarding process.")], amount : Annotated[Optional[StrictStr], Field(description="amount")] = None, bank_reference_number : Annotated[Optional[StrictStr], Field(description="bankReferenceNumber")] = None, currency : Annotated[Optional[StrictStr], Field(description="currency")] = None, end_date : Annotated[Optional[StrictStr], Field(description="endDate")] = None, order : Annotated[Optional[StrictStr], Field(description="The sort order for the results. Acceptable values are ASC or DESC. The default order value is DESC.")] = None, page : Annotated[Optional[StrictInt], Field(description="This API may have lot of data in response and supports pagination. Entire response data is divided into pages with size as the upper limit on the number of data. Integer values from 0 onwards are acceptable. Default page is 0.")] = None, prefund_status : Annotated[Optional[StrictStr], Field(description="prefundStatus")] = None, size : Annotated[Optional[StrictInt], Field(description="The upper limit on the number of items to be fetched with each call. Integer values from 1 onwards are acceptable. Default size is 20.")] = None, start_date : Annotated[Optional[StrictStr], Field(description="startDate")] = None, system_reference_number : Annotated[Optional[StrictStr], Field(description="systemReferenceNumber")] = None, unique_payer_id : Annotated[Optional[StrictStr], Field(description="uniquePayerId")] = None, unique_payment_id : Annotated[Optional[StrictStr], Field(description="uniquePaymentId")] = None, x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> object:  # noqa: E501
        """Fetch Client Prefund Request  # noqa: E501

        This API allows you to fetch the details of client prefund requests.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.fetch_client_prefund_request(client_hash_id, amount, bank_reference_number, currency, end_date, order, page, prefund_status, size, start_date, system_reference_number, unique_payer_id, unique_payment_id, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client Id assigned to the client during the onboarding process. (required)
        :type client_hash_id: str
        :param amount: amount
        :type amount: str
        :param bank_reference_number: bankReferenceNumber
        :type bank_reference_number: str
        :param currency: currency
        :type currency: str
        :param end_date: endDate
        :type end_date: str
        :param order: The sort order for the results. Acceptable values are ASC or DESC. The default order value is DESC.
        :type order: str
        :param page: This API may have lot of data in response and supports pagination. Entire response data is divided into pages with size as the upper limit on the number of data. Integer values from 0 onwards are acceptable. Default page is 0.
        :type page: int
        :param prefund_status: prefundStatus
        :type prefund_status: str
        :param size: The upper limit on the number of items to be fetched with each call. Integer values from 1 onwards are acceptable. Default size is 20.
        :type size: int
        :param start_date: startDate
        :type start_date: str
        :param system_reference_number: systemReferenceNumber
        :type system_reference_number: str
        :param unique_payer_id: uniquePayerId
        :type unique_payer_id: str
        :param unique_payment_id: uniquePaymentId
        :type unique_payment_id: str
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the fetch_client_prefund_request_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.fetch_client_prefund_request_with_http_info(client_hash_id, amount, bank_reference_number, currency, end_date, order, page, prefund_status, size, start_date, system_reference_number, unique_payer_id, unique_payment_id, x_request_id, **kwargs)  # noqa: E501

    @validate_arguments
    def fetch_client_prefund_request_with_http_info(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client Id assigned to the client during the onboarding process.")], amount : Annotated[Optional[StrictStr], Field(description="amount")] = None, bank_reference_number : Annotated[Optional[StrictStr], Field(description="bankReferenceNumber")] = None, currency : Annotated[Optional[StrictStr], Field(description="currency")] = None, end_date : Annotated[Optional[StrictStr], Field(description="endDate")] = None, order : Annotated[Optional[StrictStr], Field(description="The sort order for the results. Acceptable values are ASC or DESC. The default order value is DESC.")] = None, page : Annotated[Optional[StrictInt], Field(description="This API may have lot of data in response and supports pagination. Entire response data is divided into pages with size as the upper limit on the number of data. Integer values from 0 onwards are acceptable. Default page is 0.")] = None, prefund_status : Annotated[Optional[StrictStr], Field(description="prefundStatus")] = None, size : Annotated[Optional[StrictInt], Field(description="The upper limit on the number of items to be fetched with each call. Integer values from 1 onwards are acceptable. Default size is 20.")] = None, start_date : Annotated[Optional[StrictStr], Field(description="startDate")] = None, system_reference_number : Annotated[Optional[StrictStr], Field(description="systemReferenceNumber")] = None, unique_payer_id : Annotated[Optional[StrictStr], Field(description="uniquePayerId")] = None, unique_payment_id : Annotated[Optional[StrictStr], Field(description="uniquePaymentId")] = None, x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Fetch Client Prefund Request  # noqa: E501

        This API allows you to fetch the details of client prefund requests.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.fetch_client_prefund_request_with_http_info(client_hash_id, amount, bank_reference_number, currency, end_date, order, page, prefund_status, size, start_date, system_reference_number, unique_payer_id, unique_payment_id, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client Id assigned to the client during the onboarding process. (required)
        :type client_hash_id: str
        :param amount: amount
        :type amount: str
        :param bank_reference_number: bankReferenceNumber
        :type bank_reference_number: str
        :param currency: currency
        :type currency: str
        :param end_date: endDate
        :type end_date: str
        :param order: The sort order for the results. Acceptable values are ASC or DESC. The default order value is DESC.
        :type order: str
        :param page: This API may have lot of data in response and supports pagination. Entire response data is divided into pages with size as the upper limit on the number of data. Integer values from 0 onwards are acceptable. Default page is 0.
        :type page: int
        :param prefund_status: prefundStatus
        :type prefund_status: str
        :param size: The upper limit on the number of items to be fetched with each call. Integer values from 1 onwards are acceptable. Default size is 20.
        :type size: int
        :param start_date: startDate
        :type start_date: str
        :param system_reference_number: systemReferenceNumber
        :type system_reference_number: str
        :param unique_payer_id: uniquePayerId
        :type unique_payer_id: str
        :param unique_payment_id: uniquePaymentId
        :type unique_payment_id: str
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'client_hash_id',
            'amount',
            'bank_reference_number',
            'currency',
            'end_date',
            'order',
            'page',
            'prefund_status',
            'size',
            'start_date',
            'system_reference_number',
            'unique_payer_id',
            'unique_payment_id',
            'x_request_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_client_prefund_request" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['client_hash_id']:
            _path_params['clientHashId'] = _params['client_hash_id']


        # process the query parameters
        _query_params = []
        if _params.get('amount') is not None:  # noqa: E501
            _query_params.append(('amount', _params['amount']))

        if _params.get('bank_reference_number') is not None:  # noqa: E501
            _query_params.append(('bankReferenceNumber', _params['bank_reference_number']))

        if _params.get('currency') is not None:  # noqa: E501
            _query_params.append(('currency', _params['currency']))

        if _params.get('end_date') is not None:  # noqa: E501
            _query_params.append(('endDate', _params['end_date']))

        if _params.get('order') is not None:  # noqa: E501
            _query_params.append(('order', _params['order']))

        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('prefund_status') is not None:  # noqa: E501
            _query_params.append(('prefundStatus', _params['prefund_status']))

        if _params.get('size') is not None:  # noqa: E501
            _query_params.append(('size', _params['size']))

        if _params.get('start_date') is not None:  # noqa: E501
            _query_params.append(('startDate', _params['start_date']))

        if _params.get('system_reference_number') is not None:  # noqa: E501
            _query_params.append(('systemReferenceNumber', _params['system_reference_number']))

        if _params.get('unique_payer_id') is not None:  # noqa: E501
            _query_params.append(('uniquePayerId', _params['unique_payer_id']))

        if _params.get('unique_payment_id') is not None:  # noqa: E501
            _query_params.append(('uniquePaymentId', _params['unique_payment_id']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_request_id']:
            _header_params['x-request-id'] = _params['x_request_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {
            '200': "object",
            '400': "PayinApiError",
            '401': "str",
            '403': "str",
            '404': "PayinApiError",
            '500': "PayinApiError",
        }

        return self.api_client.call_api(
            '/api/v1/client/{clientHashId}/prefundList', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
