# coding: utf-8

"""
    NIUM Platform

    NIUM Platform

    Contact: experience@nium.com
    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictStr, constr

from typing import List, Optional

from nium.models.block_customer_request_dto import BlockCustomerRequestDTO
from nium.models.customer_api_error import CustomerApiError
from nium.models.customer_client_tags_request_dto import CustomerClientTagsRequestDTO
from nium.models.customer_client_tags_response_dto import CustomerClientTagsResponseDTO
from nium.models.customer_detail_response import CustomerDetailResponse
from nium.models.customer_details_response_v2_dto import CustomerDetailsResponseV2DTO
from nium.models.paginated_customer_details_response_v2_dto import PaginatedCustomerDetailsResponseV2DTO
from nium.models.paginated_response_dto_customer_details_response_v2_dto import PaginatedResponseDTOCustomerDetailsResponseV2DTO

# from nium.api_client import ApiClient
import nium.api_client
from nium.api_response import ApiResponse
from nium.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class CustomerManagementApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = nium.api_client.ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def account_statement(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], end_date : Annotated[StrictStr, Field(..., description="End date for fetching the transaction details. The format for endDate is YYYY-MM-DD.")], start_date : Annotated[StrictStr, Field(..., description="From date for fetching the transaction details. The format for startDate is YYYY-MM-DD.")], currencies : Annotated[Optional[StrictStr], Field(description="This field accepts the list of currencies in 3-letter [ISO-4217 transaction currency code](https://docs.nium.com/apis/docs/currency-and-country-codes) for which the account statement to be generated. If no currencies are being sent in query param then statement will be generated for all the currencies enabled to the customer.")] = None, file_type : Annotated[Optional[StrictStr], Field(description="This field accepts the file type of the account statement to be generated. Accepted values are pdf or CSV. If there is no value passed, then pdf is taken as the default value.")] = None, x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> None:  # noqa: E501
        """Account Statement  # noqa: E501

        This API allows you to download an account statement.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.account_statement(client_hash_id, customer_hash_id, end_date, start_date, currencies, file_type, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param end_date: End date for fetching the transaction details. The format for endDate is YYYY-MM-DD. (required)
        :type end_date: str
        :param start_date: From date for fetching the transaction details. The format for startDate is YYYY-MM-DD. (required)
        :type start_date: str
        :param currencies: This field accepts the list of currencies in 3-letter [ISO-4217 transaction currency code](https://docs.nium.com/apis/docs/currency-and-country-codes) for which the account statement to be generated. If no currencies are being sent in query param then statement will be generated for all the currencies enabled to the customer.
        :type currencies: str
        :param file_type: This field accepts the file type of the account statement to be generated. Accepted values are pdf or CSV. If there is no value passed, then pdf is taken as the default value.
        :type file_type: str
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the account_statement_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.account_statement_with_http_info(client_hash_id, customer_hash_id, end_date, start_date, currencies, file_type, x_request_id, **kwargs)  # noqa: E501

    @validate_arguments
    def account_statement_with_http_info(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], end_date : Annotated[StrictStr, Field(..., description="End date for fetching the transaction details. The format for endDate is YYYY-MM-DD.")], start_date : Annotated[StrictStr, Field(..., description="From date for fetching the transaction details. The format for startDate is YYYY-MM-DD.")], currencies : Annotated[Optional[StrictStr], Field(description="This field accepts the list of currencies in 3-letter [ISO-4217 transaction currency code](https://docs.nium.com/apis/docs/currency-and-country-codes) for which the account statement to be generated. If no currencies are being sent in query param then statement will be generated for all the currencies enabled to the customer.")] = None, file_type : Annotated[Optional[StrictStr], Field(description="This field accepts the file type of the account statement to be generated. Accepted values are pdf or CSV. If there is no value passed, then pdf is taken as the default value.")] = None, x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Account Statement  # noqa: E501

        This API allows you to download an account statement.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.account_statement_with_http_info(client_hash_id, customer_hash_id, end_date, start_date, currencies, file_type, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param end_date: End date for fetching the transaction details. The format for endDate is YYYY-MM-DD. (required)
        :type end_date: str
        :param start_date: From date for fetching the transaction details. The format for startDate is YYYY-MM-DD. (required)
        :type start_date: str
        :param currencies: This field accepts the list of currencies in 3-letter [ISO-4217 transaction currency code](https://docs.nium.com/apis/docs/currency-and-country-codes) for which the account statement to be generated. If no currencies are being sent in query param then statement will be generated for all the currencies enabled to the customer.
        :type currencies: str
        :param file_type: This field accepts the file type of the account statement to be generated. Accepted values are pdf or CSV. If there is no value passed, then pdf is taken as the default value.
        :type file_type: str
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'client_hash_id',
            'customer_hash_id',
            'end_date',
            'start_date',
            'currencies',
            'file_type',
            'x_request_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_statement" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['client_hash_id']:
            _path_params['clientHashId'] = _params['client_hash_id']

        if _params['customer_hash_id']:
            _path_params['customerHashId'] = _params['customer_hash_id']


        # process the query parameters
        _query_params = []
        if _params.get('currencies') is not None:  # noqa: E501
            _query_params.append(('currencies', _params['currencies']))

        if _params.get('end_date') is not None:  # noqa: E501
            _query_params.append(('endDate', _params['end_date']))

        if _params.get('file_type') is not None:  # noqa: E501
            _query_params.append(('fileType', _params['file_type']))

        if _params.get('start_date') is not None:  # noqa: E501
            _query_params.append(('startDate', _params['start_date']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_request_id']:
            _header_params['x-request-id'] = _params['x_request_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/api/v1/client/{clientHashId}/customer/{customerHashId}/accounts/statement', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def block_unblock_customer(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], block_customer_request_dto : Annotated[BlockCustomerRequestDTO, Field(..., description="blockCustomerRequestDTO")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> CustomerApiError:  # noqa: E501
        """Block/Unblock Customer  # noqa: E501

        This API allows you to permanently block or temporarily block/unblock a customer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.block_unblock_customer(client_hash_id, customer_hash_id, block_customer_request_dto, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param block_customer_request_dto: blockCustomerRequestDTO (required)
        :type block_customer_request_dto: BlockCustomerRequestDTO
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CustomerApiError
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the block_unblock_customer_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.block_unblock_customer_with_http_info(client_hash_id, customer_hash_id, block_customer_request_dto, x_request_id, **kwargs)  # noqa: E501

    @validate_arguments
    def block_unblock_customer_with_http_info(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], block_customer_request_dto : Annotated[BlockCustomerRequestDTO, Field(..., description="blockCustomerRequestDTO")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Block/Unblock Customer  # noqa: E501

        This API allows you to permanently block or temporarily block/unblock a customer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.block_unblock_customer_with_http_info(client_hash_id, customer_hash_id, block_customer_request_dto, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param block_customer_request_dto: blockCustomerRequestDTO (required)
        :type block_customer_request_dto: BlockCustomerRequestDTO
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CustomerApiError, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'client_hash_id',
            'customer_hash_id',
            'block_customer_request_dto',
            'x_request_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method block_unblock_customer" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['client_hash_id']:
            _path_params['clientHashId'] = _params['client_hash_id']

        if _params['customer_hash_id']:
            _path_params['customerHashId'] = _params['customer_hash_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_request_id']:
            _header_params['x-request-id'] = _params['x_request_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['block_customer_request_dto'] is not None:
            _body_params = _params['block_customer_request_dto']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {
            '200': "CustomerApiError",
            '400': "CustomerApiError",
            '401': "str",
            '403': "str",
            '404': "CustomerApiError",
            '500': "CustomerApiError",
        }

        return self.api_client.call_api(
            '/api/v1/client/{clientHashId}/customer/{customerHashId}/block', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def customer_details(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> CustomerDetailResponse:  # noqa: E501
        """Customer Details  # noqa: E501

        This API allows you to fetch details for a specific customer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.customer_details(client_hash_id, customer_hash_id, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CustomerDetailResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the customer_details_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.customer_details_with_http_info(client_hash_id, customer_hash_id, x_request_id, **kwargs)  # noqa: E501

    @validate_arguments
    def customer_details_with_http_info(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Customer Details  # noqa: E501

        This API allows you to fetch details for a specific customer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.customer_details_with_http_info(client_hash_id, customer_hash_id, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CustomerDetailResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'client_hash_id',
            'customer_hash_id',
            'x_request_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method customer_details" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['client_hash_id']:
            _path_params['clientHashId'] = _params['client_hash_id']

        if _params['customer_hash_id']:
            _path_params['customerHashId'] = _params['customer_hash_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_request_id']:
            _header_params['x-request-id'] = _params['x_request_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {
            '200': "CustomerDetailResponse",
            '400': "CustomerApiError",
            '401': "str",
            '403': "str",
            '404': "CustomerApiError",
            '500': "CustomerApiError",
        }

        return self.api_client.call_api(
            '/api/v1/client/{clientHashId}/customer/{customerHashId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def customer_details_v2(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> CustomerDetailsResponseV2DTO:  # noqa: E501
        """Customer Details V2  # noqa: E501

        This API allows you to fetch details for a specific customer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.customer_details_v2(client_hash_id, customer_hash_id, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CustomerDetailsResponseV2DTO
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the customer_details_v2_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.customer_details_v2_with_http_info(client_hash_id, customer_hash_id, x_request_id, **kwargs)  # noqa: E501

    @validate_arguments
    def customer_details_v2_with_http_info(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Customer Details V2  # noqa: E501

        This API allows you to fetch details for a specific customer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.customer_details_v2_with_http_info(client_hash_id, customer_hash_id, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CustomerDetailsResponseV2DTO, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'client_hash_id',
            'customer_hash_id',
            'x_request_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method customer_details_v2" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['client_hash_id']:
            _path_params['clientHashId'] = _params['client_hash_id']

        if _params['customer_hash_id']:
            _path_params['customerHashId'] = _params['customer_hash_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_request_id']:
            _header_params['x-request-id'] = _params['x_request_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {
            '200': "CustomerDetailsResponseV2DTO",
            '400': "CustomerApiError",
            '401': "str",
            '403': "str",
            '404': "CustomerApiError",
            '500': "CustomerApiError",
        }

        return self.api_client.call_api(
            '/api/v2/client/{clientHashId}/customer/{customerHashId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def customer_list(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], email : Annotated[Optional[StrictStr], Field(description="This field accepts the email ID of the customer.")] = None, mobile : Annotated[Optional[constr(strict=True, max_length=20, min_length=1)], Field(description="This field accepts the mobile number of a customer without the country code.")] = None, order : Annotated[Optional[StrictStr], Field(description="This field accepts the order which can be ASC or DESC.")] = None, page : Annotated[Optional[StrictStr], Field(description="This field accepts the page number to be returned. The acceptable values are 0-N.  This field works with size field such that total number of records/size of each page = number of pages(N).  This field can then give a particular page.")] = None, size : Annotated[Optional[StrictStr], Field(description="This field accepts the number of elements per page.")] = None, x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> List[CustomerDetailResponse]:  # noqa: E501
        """Customer List  # noqa: E501

        This API allows you to fetch the customers for the client. It also supports query parameters based filtering to fetch details of a customer with email or mobile.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.customer_list(client_hash_id, email, mobile, order, page, size, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param email: This field accepts the email ID of the customer.
        :type email: str
        :param mobile: This field accepts the mobile number of a customer without the country code.
        :type mobile: str
        :param order: This field accepts the order which can be ASC or DESC.
        :type order: str
        :param page: This field accepts the page number to be returned. The acceptable values are 0-N.  This field works with size field such that total number of records/size of each page = number of pages(N).  This field can then give a particular page.
        :type page: str
        :param size: This field accepts the number of elements per page.
        :type size: str
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[CustomerDetailResponse]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the customer_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.customer_list_with_http_info(client_hash_id, email, mobile, order, page, size, x_request_id, **kwargs)  # noqa: E501

    @validate_arguments
    def customer_list_with_http_info(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], email : Annotated[Optional[StrictStr], Field(description="This field accepts the email ID of the customer.")] = None, mobile : Annotated[Optional[constr(strict=True, max_length=20, min_length=1)], Field(description="This field accepts the mobile number of a customer without the country code.")] = None, order : Annotated[Optional[StrictStr], Field(description="This field accepts the order which can be ASC or DESC.")] = None, page : Annotated[Optional[StrictStr], Field(description="This field accepts the page number to be returned. The acceptable values are 0-N.  This field works with size field such that total number of records/size of each page = number of pages(N).  This field can then give a particular page.")] = None, size : Annotated[Optional[StrictStr], Field(description="This field accepts the number of elements per page.")] = None, x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Customer List  # noqa: E501

        This API allows you to fetch the customers for the client. It also supports query parameters based filtering to fetch details of a customer with email or mobile.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.customer_list_with_http_info(client_hash_id, email, mobile, order, page, size, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param email: This field accepts the email ID of the customer.
        :type email: str
        :param mobile: This field accepts the mobile number of a customer without the country code.
        :type mobile: str
        :param order: This field accepts the order which can be ASC or DESC.
        :type order: str
        :param page: This field accepts the page number to be returned. The acceptable values are 0-N.  This field works with size field such that total number of records/size of each page = number of pages(N).  This field can then give a particular page.
        :type page: str
        :param size: This field accepts the number of elements per page.
        :type size: str
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[CustomerDetailResponse], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'client_hash_id',
            'email',
            'mobile',
            'order',
            'page',
            'size',
            'x_request_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method customer_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['client_hash_id']:
            _path_params['clientHashId'] = _params['client_hash_id']


        # process the query parameters
        _query_params = []
        if _params.get('email') is not None:  # noqa: E501
            _query_params.append(('email', _params['email']))

        if _params.get('mobile') is not None:  # noqa: E501
            _query_params.append(('mobile', _params['mobile']))

        if _params.get('order') is not None:  # noqa: E501
            _query_params.append(('order', _params['order']))

        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('size') is not None:  # noqa: E501
            _query_params.append(('size', _params['size']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_request_id']:
            _header_params['x-request-id'] = _params['x_request_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {
            '200': "List[CustomerDetailResponse]",
            '400': "CustomerApiError",
            '401': "str",
            '403': "str",
            '404': "CustomerApiError",
            '500': "CustomerApiError",
        }

        return self.api_client.call_api(
            '/api/v1/client/{clientHashId}/customers', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def customer_list_v2(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], business_registration_number : Annotated[Optional[StrictStr], Field(description="This field accepts the business registration number of corporate customer.")] = None, email : Annotated[Optional[StrictStr], Field(description="This field accepts the email ID of the customer.")] = None, mobile : Annotated[Optional[StrictStr], Field(description="This field accepts the mobile number of a customer without the country code.")] = None, order : Annotated[Optional[StrictStr], Field(description="This field accepts the order which can be ASC or DESC.")] = None, page : Annotated[Optional[StrictStr], Field(description="This field accepts the page number to be returned. The acceptable values are 0-N.  This field works with size field such that total number of records/size of each page = number of pages(N).  This field can then give a particular page.")] = None, size : Annotated[Optional[StrictStr], Field(description="This field accepts the number of elements per page.")] = None, tag_key : Annotated[Optional[StrictStr], Field(description="This parameter can filter the customers, based on the exact value of tagKey defined against customers. This can be used as an independent search parameter.")] = None, tag_value : Annotated[Optional[StrictStr], Field(description="This parameter can filter the customers, based on the approximating value of tagValue(that may be mapped for a tagKey defined against customers). This can be used as an independent search parameter.")] = None, x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> PaginatedCustomerDetailsResponseV2DTO:  # noqa: E501
        """Get Paginated Customer By Client And Optional Search Parameters.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.customer_list_v2(client_hash_id, business_registration_number, email, mobile, order, page, size, tag_key, tag_value, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param business_registration_number: This field accepts the business registration number of corporate customer.
        :type business_registration_number: str
        :param email: This field accepts the email ID of the customer.
        :type email: str
        :param mobile: This field accepts the mobile number of a customer without the country code.
        :type mobile: str
        :param order: This field accepts the order which can be ASC or DESC.
        :type order: str
        :param page: This field accepts the page number to be returned. The acceptable values are 0-N.  This field works with size field such that total number of records/size of each page = number of pages(N).  This field can then give a particular page.
        :type page: str
        :param size: This field accepts the number of elements per page.
        :type size: str
        :param tag_key: This parameter can filter the customers, based on the exact value of tagKey defined against customers. This can be used as an independent search parameter.
        :type tag_key: str
        :param tag_value: This parameter can filter the customers, based on the approximating value of tagValue(that may be mapped for a tagKey defined against customers). This can be used as an independent search parameter.
        :type tag_value: str
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PaginatedCustomerDetailsResponseV2DTO
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the customer_list_v2_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.customer_list_v2_with_http_info(client_hash_id, business_registration_number, email, mobile, order, page, size, tag_key, tag_value, x_request_id, **kwargs)  # noqa: E501

    @validate_arguments
    def customer_list_v2_with_http_info(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], business_registration_number : Annotated[Optional[StrictStr], Field(description="This field accepts the business registration number of corporate customer.")] = None, email : Annotated[Optional[StrictStr], Field(description="This field accepts the email ID of the customer.")] = None, mobile : Annotated[Optional[StrictStr], Field(description="This field accepts the mobile number of a customer without the country code.")] = None, order : Annotated[Optional[StrictStr], Field(description="This field accepts the order which can be ASC or DESC.")] = None, page : Annotated[Optional[StrictStr], Field(description="This field accepts the page number to be returned. The acceptable values are 0-N.  This field works with size field such that total number of records/size of each page = number of pages(N).  This field can then give a particular page.")] = None, size : Annotated[Optional[StrictStr], Field(description="This field accepts the number of elements per page.")] = None, tag_key : Annotated[Optional[StrictStr], Field(description="This parameter can filter the customers, based on the exact value of tagKey defined against customers. This can be used as an independent search parameter.")] = None, tag_value : Annotated[Optional[StrictStr], Field(description="This parameter can filter the customers, based on the approximating value of tagValue(that may be mapped for a tagKey defined against customers). This can be used as an independent search parameter.")] = None, x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Paginated Customer By Client And Optional Search Parameters.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.customer_list_v2_with_http_info(client_hash_id, business_registration_number, email, mobile, order, page, size, tag_key, tag_value, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param business_registration_number: This field accepts the business registration number of corporate customer.
        :type business_registration_number: str
        :param email: This field accepts the email ID of the customer.
        :type email: str
        :param mobile: This field accepts the mobile number of a customer without the country code.
        :type mobile: str
        :param order: This field accepts the order which can be ASC or DESC.
        :type order: str
        :param page: This field accepts the page number to be returned. The acceptable values are 0-N.  This field works with size field such that total number of records/size of each page = number of pages(N).  This field can then give a particular page.
        :type page: str
        :param size: This field accepts the number of elements per page.
        :type size: str
        :param tag_key: This parameter can filter the customers, based on the exact value of tagKey defined against customers. This can be used as an independent search parameter.
        :type tag_key: str
        :param tag_value: This parameter can filter the customers, based on the approximating value of tagValue(that may be mapped for a tagKey defined against customers). This can be used as an independent search parameter.
        :type tag_value: str
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PaginatedCustomerDetailsResponseV2DTO, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'client_hash_id',
            'business_registration_number',
            'email',
            'mobile',
            'order',
            'page',
            'size',
            'tag_key',
            'tag_value',
            'x_request_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method customer_list_v2" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['client_hash_id']:
            _path_params['clientHashId'] = _params['client_hash_id']


        # process the query parameters
        _query_params = []
        if _params.get('business_registration_number') is not None:  # noqa: E501
            _query_params.append(('businessRegistrationNumber', _params['business_registration_number']))

        if _params.get('email') is not None:  # noqa: E501
            _query_params.append(('email', _params['email']))

        if _params.get('mobile') is not None:  # noqa: E501
            _query_params.append(('mobile', _params['mobile']))

        if _params.get('order') is not None:  # noqa: E501
            _query_params.append(('order', _params['order']))

        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('size') is not None:  # noqa: E501
            _query_params.append(('size', _params['size']))

        if _params.get('tag_key') is not None:  # noqa: E501
            _query_params.append(('tagKey', _params['tag_key']))

        if _params.get('tag_value') is not None:  # noqa: E501
            _query_params.append(('tagValue', _params['tag_value']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_request_id']:
            _header_params['x-request-id'] = _params['x_request_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {
            '200': "PaginatedCustomerDetailsResponseV2DTO",
            '400': "CustomerApiError",
            '401': "str",
            '403': "str",
            '404': "CustomerApiError",
            '500': "CustomerApiError",
        }

        return self.api_client.call_api(
            '/api/v2/client/{clientHashId}/customers', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def customer_list_v3(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], business_registration_number : Annotated[Optional[StrictStr], Field(description="This field accepts the business registration number of corporate customer.")] = None, customer_type : Annotated[Optional[StrictStr], Field(description="This field accepts the type of customer.")] = None, email : Annotated[Optional[StrictStr], Field(description="This field accepts the email ID of the customer.")] = None, mobile : Annotated[Optional[StrictStr], Field(description="This field accepts the mobile number of a customer without the country code.")] = None, order : Annotated[Optional[StrictStr], Field(description="This field accepts the order which can be ASC or DESC.")] = None, page : Annotated[Optional[StrictStr], Field(description="This field accepts the page number to be returned. The acceptable values are 0-N.  This field works with size field such that total number of records/size of each page = number of pages(N).  This field can then give a particular page.")] = None, parent_customer_hash_id : Annotated[Optional[StrictStr], Field(description="This field contains the unique parent customer identifier generated at the time of customer creation.")] = None, size : Annotated[Optional[StrictStr], Field(description="This field accepts the number of elements per page.")] = None, tag_key : Annotated[Optional[StrictStr], Field(description="This parameter can filter the customers, based on the exact value of tagKey defined against customers. This can be used as an independent search parameter.")] = None, tag_value : Annotated[Optional[StrictStr], Field(description="This parameter can filter the customers, based on the approximating value of tagValue(that may be mapped for a tagKey defined against customers). This can be used as an independent search parameter.")] = None, x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> PaginatedResponseDTOCustomerDetailsResponseV2DTO:  # noqa: E501
        """Get Paginated Customer By Client And Optional Search Parameters.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.customer_list_v3(client_hash_id, business_registration_number, customer_type, email, mobile, order, page, parent_customer_hash_id, size, tag_key, tag_value, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param business_registration_number: This field accepts the business registration number of corporate customer.
        :type business_registration_number: str
        :param customer_type: This field accepts the type of customer.
        :type customer_type: str
        :param email: This field accepts the email ID of the customer.
        :type email: str
        :param mobile: This field accepts the mobile number of a customer without the country code.
        :type mobile: str
        :param order: This field accepts the order which can be ASC or DESC.
        :type order: str
        :param page: This field accepts the page number to be returned. The acceptable values are 0-N.  This field works with size field such that total number of records/size of each page = number of pages(N).  This field can then give a particular page.
        :type page: str
        :param parent_customer_hash_id: This field contains the unique parent customer identifier generated at the time of customer creation.
        :type parent_customer_hash_id: str
        :param size: This field accepts the number of elements per page.
        :type size: str
        :param tag_key: This parameter can filter the customers, based on the exact value of tagKey defined against customers. This can be used as an independent search parameter.
        :type tag_key: str
        :param tag_value: This parameter can filter the customers, based on the approximating value of tagValue(that may be mapped for a tagKey defined against customers). This can be used as an independent search parameter.
        :type tag_value: str
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PaginatedResponseDTOCustomerDetailsResponseV2DTO
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the customer_list_v3_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.customer_list_v3_with_http_info(client_hash_id, business_registration_number, customer_type, email, mobile, order, page, parent_customer_hash_id, size, tag_key, tag_value, x_request_id, **kwargs)  # noqa: E501

    @validate_arguments
    def customer_list_v3_with_http_info(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], business_registration_number : Annotated[Optional[StrictStr], Field(description="This field accepts the business registration number of corporate customer.")] = None, customer_type : Annotated[Optional[StrictStr], Field(description="This field accepts the type of customer.")] = None, email : Annotated[Optional[StrictStr], Field(description="This field accepts the email ID of the customer.")] = None, mobile : Annotated[Optional[StrictStr], Field(description="This field accepts the mobile number of a customer without the country code.")] = None, order : Annotated[Optional[StrictStr], Field(description="This field accepts the order which can be ASC or DESC.")] = None, page : Annotated[Optional[StrictStr], Field(description="This field accepts the page number to be returned. The acceptable values are 0-N.  This field works with size field such that total number of records/size of each page = number of pages(N).  This field can then give a particular page.")] = None, parent_customer_hash_id : Annotated[Optional[StrictStr], Field(description="This field contains the unique parent customer identifier generated at the time of customer creation.")] = None, size : Annotated[Optional[StrictStr], Field(description="This field accepts the number of elements per page.")] = None, tag_key : Annotated[Optional[StrictStr], Field(description="This parameter can filter the customers, based on the exact value of tagKey defined against customers. This can be used as an independent search parameter.")] = None, tag_value : Annotated[Optional[StrictStr], Field(description="This parameter can filter the customers, based on the approximating value of tagValue(that may be mapped for a tagKey defined against customers). This can be used as an independent search parameter.")] = None, x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Paginated Customer By Client And Optional Search Parameters.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.customer_list_v3_with_http_info(client_hash_id, business_registration_number, customer_type, email, mobile, order, page, parent_customer_hash_id, size, tag_key, tag_value, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param business_registration_number: This field accepts the business registration number of corporate customer.
        :type business_registration_number: str
        :param customer_type: This field accepts the type of customer.
        :type customer_type: str
        :param email: This field accepts the email ID of the customer.
        :type email: str
        :param mobile: This field accepts the mobile number of a customer without the country code.
        :type mobile: str
        :param order: This field accepts the order which can be ASC or DESC.
        :type order: str
        :param page: This field accepts the page number to be returned. The acceptable values are 0-N.  This field works with size field such that total number of records/size of each page = number of pages(N).  This field can then give a particular page.
        :type page: str
        :param parent_customer_hash_id: This field contains the unique parent customer identifier generated at the time of customer creation.
        :type parent_customer_hash_id: str
        :param size: This field accepts the number of elements per page.
        :type size: str
        :param tag_key: This parameter can filter the customers, based on the exact value of tagKey defined against customers. This can be used as an independent search parameter.
        :type tag_key: str
        :param tag_value: This parameter can filter the customers, based on the approximating value of tagValue(that may be mapped for a tagKey defined against customers). This can be used as an independent search parameter.
        :type tag_value: str
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PaginatedResponseDTOCustomerDetailsResponseV2DTO, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'client_hash_id',
            'business_registration_number',
            'customer_type',
            'email',
            'mobile',
            'order',
            'page',
            'parent_customer_hash_id',
            'size',
            'tag_key',
            'tag_value',
            'x_request_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method customer_list_v3" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['client_hash_id']:
            _path_params['clientHashId'] = _params['client_hash_id']


        # process the query parameters
        _query_params = []
        if _params.get('business_registration_number') is not None:  # noqa: E501
            _query_params.append(('businessRegistrationNumber', _params['business_registration_number']))

        if _params.get('customer_type') is not None:  # noqa: E501
            _query_params.append(('customerType', _params['customer_type']))

        if _params.get('email') is not None:  # noqa: E501
            _query_params.append(('email', _params['email']))

        if _params.get('mobile') is not None:  # noqa: E501
            _query_params.append(('mobile', _params['mobile']))

        if _params.get('order') is not None:  # noqa: E501
            _query_params.append(('order', _params['order']))

        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('parent_customer_hash_id') is not None:  # noqa: E501
            _query_params.append(('parentCustomerHashId', _params['parent_customer_hash_id']))

        if _params.get('size') is not None:  # noqa: E501
            _query_params.append(('size', _params['size']))

        if _params.get('tag_key') is not None:  # noqa: E501
            _query_params.append(('tagKey', _params['tag_key']))

        if _params.get('tag_value') is not None:  # noqa: E501
            _query_params.append(('tagValue', _params['tag_value']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_request_id']:
            _header_params['x-request-id'] = _params['x_request_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {
            '200': "PaginatedResponseDTOCustomerDetailsResponseV2DTO",
            '400': "CustomerApiError",
            '401': "str",
            '403': "str",
            '404': "CustomerApiError",
            '500': "CustomerApiError",
        }

        return self.api_client.call_api(
            '/api/v3/client/{clientHashId}/customers', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def manage_customer_tags(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated during customer creation.")], customer_client_tags_request_dto : Annotated[CustomerClientTagsRequestDTO, Field(..., description="tags")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> CustomerClientTagsResponseDTO:  # noqa: E501
        """Manage Customer Tags  # noqa: E501

        This API allows you to add, update, and delete customer tags  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.manage_customer_tags(client_hash_id, customer_hash_id, customer_client_tags_request_dto, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated during customer creation. (required)
        :type customer_hash_id: str
        :param customer_client_tags_request_dto: tags (required)
        :type customer_client_tags_request_dto: CustomerClientTagsRequestDTO
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CustomerClientTagsResponseDTO
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the manage_customer_tags_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.manage_customer_tags_with_http_info(client_hash_id, customer_hash_id, customer_client_tags_request_dto, x_request_id, **kwargs)  # noqa: E501

    @validate_arguments
    def manage_customer_tags_with_http_info(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated during customer creation.")], customer_client_tags_request_dto : Annotated[CustomerClientTagsRequestDTO, Field(..., description="tags")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Manage Customer Tags  # noqa: E501

        This API allows you to add, update, and delete customer tags  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.manage_customer_tags_with_http_info(client_hash_id, customer_hash_id, customer_client_tags_request_dto, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated during customer creation. (required)
        :type customer_hash_id: str
        :param customer_client_tags_request_dto: tags (required)
        :type customer_client_tags_request_dto: CustomerClientTagsRequestDTO
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CustomerClientTagsResponseDTO, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'client_hash_id',
            'customer_hash_id',
            'customer_client_tags_request_dto',
            'x_request_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method manage_customer_tags" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['client_hash_id']:
            _path_params['clientHashId'] = _params['client_hash_id']

        if _params['customer_hash_id']:
            _path_params['customerHashId'] = _params['customer_hash_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_request_id']:
            _header_params['x-request-id'] = _params['x_request_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['customer_client_tags_request_dto'] is not None:
            _body_params = _params['customer_client_tags_request_dto']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {
            '200': "CustomerClientTagsResponseDTO",
            '400': "CustomerApiError",
            '401': "str",
            '403': "str",
            '404': "CustomerApiError",
            '500': "CustomerApiError",
        }

        return self.api_client.call_api(
            '/api/v1/client/{clientHashId}/customer/{customerHashId}/tags', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
