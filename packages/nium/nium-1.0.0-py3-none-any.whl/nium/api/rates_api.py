# coding: utf-8

"""
    NIUM Platform

    NIUM Platform

    Contact: experience@nium.com
    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from datetime import datetime

from pydantic import Field, StrictStr, constr

from typing import Optional

from nium.models.exchange_rate_v2_response_dto import ExchangeRateV2ResponseDto
from nium.models.exchange_rates_get_response import ExchangeRatesGetResponse
from nium.models.window import Window

# from nium.api_client import ApiClient
import nium.api_client
from nium.api_response import ApiResponse
from nium.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class RatesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = nium.api_client.ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def aggregated_exchange_rates(self, source_currency_code : Annotated[constr(strict=True, max_length=3, min_length=3), Field(..., description="This field contains the 3-letter [currency-and-country-codes](https://docs.nium.com/apis/docs/currency-and-country-codes).")], destination_currency_code : Annotated[constr(strict=True, max_length=3, min_length=3), Field(..., description="This field contains the 3-letter [currency-and-country-codes](https://docs.nium.com/apis/docs/currency-and-country-codes).")], authorization : Optional[StrictStr] = None, csrf_token : Optional[StrictStr] = None, start : Annotated[Optional[datetime], Field(description="The start timestamp used to filter the aggregated time series. Must be in the format 'yyyy-mm-ddTHH:MM:SSZ'.")] = None, end : Annotated[Optional[datetime], Field(description="The end timestamp used to filter the aggregated time series. Must be in the format 'yyyy-mm-ddTHH:MM:SSZ'.")] = None, window : Annotated[Optional[Window], Field(description="Specifies the field by which the results should be grouped.")] = None, x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> ExchangeRatesGetResponse:  # noqa: E501
        """Fetch historic aggregate exchange rates  # noqa: E501

        This API will retrieve aggregated time series of historical exchange rate.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.aggregated_exchange_rates(source_currency_code, destination_currency_code, authorization, csrf_token, start, end, window, x_request_id, async_req=True)
        >>> result = thread.get()

        :param source_currency_code: This field contains the 3-letter [currency-and-country-codes](https://docs.nium.com/apis/docs/currency-and-country-codes). (required)
        :type source_currency_code: str
        :param destination_currency_code: This field contains the 3-letter [currency-and-country-codes](https://docs.nium.com/apis/docs/currency-and-country-codes). (required)
        :type destination_currency_code: str
        :param authorization:
        :type authorization: str
        :param csrf_token:
        :type csrf_token: str
        :param start: The start timestamp used to filter the aggregated time series. Must be in the format 'yyyy-mm-ddTHH:MM:SSZ'.
        :type start: datetime
        :param end: The end timestamp used to filter the aggregated time series. Must be in the format 'yyyy-mm-ddTHH:MM:SSZ'.
        :type end: datetime
        :param window: Specifies the field by which the results should be grouped.
        :type window: Window
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ExchangeRatesGetResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the aggregated_exchange_rates_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.aggregated_exchange_rates_with_http_info(source_currency_code, destination_currency_code, authorization, csrf_token, start, end, window, x_request_id, **kwargs)  # noqa: E501

    @validate_arguments
    def aggregated_exchange_rates_with_http_info(self, source_currency_code : Annotated[constr(strict=True, max_length=3, min_length=3), Field(..., description="This field contains the 3-letter [currency-and-country-codes](https://docs.nium.com/apis/docs/currency-and-country-codes).")], destination_currency_code : Annotated[constr(strict=True, max_length=3, min_length=3), Field(..., description="This field contains the 3-letter [currency-and-country-codes](https://docs.nium.com/apis/docs/currency-and-country-codes).")], authorization : Optional[StrictStr] = None, csrf_token : Optional[StrictStr] = None, start : Annotated[Optional[datetime], Field(description="The start timestamp used to filter the aggregated time series. Must be in the format 'yyyy-mm-ddTHH:MM:SSZ'.")] = None, end : Annotated[Optional[datetime], Field(description="The end timestamp used to filter the aggregated time series. Must be in the format 'yyyy-mm-ddTHH:MM:SSZ'.")] = None, window : Annotated[Optional[Window], Field(description="Specifies the field by which the results should be grouped.")] = None, x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Fetch historic aggregate exchange rates  # noqa: E501

        This API will retrieve aggregated time series of historical exchange rate.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.aggregated_exchange_rates_with_http_info(source_currency_code, destination_currency_code, authorization, csrf_token, start, end, window, x_request_id, async_req=True)
        >>> result = thread.get()

        :param source_currency_code: This field contains the 3-letter [currency-and-country-codes](https://docs.nium.com/apis/docs/currency-and-country-codes). (required)
        :type source_currency_code: str
        :param destination_currency_code: This field contains the 3-letter [currency-and-country-codes](https://docs.nium.com/apis/docs/currency-and-country-codes). (required)
        :type destination_currency_code: str
        :param authorization:
        :type authorization: str
        :param csrf_token:
        :type csrf_token: str
        :param start: The start timestamp used to filter the aggregated time series. Must be in the format 'yyyy-mm-ddTHH:MM:SSZ'.
        :type start: datetime
        :param end: The end timestamp used to filter the aggregated time series. Must be in the format 'yyyy-mm-ddTHH:MM:SSZ'.
        :type end: datetime
        :param window: Specifies the field by which the results should be grouped.
        :type window: Window
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ExchangeRatesGetResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'source_currency_code',
            'destination_currency_code',
            'authorization',
            'csrf_token',
            'start',
            'end',
            'window',
            'x_request_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method aggregated_exchange_rates" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('source_currency_code') is not None:  # noqa: E501
            _query_params.append(('sourceCurrencyCode', _params['source_currency_code']))

        if _params.get('destination_currency_code') is not None:  # noqa: E501
            _query_params.append(('destinationCurrencyCode', _params['destination_currency_code']))

        if _params.get('start') is not None:  # noqa: E501
            if isinstance(_params['start'], datetime):
                _query_params.append(('start', _params['start'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('start', _params['start']))

        if _params.get('end') is not None:  # noqa: E501
            if isinstance(_params['end'], datetime):
                _query_params.append(('end', _params['end'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('end', _params['end']))

        if _params.get('window') is not None:  # noqa: E501
            _query_params.append(('window', _params['window'].value))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['authorization']:
            _header_params['Authorization'] = _params['authorization']

        if _params['csrf_token']:
            _header_params['csrf_token'] = _params['csrf_token']

        if _params['x_request_id']:
            _header_params['x-request-id'] = _params['x_request_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {
            '200': "ExchangeRatesGetResponse",
            '400': "ErrorResponse400",
            '401': "ErrorResponse401",
            '403': "ErrorResponse403",
            '500': "ErrorResponse500",
        }

        return self.api_client.call_api(
            '/api/v1/exchangeRates/aggregate', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def exchange_rate_v2(self, source_currency_code : Annotated[constr(strict=True, max_length=3, min_length=3), Field(..., description="This field contains the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the source amount.")], destination_currency_code : Annotated[constr(strict=True, max_length=3, min_length=3), Field(..., description="This field contains the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the destination amount.")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> ExchangeRateV2ResponseDto:  # noqa: E501
        """Exchange Rate V2  # noqa: E501

        This API fetches the interbank FX rate for a currency pair. Please note that the rate provided does not include the Nium markup.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.exchange_rate_v2(source_currency_code, destination_currency_code, x_request_id, async_req=True)
        >>> result = thread.get()

        :param source_currency_code: This field contains the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the source amount. (required)
        :type source_currency_code: str
        :param destination_currency_code: This field contains the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the destination amount. (required)
        :type destination_currency_code: str
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ExchangeRateV2ResponseDto
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the exchange_rate_v2_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.exchange_rate_v2_with_http_info(source_currency_code, destination_currency_code, x_request_id, **kwargs)  # noqa: E501

    @validate_arguments
    def exchange_rate_v2_with_http_info(self, source_currency_code : Annotated[constr(strict=True, max_length=3, min_length=3), Field(..., description="This field contains the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the source amount.")], destination_currency_code : Annotated[constr(strict=True, max_length=3, min_length=3), Field(..., description="This field contains the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the destination amount.")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Exchange Rate V2  # noqa: E501

        This API fetches the interbank FX rate for a currency pair. Please note that the rate provided does not include the Nium markup.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.exchange_rate_v2_with_http_info(source_currency_code, destination_currency_code, x_request_id, async_req=True)
        >>> result = thread.get()

        :param source_currency_code: This field contains the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the source amount. (required)
        :type source_currency_code: str
        :param destination_currency_code: This field contains the 3-letter [ISO-4217 currency code](https://www.iso.org/iso-4217-currency-codes.html) for the destination amount. (required)
        :type destination_currency_code: str
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ExchangeRateV2ResponseDto, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'source_currency_code',
            'destination_currency_code',
            'x_request_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method exchange_rate_v2" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('source_currency_code') is not None:  # noqa: E501
            _query_params.append(('sourceCurrencyCode', _params['source_currency_code']))

        if _params.get('destination_currency_code') is not None:  # noqa: E501
            _query_params.append(('destinationCurrencyCode', _params['destination_currency_code']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_request_id']:
            _header_params['x-request-id'] = _params['x_request_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {
            '200': "ExchangeRateV2ResponseDto",
            '401': None,
            '403': None,
            '404': None,
        }

        return self.api_client.call_api(
            '/api/v2/exchangeRate', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
