# coding: utf-8

"""
    NIUM Platform

    NIUM Platform

    Contact: experience@nium.com
    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictInt, StrictStr

from typing import Optional

from nium.models.transaction_client_tags_request_dto import TransactionClientTagsRequestDTO
from nium.models.transaction_client_tags_response_dto import TransactionClientTagsResponseDTO
from nium.models.transactions_business_dto import TransactionsBusinessDTO
from nium.models.transactions_location_dto import TransactionsLocationDTO
from nium.models.transactions_receipt_dto import TransactionsReceiptDTO
from nium.models.wallet_api_error import WalletApiError
from nium.models.wallet_transactions_response_dto import WalletTransactionsResponseDTO

# from nium.api_client import ApiClient
import nium.api_client
from nium.api_response import ApiResponse
from nium.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class CustomerWalletTransactionsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = nium.api_client.ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def download_transaction_receipt(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], transaction_id : Annotated[StrictStr, Field(..., description="Transaction Id is NIUM generated 36 character UUID which is unique, per transaction.")], wallet_hash_id : Annotated[StrictStr, Field(..., description="Unique wallet identifier generated simultaneously with customer creation.")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> TransactionsReceiptDTO:  # noqa: E501
        """Download Transaction Receipt  # noqa: E501

        This API allows you to download a receipt against each transaction.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.download_transaction_receipt(client_hash_id, customer_hash_id, transaction_id, wallet_hash_id, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param transaction_id: Transaction Id is NIUM generated 36 character UUID which is unique, per transaction. (required)
        :type transaction_id: str
        :param wallet_hash_id: Unique wallet identifier generated simultaneously with customer creation. (required)
        :type wallet_hash_id: str
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TransactionsReceiptDTO
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the download_transaction_receipt_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.download_transaction_receipt_with_http_info(client_hash_id, customer_hash_id, transaction_id, wallet_hash_id, x_request_id, **kwargs)  # noqa: E501

    @validate_arguments
    def download_transaction_receipt_with_http_info(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], transaction_id : Annotated[StrictStr, Field(..., description="Transaction Id is NIUM generated 36 character UUID which is unique, per transaction.")], wallet_hash_id : Annotated[StrictStr, Field(..., description="Unique wallet identifier generated simultaneously with customer creation.")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Download Transaction Receipt  # noqa: E501

        This API allows you to download a receipt against each transaction.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.download_transaction_receipt_with_http_info(client_hash_id, customer_hash_id, transaction_id, wallet_hash_id, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param transaction_id: Transaction Id is NIUM generated 36 character UUID which is unique, per transaction. (required)
        :type transaction_id: str
        :param wallet_hash_id: Unique wallet identifier generated simultaneously with customer creation. (required)
        :type wallet_hash_id: str
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TransactionsReceiptDTO, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'client_hash_id',
            'customer_hash_id',
            'transaction_id',
            'wallet_hash_id',
            'x_request_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_transaction_receipt" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['client_hash_id']:
            _path_params['clientHashId'] = _params['client_hash_id']

        if _params['customer_hash_id']:
            _path_params['customerHashId'] = _params['customer_hash_id']

        if _params['transaction_id']:
            _path_params['transactionId'] = _params['transaction_id']

        if _params['wallet_hash_id']:
            _path_params['walletHashId'] = _params['wallet_hash_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_request_id']:
            _header_params['x-request-id'] = _params['x_request_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {
            '200': "TransactionsReceiptDTO",
            '400': "WalletApiError",
            '401': "str",
            '403': "str",
            '404': "WalletApiError",
            '500': "WalletApiError",
        }

        return self.api_client.call_api(
            '/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/transactions/{transactionId}/receipt', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def manage_transaction_tags(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], transaction_id : Annotated[StrictStr, Field(..., description="Unique transaction Identifier generated and shared before API handshake.")], wallet_hash_id : Annotated[StrictStr, Field(..., description="Unique wallet identifier generated simultaneously with customer creation.")], transaction_client_tags_request_dto : Annotated[TransactionClientTagsRequestDTO, Field(..., description="tags")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> TransactionClientTagsResponseDTO:  # noqa: E501
        """Manage Transaction Tags  # noqa: E501

        This API allows you to add, update, and delete transaction tags.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.manage_transaction_tags(client_hash_id, customer_hash_id, transaction_id, wallet_hash_id, transaction_client_tags_request_dto, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param transaction_id: Unique transaction Identifier generated and shared before API handshake. (required)
        :type transaction_id: str
        :param wallet_hash_id: Unique wallet identifier generated simultaneously with customer creation. (required)
        :type wallet_hash_id: str
        :param transaction_client_tags_request_dto: tags (required)
        :type transaction_client_tags_request_dto: TransactionClientTagsRequestDTO
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TransactionClientTagsResponseDTO
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the manage_transaction_tags_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.manage_transaction_tags_with_http_info(client_hash_id, customer_hash_id, transaction_id, wallet_hash_id, transaction_client_tags_request_dto, x_request_id, **kwargs)  # noqa: E501

    @validate_arguments
    def manage_transaction_tags_with_http_info(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], transaction_id : Annotated[StrictStr, Field(..., description="Unique transaction Identifier generated and shared before API handshake.")], wallet_hash_id : Annotated[StrictStr, Field(..., description="Unique wallet identifier generated simultaneously with customer creation.")], transaction_client_tags_request_dto : Annotated[TransactionClientTagsRequestDTO, Field(..., description="tags")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Manage Transaction Tags  # noqa: E501

        This API allows you to add, update, and delete transaction tags.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.manage_transaction_tags_with_http_info(client_hash_id, customer_hash_id, transaction_id, wallet_hash_id, transaction_client_tags_request_dto, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param transaction_id: Unique transaction Identifier generated and shared before API handshake. (required)
        :type transaction_id: str
        :param wallet_hash_id: Unique wallet identifier generated simultaneously with customer creation. (required)
        :type wallet_hash_id: str
        :param transaction_client_tags_request_dto: tags (required)
        :type transaction_client_tags_request_dto: TransactionClientTagsRequestDTO
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TransactionClientTagsResponseDTO, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'client_hash_id',
            'customer_hash_id',
            'transaction_id',
            'wallet_hash_id',
            'transaction_client_tags_request_dto',
            'x_request_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method manage_transaction_tags" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['client_hash_id']:
            _path_params['clientHashId'] = _params['client_hash_id']

        if _params['customer_hash_id']:
            _path_params['customerHashId'] = _params['customer_hash_id']

        if _params['transaction_id']:
            _path_params['transactionId'] = _params['transaction_id']

        if _params['wallet_hash_id']:
            _path_params['walletHashId'] = _params['wallet_hash_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_request_id']:
            _header_params['x-request-id'] = _params['x_request_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['transaction_client_tags_request_dto'] is not None:
            _body_params = _params['transaction_client_tags_request_dto']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {
            '200': "TransactionClientTagsResponseDTO",
            '400': "WalletApiError",
            '401': "str",
            '403': "str",
            '404': "WalletApiError",
            '500': "WalletApiError",
        }

        return self.api_client.call_api(
            '/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/transactions/{transactionId}/tags', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def transaction_geo_tagging(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], transaction_id : Annotated[StrictStr, Field(..., description="Transaction Id is NIUM generated 36 character UUID which is unique, per transaction.")], wallet_hash_id : Annotated[StrictStr, Field(..., description="Unique wallet identifier generated simultaneously with customer creation.")], transactions_location_dto : Annotated[TransactionsLocationDTO, Field(..., description="transactionsLocationDTO")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> WalletApiError:  # noqa: E501
        """Transaction Geo-Tagging  # noqa: E501

        This API allows you to update a transaction with merchant location.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transaction_geo_tagging(client_hash_id, customer_hash_id, transaction_id, wallet_hash_id, transactions_location_dto, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param transaction_id: Transaction Id is NIUM generated 36 character UUID which is unique, per transaction. (required)
        :type transaction_id: str
        :param wallet_hash_id: Unique wallet identifier generated simultaneously with customer creation. (required)
        :type wallet_hash_id: str
        :param transactions_location_dto: transactionsLocationDTO (required)
        :type transactions_location_dto: TransactionsLocationDTO
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: WalletApiError
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the transaction_geo_tagging_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.transaction_geo_tagging_with_http_info(client_hash_id, customer_hash_id, transaction_id, wallet_hash_id, transactions_location_dto, x_request_id, **kwargs)  # noqa: E501

    @validate_arguments
    def transaction_geo_tagging_with_http_info(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], transaction_id : Annotated[StrictStr, Field(..., description="Transaction Id is NIUM generated 36 character UUID which is unique, per transaction.")], wallet_hash_id : Annotated[StrictStr, Field(..., description="Unique wallet identifier generated simultaneously with customer creation.")], transactions_location_dto : Annotated[TransactionsLocationDTO, Field(..., description="transactionsLocationDTO")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Transaction Geo-Tagging  # noqa: E501

        This API allows you to update a transaction with merchant location.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transaction_geo_tagging_with_http_info(client_hash_id, customer_hash_id, transaction_id, wallet_hash_id, transactions_location_dto, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param transaction_id: Transaction Id is NIUM generated 36 character UUID which is unique, per transaction. (required)
        :type transaction_id: str
        :param wallet_hash_id: Unique wallet identifier generated simultaneously with customer creation. (required)
        :type wallet_hash_id: str
        :param transactions_location_dto: transactionsLocationDTO (required)
        :type transactions_location_dto: TransactionsLocationDTO
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(WalletApiError, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'client_hash_id',
            'customer_hash_id',
            'transaction_id',
            'wallet_hash_id',
            'transactions_location_dto',
            'x_request_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transaction_geo_tagging" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['client_hash_id']:
            _path_params['clientHashId'] = _params['client_hash_id']

        if _params['customer_hash_id']:
            _path_params['customerHashId'] = _params['customer_hash_id']

        if _params['transaction_id']:
            _path_params['transactionId'] = _params['transaction_id']

        if _params['wallet_hash_id']:
            _path_params['walletHashId'] = _params['wallet_hash_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_request_id']:
            _header_params['x-request-id'] = _params['x_request_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['transactions_location_dto'] is not None:
            _body_params = _params['transactions_location_dto']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {
            '200': "WalletApiError",
            '400': "WalletApiError",
            '401': "str",
            '403': "str",
            '404': "WalletApiError",
            '500': "WalletApiError",
        }

        return self.api_client.call_api(
            '/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/transactions/{transactionId}/location', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def transactions(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], wallet_hash_id : Annotated[StrictStr, Field(..., description="Unique wallet identifier generated simultaneously with customer creation.")], auth_code : Annotated[Optional[StrictStr], Field(description="This parameter can be used to filter the transactions based on the authorization code. In case of fund wallet transactions you can provide the systemReferenceNumber as value.")] = None, auth_currency : Annotated[Optional[StrictStr], Field(description="This parameter can filter the transactions based on auth currency and accepts 3-letter [ISO-4217 transaction currency code](https://docs.nium.com/apis/docs/currency-and-country-codes).")] = None, business_transaction : Annotated[Optional[StrictStr], Field(description="This parameter can filter the transactions based on businessTransaction flag.")] = None, card_hash_id : Annotated[Optional[StrictStr], Field(description="This field can apply the filter based on the unique card identifier generated during new/add-on card issuance.")] = None, child_customer_hash_id : Annotated[Optional[StrictStr], Field(description="This field contains the unique child customer identifier generated when new child customer created.")] = None, end_date : Annotated[Optional[StrictStr], Field(description="End date for fetching the transaction details. The format for endDate is YYYY-MM-DD.")] = None, mcc : Annotated[Optional[StrictStr], Field(description="This parameter can filter the transactions based on 4-digit Merchant Category Codes.")] = None, merchant_categories : Annotated[Optional[StrictStr], Field(description="This parameter describes the merchant's type of business product or service, also known as the Merchant Category Code (MCC) such as Airlines, Restaurants etc.")] = None, merchant_city : Annotated[Optional[StrictStr], Field(description="This parameter can filter the transactions based on the merchant city field.")] = None, merchant_countries : Annotated[Optional[StrictStr], Field(description="This parameter can filter the transactions based on comma-separated list of 2-letter ISO merchant countries.")] = None, merchant_country : Annotated[Optional[StrictStr], Field(description="This parameter can filter the transactions based on the merchant country field.")] = None, merchant_name : Annotated[Optional[StrictStr], Field(description="This parameter can filter the transactions based on the merchant name field.")] = None, order : Annotated[Optional[StrictStr], Field(description="The sort order for the results.")] = None, page : Annotated[Optional[StrictInt], Field(description="This API may have lot of data in response and supports pagination. Entire response data is divided into pages with size as the upper limit on the number of data. Integer values from 0 onwards are acceptable.\\nDefault page is 0.")] = None, payment_instrument_hash_id : Annotated[Optional[StrictStr], Field(description="This parameter can filter the transactions based on comma-separated paymentInstrumentHashId.")] = None, var_property : Annotated[Optional[StrictStr], Field(description="Property")] = None, settlement_date : Annotated[Optional[StrictStr], Field(description="This parameter can filter the transactions based on the settlement date of the transaction in format yyyyMMdd.")] = None, settlement_status : Annotated[Optional[StrictStr], Field(description="This parameter can filter the transactions based on settlement status. The detailed list of possible values is available in the response of this API.")] = None, size : Annotated[Optional[StrictInt], Field(description="This will decide the number of elements per page. Typical values can be 1-20.")] = None, start_date : Annotated[Optional[StrictStr], Field(description="From date for fetching the transaction details. The format for startDate is YYYY-MM-DD.")] = None, status : Annotated[Optional[StrictStr], Field(description="This parameter can filter the transactions based on status. The detailed list of possible values is available in the response of this API.")] = None, system_reference_number : Annotated[Optional[StrictStr], Field(description="This parameter can be used to filter the transactions based on the systemReferenceNumber.")] = None, system_trace_audit_number : Annotated[Optional[StrictStr], Field(description="This parameter can filter the transactions based on systemTraceAuditNumber.")] = None, tag_key : Annotated[Optional[StrictStr], Field(description="This parameter can filter the transactions, based on the exact value of tagKey defined against transactions. This can be used as an independent search parameter.")] = None, tag_value : Annotated[Optional[StrictStr], Field(description="This parameter can filter the transactions, based on the approximating value of tagValue(that may be mapped for a tagKey defined against transactions). This can be used as an independent search parameter.")] = None, transaction_currency : Annotated[Optional[StrictStr], Field(description="This field contains the 3-letter [ISO-4217 transaction currency code](https://www.iso.org/iso-4217-currency-codes.html).")] = None, transaction_type : Annotated[Optional[StrictStr], Field(description="This field contains the transaction can be one of  the complete list of transactions mentioned in [Glossary of Transaction Types](https://docs.nium.com/baas/get-transactions#glossary-of-transaction-types).")] = None, transactions_labels_key : Annotated[Optional[StrictStr], Field(description="This parameter can filter the transactions based on transactionsLabelsKey.")] = None, transactions_labels_value : Annotated[Optional[StrictStr], Field(description="This parameter can filter the transactions based on transactionsLabelsValue.")] = None, x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> WalletTransactionsResponseDTO:  # noqa: E501
        """Transactions  # noqa: E501

        This API allows you to fetch transaction details for a customer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transactions(client_hash_id, customer_hash_id, wallet_hash_id, auth_code, auth_currency, business_transaction, card_hash_id, child_customer_hash_id, end_date, mcc, merchant_categories, merchant_city, merchant_countries, merchant_country, merchant_name, order, page, payment_instrument_hash_id, var_property, settlement_date, settlement_status, size, start_date, status, system_reference_number, system_trace_audit_number, tag_key, tag_value, transaction_currency, transaction_type, transactions_labels_key, transactions_labels_value, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param wallet_hash_id: Unique wallet identifier generated simultaneously with customer creation. (required)
        :type wallet_hash_id: str
        :param auth_code: This parameter can be used to filter the transactions based on the authorization code. In case of fund wallet transactions you can provide the systemReferenceNumber as value.
        :type auth_code: str
        :param auth_currency: This parameter can filter the transactions based on auth currency and accepts 3-letter [ISO-4217 transaction currency code](https://docs.nium.com/apis/docs/currency-and-country-codes).
        :type auth_currency: str
        :param business_transaction: This parameter can filter the transactions based on businessTransaction flag.
        :type business_transaction: str
        :param card_hash_id: This field can apply the filter based on the unique card identifier generated during new/add-on card issuance.
        :type card_hash_id: str
        :param child_customer_hash_id: This field contains the unique child customer identifier generated when new child customer created.
        :type child_customer_hash_id: str
        :param end_date: End date for fetching the transaction details. The format for endDate is YYYY-MM-DD.
        :type end_date: str
        :param mcc: This parameter can filter the transactions based on 4-digit Merchant Category Codes.
        :type mcc: str
        :param merchant_categories: This parameter describes the merchant's type of business product or service, also known as the Merchant Category Code (MCC) such as Airlines, Restaurants etc.
        :type merchant_categories: str
        :param merchant_city: This parameter can filter the transactions based on the merchant city field.
        :type merchant_city: str
        :param merchant_countries: This parameter can filter the transactions based on comma-separated list of 2-letter ISO merchant countries.
        :type merchant_countries: str
        :param merchant_country: This parameter can filter the transactions based on the merchant country field.
        :type merchant_country: str
        :param merchant_name: This parameter can filter the transactions based on the merchant name field.
        :type merchant_name: str
        :param order: The sort order for the results.
        :type order: str
        :param page: This API may have lot of data in response and supports pagination. Entire response data is divided into pages with size as the upper limit on the number of data. Integer values from 0 onwards are acceptable.\\nDefault page is 0.
        :type page: int
        :param payment_instrument_hash_id: This parameter can filter the transactions based on comma-separated paymentInstrumentHashId.
        :type payment_instrument_hash_id: str
        :param var_property: Property
        :type var_property: str
        :param settlement_date: This parameter can filter the transactions based on the settlement date of the transaction in format yyyyMMdd.
        :type settlement_date: str
        :param settlement_status: This parameter can filter the transactions based on settlement status. The detailed list of possible values is available in the response of this API.
        :type settlement_status: str
        :param size: This will decide the number of elements per page. Typical values can be 1-20.
        :type size: int
        :param start_date: From date for fetching the transaction details. The format for startDate is YYYY-MM-DD.
        :type start_date: str
        :param status: This parameter can filter the transactions based on status. The detailed list of possible values is available in the response of this API.
        :type status: str
        :param system_reference_number: This parameter can be used to filter the transactions based on the systemReferenceNumber.
        :type system_reference_number: str
        :param system_trace_audit_number: This parameter can filter the transactions based on systemTraceAuditNumber.
        :type system_trace_audit_number: str
        :param tag_key: This parameter can filter the transactions, based on the exact value of tagKey defined against transactions. This can be used as an independent search parameter.
        :type tag_key: str
        :param tag_value: This parameter can filter the transactions, based on the approximating value of tagValue(that may be mapped for a tagKey defined against transactions). This can be used as an independent search parameter.
        :type tag_value: str
        :param transaction_currency: This field contains the 3-letter [ISO-4217 transaction currency code](https://www.iso.org/iso-4217-currency-codes.html).
        :type transaction_currency: str
        :param transaction_type: This field contains the transaction can be one of  the complete list of transactions mentioned in [Glossary of Transaction Types](https://docs.nium.com/baas/get-transactions#glossary-of-transaction-types).
        :type transaction_type: str
        :param transactions_labels_key: This parameter can filter the transactions based on transactionsLabelsKey.
        :type transactions_labels_key: str
        :param transactions_labels_value: This parameter can filter the transactions based on transactionsLabelsValue.
        :type transactions_labels_value: str
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: WalletTransactionsResponseDTO
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the transactions_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.transactions_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, auth_code, auth_currency, business_transaction, card_hash_id, child_customer_hash_id, end_date, mcc, merchant_categories, merchant_city, merchant_countries, merchant_country, merchant_name, order, page, payment_instrument_hash_id, var_property, settlement_date, settlement_status, size, start_date, status, system_reference_number, system_trace_audit_number, tag_key, tag_value, transaction_currency, transaction_type, transactions_labels_key, transactions_labels_value, x_request_id, **kwargs)  # noqa: E501

    @validate_arguments
    def transactions_with_http_info(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], wallet_hash_id : Annotated[StrictStr, Field(..., description="Unique wallet identifier generated simultaneously with customer creation.")], auth_code : Annotated[Optional[StrictStr], Field(description="This parameter can be used to filter the transactions based on the authorization code. In case of fund wallet transactions you can provide the systemReferenceNumber as value.")] = None, auth_currency : Annotated[Optional[StrictStr], Field(description="This parameter can filter the transactions based on auth currency and accepts 3-letter [ISO-4217 transaction currency code](https://docs.nium.com/apis/docs/currency-and-country-codes).")] = None, business_transaction : Annotated[Optional[StrictStr], Field(description="This parameter can filter the transactions based on businessTransaction flag.")] = None, card_hash_id : Annotated[Optional[StrictStr], Field(description="This field can apply the filter based on the unique card identifier generated during new/add-on card issuance.")] = None, child_customer_hash_id : Annotated[Optional[StrictStr], Field(description="This field contains the unique child customer identifier generated when new child customer created.")] = None, end_date : Annotated[Optional[StrictStr], Field(description="End date for fetching the transaction details. The format for endDate is YYYY-MM-DD.")] = None, mcc : Annotated[Optional[StrictStr], Field(description="This parameter can filter the transactions based on 4-digit Merchant Category Codes.")] = None, merchant_categories : Annotated[Optional[StrictStr], Field(description="This parameter describes the merchant's type of business product or service, also known as the Merchant Category Code (MCC) such as Airlines, Restaurants etc.")] = None, merchant_city : Annotated[Optional[StrictStr], Field(description="This parameter can filter the transactions based on the merchant city field.")] = None, merchant_countries : Annotated[Optional[StrictStr], Field(description="This parameter can filter the transactions based on comma-separated list of 2-letter ISO merchant countries.")] = None, merchant_country : Annotated[Optional[StrictStr], Field(description="This parameter can filter the transactions based on the merchant country field.")] = None, merchant_name : Annotated[Optional[StrictStr], Field(description="This parameter can filter the transactions based on the merchant name field.")] = None, order : Annotated[Optional[StrictStr], Field(description="The sort order for the results.")] = None, page : Annotated[Optional[StrictInt], Field(description="This API may have lot of data in response and supports pagination. Entire response data is divided into pages with size as the upper limit on the number of data. Integer values from 0 onwards are acceptable.\\nDefault page is 0.")] = None, payment_instrument_hash_id : Annotated[Optional[StrictStr], Field(description="This parameter can filter the transactions based on comma-separated paymentInstrumentHashId.")] = None, var_property : Annotated[Optional[StrictStr], Field(description="Property")] = None, settlement_date : Annotated[Optional[StrictStr], Field(description="This parameter can filter the transactions based on the settlement date of the transaction in format yyyyMMdd.")] = None, settlement_status : Annotated[Optional[StrictStr], Field(description="This parameter can filter the transactions based on settlement status. The detailed list of possible values is available in the response of this API.")] = None, size : Annotated[Optional[StrictInt], Field(description="This will decide the number of elements per page. Typical values can be 1-20.")] = None, start_date : Annotated[Optional[StrictStr], Field(description="From date for fetching the transaction details. The format for startDate is YYYY-MM-DD.")] = None, status : Annotated[Optional[StrictStr], Field(description="This parameter can filter the transactions based on status. The detailed list of possible values is available in the response of this API.")] = None, system_reference_number : Annotated[Optional[StrictStr], Field(description="This parameter can be used to filter the transactions based on the systemReferenceNumber.")] = None, system_trace_audit_number : Annotated[Optional[StrictStr], Field(description="This parameter can filter the transactions based on systemTraceAuditNumber.")] = None, tag_key : Annotated[Optional[StrictStr], Field(description="This parameter can filter the transactions, based on the exact value of tagKey defined against transactions. This can be used as an independent search parameter.")] = None, tag_value : Annotated[Optional[StrictStr], Field(description="This parameter can filter the transactions, based on the approximating value of tagValue(that may be mapped for a tagKey defined against transactions). This can be used as an independent search parameter.")] = None, transaction_currency : Annotated[Optional[StrictStr], Field(description="This field contains the 3-letter [ISO-4217 transaction currency code](https://www.iso.org/iso-4217-currency-codes.html).")] = None, transaction_type : Annotated[Optional[StrictStr], Field(description="This field contains the transaction can be one of  the complete list of transactions mentioned in [Glossary of Transaction Types](https://docs.nium.com/baas/get-transactions#glossary-of-transaction-types).")] = None, transactions_labels_key : Annotated[Optional[StrictStr], Field(description="This parameter can filter the transactions based on transactionsLabelsKey.")] = None, transactions_labels_value : Annotated[Optional[StrictStr], Field(description="This parameter can filter the transactions based on transactionsLabelsValue.")] = None, x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Transactions  # noqa: E501

        This API allows you to fetch transaction details for a customer.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transactions_with_http_info(client_hash_id, customer_hash_id, wallet_hash_id, auth_code, auth_currency, business_transaction, card_hash_id, child_customer_hash_id, end_date, mcc, merchant_categories, merchant_city, merchant_countries, merchant_country, merchant_name, order, page, payment_instrument_hash_id, var_property, settlement_date, settlement_status, size, start_date, status, system_reference_number, system_trace_audit_number, tag_key, tag_value, transaction_currency, transaction_type, transactions_labels_key, transactions_labels_value, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param wallet_hash_id: Unique wallet identifier generated simultaneously with customer creation. (required)
        :type wallet_hash_id: str
        :param auth_code: This parameter can be used to filter the transactions based on the authorization code. In case of fund wallet transactions you can provide the systemReferenceNumber as value.
        :type auth_code: str
        :param auth_currency: This parameter can filter the transactions based on auth currency and accepts 3-letter [ISO-4217 transaction currency code](https://docs.nium.com/apis/docs/currency-and-country-codes).
        :type auth_currency: str
        :param business_transaction: This parameter can filter the transactions based on businessTransaction flag.
        :type business_transaction: str
        :param card_hash_id: This field can apply the filter based on the unique card identifier generated during new/add-on card issuance.
        :type card_hash_id: str
        :param child_customer_hash_id: This field contains the unique child customer identifier generated when new child customer created.
        :type child_customer_hash_id: str
        :param end_date: End date for fetching the transaction details. The format for endDate is YYYY-MM-DD.
        :type end_date: str
        :param mcc: This parameter can filter the transactions based on 4-digit Merchant Category Codes.
        :type mcc: str
        :param merchant_categories: This parameter describes the merchant's type of business product or service, also known as the Merchant Category Code (MCC) such as Airlines, Restaurants etc.
        :type merchant_categories: str
        :param merchant_city: This parameter can filter the transactions based on the merchant city field.
        :type merchant_city: str
        :param merchant_countries: This parameter can filter the transactions based on comma-separated list of 2-letter ISO merchant countries.
        :type merchant_countries: str
        :param merchant_country: This parameter can filter the transactions based on the merchant country field.
        :type merchant_country: str
        :param merchant_name: This parameter can filter the transactions based on the merchant name field.
        :type merchant_name: str
        :param order: The sort order for the results.
        :type order: str
        :param page: This API may have lot of data in response and supports pagination. Entire response data is divided into pages with size as the upper limit on the number of data. Integer values from 0 onwards are acceptable.\\nDefault page is 0.
        :type page: int
        :param payment_instrument_hash_id: This parameter can filter the transactions based on comma-separated paymentInstrumentHashId.
        :type payment_instrument_hash_id: str
        :param var_property: Property
        :type var_property: str
        :param settlement_date: This parameter can filter the transactions based on the settlement date of the transaction in format yyyyMMdd.
        :type settlement_date: str
        :param settlement_status: This parameter can filter the transactions based on settlement status. The detailed list of possible values is available in the response of this API.
        :type settlement_status: str
        :param size: This will decide the number of elements per page. Typical values can be 1-20.
        :type size: int
        :param start_date: From date for fetching the transaction details. The format for startDate is YYYY-MM-DD.
        :type start_date: str
        :param status: This parameter can filter the transactions based on status. The detailed list of possible values is available in the response of this API.
        :type status: str
        :param system_reference_number: This parameter can be used to filter the transactions based on the systemReferenceNumber.
        :type system_reference_number: str
        :param system_trace_audit_number: This parameter can filter the transactions based on systemTraceAuditNumber.
        :type system_trace_audit_number: str
        :param tag_key: This parameter can filter the transactions, based on the exact value of tagKey defined against transactions. This can be used as an independent search parameter.
        :type tag_key: str
        :param tag_value: This parameter can filter the transactions, based on the approximating value of tagValue(that may be mapped for a tagKey defined against transactions). This can be used as an independent search parameter.
        :type tag_value: str
        :param transaction_currency: This field contains the 3-letter [ISO-4217 transaction currency code](https://www.iso.org/iso-4217-currency-codes.html).
        :type transaction_currency: str
        :param transaction_type: This field contains the transaction can be one of  the complete list of transactions mentioned in [Glossary of Transaction Types](https://docs.nium.com/baas/get-transactions#glossary-of-transaction-types).
        :type transaction_type: str
        :param transactions_labels_key: This parameter can filter the transactions based on transactionsLabelsKey.
        :type transactions_labels_key: str
        :param transactions_labels_value: This parameter can filter the transactions based on transactionsLabelsValue.
        :type transactions_labels_value: str
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(WalletTransactionsResponseDTO, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'client_hash_id',
            'customer_hash_id',
            'wallet_hash_id',
            'auth_code',
            'auth_currency',
            'business_transaction',
            'card_hash_id',
            'child_customer_hash_id',
            'end_date',
            'mcc',
            'merchant_categories',
            'merchant_city',
            'merchant_countries',
            'merchant_country',
            'merchant_name',
            'order',
            'page',
            'payment_instrument_hash_id',
            'var_property',
            'settlement_date',
            'settlement_status',
            'size',
            'start_date',
            'status',
            'system_reference_number',
            'system_trace_audit_number',
            'tag_key',
            'tag_value',
            'transaction_currency',
            'transaction_type',
            'transactions_labels_key',
            'transactions_labels_value',
            'x_request_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transactions" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['client_hash_id']:
            _path_params['clientHashId'] = _params['client_hash_id']

        if _params['customer_hash_id']:
            _path_params['customerHashId'] = _params['customer_hash_id']

        if _params['wallet_hash_id']:
            _path_params['walletHashId'] = _params['wallet_hash_id']


        # process the query parameters
        _query_params = []
        if _params.get('auth_code') is not None:  # noqa: E501
            _query_params.append(('authCode', _params['auth_code']))

        if _params.get('auth_currency') is not None:  # noqa: E501
            _query_params.append(('authCurrency', _params['auth_currency']))

        if _params.get('business_transaction') is not None:  # noqa: E501
            _query_params.append(('businessTransaction', _params['business_transaction']))

        if _params.get('card_hash_id') is not None:  # noqa: E501
            _query_params.append(('cardHashId', _params['card_hash_id']))

        if _params.get('child_customer_hash_id') is not None:  # noqa: E501
            _query_params.append(('childCustomerHashId', _params['child_customer_hash_id']))

        if _params.get('end_date') is not None:  # noqa: E501
            _query_params.append(('endDate', _params['end_date']))

        if _params.get('mcc') is not None:  # noqa: E501
            _query_params.append(('mcc', _params['mcc']))

        if _params.get('merchant_categories') is not None:  # noqa: E501
            _query_params.append(('merchantCategories', _params['merchant_categories']))

        if _params.get('merchant_city') is not None:  # noqa: E501
            _query_params.append(('merchantCity', _params['merchant_city']))

        if _params.get('merchant_countries') is not None:  # noqa: E501
            _query_params.append(('merchantCountries', _params['merchant_countries']))

        if _params.get('merchant_country') is not None:  # noqa: E501
            _query_params.append(('merchantCountry', _params['merchant_country']))

        if _params.get('merchant_name') is not None:  # noqa: E501
            _query_params.append(('merchantName', _params['merchant_name']))

        if _params.get('order') is not None:  # noqa: E501
            _query_params.append(('order', _params['order']))

        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('payment_instrument_hash_id') is not None:  # noqa: E501
            _query_params.append(('paymentInstrumentHashId', _params['payment_instrument_hash_id']))

        if _params.get('var_property') is not None:  # noqa: E501
            _query_params.append(('property', _params['var_property']))

        if _params.get('settlement_date') is not None:  # noqa: E501
            _query_params.append(('settlementDate', _params['settlement_date']))

        if _params.get('settlement_status') is not None:  # noqa: E501
            _query_params.append(('settlementStatus', _params['settlement_status']))

        if _params.get('size') is not None:  # noqa: E501
            _query_params.append(('size', _params['size']))

        if _params.get('start_date') is not None:  # noqa: E501
            _query_params.append(('startDate', _params['start_date']))

        if _params.get('status') is not None:  # noqa: E501
            _query_params.append(('status', _params['status']))

        if _params.get('system_reference_number') is not None:  # noqa: E501
            _query_params.append(('systemReferenceNumber', _params['system_reference_number']))

        if _params.get('system_trace_audit_number') is not None:  # noqa: E501
            _query_params.append(('systemTraceAuditNumber', _params['system_trace_audit_number']))

        if _params.get('tag_key') is not None:  # noqa: E501
            _query_params.append(('tagKey', _params['tag_key']))

        if _params.get('tag_value') is not None:  # noqa: E501
            _query_params.append(('tagValue', _params['tag_value']))

        if _params.get('transaction_currency') is not None:  # noqa: E501
            _query_params.append(('transactionCurrency', _params['transaction_currency']))

        if _params.get('transaction_type') is not None:  # noqa: E501
            _query_params.append(('transactionType', _params['transaction_type']))

        if _params.get('transactions_labels_key') is not None:  # noqa: E501
            _query_params.append(('transactionsLabelsKey', _params['transactions_labels_key']))

        if _params.get('transactions_labels_value') is not None:  # noqa: E501
            _query_params.append(('transactionsLabelsValue', _params['transactions_labels_value']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_request_id']:
            _header_params['x-request-id'] = _params['x_request_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {
            '200': "WalletTransactionsResponseDTO",
            '400': "WalletApiError",
            '401': "str",
            '403': "str",
            '404': "WalletApiError",
            '500': "WalletApiError",
        }

        return self.api_client.call_api(
            '/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/transactions', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_business_transaction_flag(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], transaction_id : Annotated[StrictStr, Field(..., description="Transaction Id is NIUM generated 36 character UUID which is unique, per transaction.")], wallet_hash_id : Annotated[StrictStr, Field(..., description="Unique wallet identifier generated simultaneously with customer creation.")], transactions_business_dto : Annotated[TransactionsBusinessDTO, Field(..., description="transactionsBusinessDTO")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> WalletApiError:  # noqa: E501
        """Update Business Transaction Flag  # noqa: E501

        This API allows you to update a flag against each transaction signifying that the transaction is a business transaction.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_business_transaction_flag(client_hash_id, customer_hash_id, transaction_id, wallet_hash_id, transactions_business_dto, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param transaction_id: Transaction Id is NIUM generated 36 character UUID which is unique, per transaction. (required)
        :type transaction_id: str
        :param wallet_hash_id: Unique wallet identifier generated simultaneously with customer creation. (required)
        :type wallet_hash_id: str
        :param transactions_business_dto: transactionsBusinessDTO (required)
        :type transactions_business_dto: TransactionsBusinessDTO
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: WalletApiError
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_business_transaction_flag_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.update_business_transaction_flag_with_http_info(client_hash_id, customer_hash_id, transaction_id, wallet_hash_id, transactions_business_dto, x_request_id, **kwargs)  # noqa: E501

    @validate_arguments
    def update_business_transaction_flag_with_http_info(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], transaction_id : Annotated[StrictStr, Field(..., description="Transaction Id is NIUM generated 36 character UUID which is unique, per transaction.")], wallet_hash_id : Annotated[StrictStr, Field(..., description="Unique wallet identifier generated simultaneously with customer creation.")], transactions_business_dto : Annotated[TransactionsBusinessDTO, Field(..., description="transactionsBusinessDTO")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Business Transaction Flag  # noqa: E501

        This API allows you to update a flag against each transaction signifying that the transaction is a business transaction.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_business_transaction_flag_with_http_info(client_hash_id, customer_hash_id, transaction_id, wallet_hash_id, transactions_business_dto, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param transaction_id: Transaction Id is NIUM generated 36 character UUID which is unique, per transaction. (required)
        :type transaction_id: str
        :param wallet_hash_id: Unique wallet identifier generated simultaneously with customer creation. (required)
        :type wallet_hash_id: str
        :param transactions_business_dto: transactionsBusinessDTO (required)
        :type transactions_business_dto: TransactionsBusinessDTO
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(WalletApiError, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'client_hash_id',
            'customer_hash_id',
            'transaction_id',
            'wallet_hash_id',
            'transactions_business_dto',
            'x_request_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_business_transaction_flag" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['client_hash_id']:
            _path_params['clientHashId'] = _params['client_hash_id']

        if _params['customer_hash_id']:
            _path_params['customerHashId'] = _params['customer_hash_id']

        if _params['transaction_id']:
            _path_params['transactionId'] = _params['transaction_id']

        if _params['wallet_hash_id']:
            _path_params['walletHashId'] = _params['wallet_hash_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_request_id']:
            _header_params['x-request-id'] = _params['x_request_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['transactions_business_dto'] is not None:
            _body_params = _params['transactions_business_dto']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {
            '200': "WalletApiError",
            '400': "WalletApiError",
            '401': "str",
            '403': "str",
            '404': "WalletApiError",
            '500': "WalletApiError",
        }

        return self.api_client.call_api(
            '/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/transactions/{transactionId}/business', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def upload_transaction_receipt(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], transaction_id : Annotated[StrictStr, Field(..., description="Transaction Id is NIUM generated 36 character UUID which is unique, per transaction.")], wallet_hash_id : Annotated[StrictStr, Field(..., description="Unique wallet identifier generated simultaneously with customer creation.")], transactions_receipt_dto : Annotated[TransactionsReceiptDTO, Field(..., description="transactionReceipt")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> WalletApiError:  # noqa: E501
        """Upload Transaction Receipt  # noqa: E501

        This API allows you to upload a receipt against each transaction.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.upload_transaction_receipt(client_hash_id, customer_hash_id, transaction_id, wallet_hash_id, transactions_receipt_dto, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param transaction_id: Transaction Id is NIUM generated 36 character UUID which is unique, per transaction. (required)
        :type transaction_id: str
        :param wallet_hash_id: Unique wallet identifier generated simultaneously with customer creation. (required)
        :type wallet_hash_id: str
        :param transactions_receipt_dto: transactionReceipt (required)
        :type transactions_receipt_dto: TransactionsReceiptDTO
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: WalletApiError
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the upload_transaction_receipt_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.upload_transaction_receipt_with_http_info(client_hash_id, customer_hash_id, transaction_id, wallet_hash_id, transactions_receipt_dto, x_request_id, **kwargs)  # noqa: E501

    @validate_arguments
    def upload_transaction_receipt_with_http_info(self, client_hash_id : Annotated[StrictStr, Field(..., description="Unique client identifier generated and shared before API handshake.")], customer_hash_id : Annotated[StrictStr, Field(..., description="Unique customer identifier generated on customer creation.")], transaction_id : Annotated[StrictStr, Field(..., description="Transaction Id is NIUM generated 36 character UUID which is unique, per transaction.")], wallet_hash_id : Annotated[StrictStr, Field(..., description="Unique wallet identifier generated simultaneously with customer creation.")], transactions_receipt_dto : Annotated[TransactionsReceiptDTO, Field(..., description="transactionReceipt")], x_request_id : Annotated[Optional[StrictStr], Field(description="Enter a unique UUID value.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Upload Transaction Receipt  # noqa: E501

        This API allows you to upload a receipt against each transaction.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.upload_transaction_receipt_with_http_info(client_hash_id, customer_hash_id, transaction_id, wallet_hash_id, transactions_receipt_dto, x_request_id, async_req=True)
        >>> result = thread.get()

        :param client_hash_id: Unique client identifier generated and shared before API handshake. (required)
        :type client_hash_id: str
        :param customer_hash_id: Unique customer identifier generated on customer creation. (required)
        :type customer_hash_id: str
        :param transaction_id: Transaction Id is NIUM generated 36 character UUID which is unique, per transaction. (required)
        :type transaction_id: str
        :param wallet_hash_id: Unique wallet identifier generated simultaneously with customer creation. (required)
        :type wallet_hash_id: str
        :param transactions_receipt_dto: transactionReceipt (required)
        :type transactions_receipt_dto: TransactionsReceiptDTO
        :param x_request_id: Enter a unique UUID value.
        :type x_request_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(WalletApiError, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'client_hash_id',
            'customer_hash_id',
            'transaction_id',
            'wallet_hash_id',
            'transactions_receipt_dto',
            'x_request_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_transaction_receipt" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['client_hash_id']:
            _path_params['clientHashId'] = _params['client_hash_id']

        if _params['customer_hash_id']:
            _path_params['customerHashId'] = _params['customer_hash_id']

        if _params['transaction_id']:
            _path_params['transactionId'] = _params['transaction_id']

        if _params['wallet_hash_id']:
            _path_params['walletHashId'] = _params['wallet_hash_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['x_request_id']:
            _header_params['x-request-id'] = _params['x_request_id']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['transactions_receipt_dto'] is not None:
            _body_params = _params['transactions_receipt_dto']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['default']  # noqa: E501

        _response_types_map = {
            '200': "WalletApiError",
            '400': "WalletApiError",
            '401': "str",
            '403': "str",
            '404': "WalletApiError",
            '500': "WalletApiError",
        }

        return self.api_client.call_api(
            '/api/v1/client/{clientHashId}/customer/{customerHashId}/wallet/{walletHashId}/transactions/{transactionId}/receipt', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
