[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

# https://hatch.pypa.io/latest/config/metadata/
[tool.hatch.version]
source = "vcs"

# https://hatch.pypa.io/latest/config/build/
[tool.hatch.build.targets.wheel]
only-include = ["src"]
sources = ["src"]

# https://peps.python.org/pep-0621/
[project]
name = "careamics"
dynamic = ["version"]
description = "Toolbox for running N2V and friends."
readme = "README.md"
requires-python = ">=3.8"
license = { text = "BSD-3-Clause" }
authors = [
    { name = 'Igor Zubarev', email = 'igor.zubarev@fht.org' },
    { name = 'Joran Deschamps', email = 'joran.deschamps@fht.org' },
    { name = 'Vera Galinova', email = 'vera.galinova@fht.org' },
    { name = 'Mehdi Seifi', email = 'mehdi.seifi@fht.org' },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: BSD License",
    "Typing :: Typed",
]
dependencies = [
    'torch',
    'torchvision',
    'tifffile',
    'pyyaml',
    'pydantic>=2.0',
    'scikit-image',
    'bioimageio.core',
    'zarr',
]

[project.optional-dependencies]
# development dependencies and tooling
dev = ["pre-commit", "pytest", "pytest-cov"]

# for ci
test = ["pytest", "pytest-cov", "wandb"]

# notebooks
notebooks = [
    "jupyter",
    "careamics-portfolio",
    "itkwidgets",
    "torchsummary",
    "ipython",
    "wandb",
]

# all
all = [
    "pre-commit",
    "pytest",
    "pytest-cov",
    "wandb",
    "jupyter",
    "careamics-portfolio",
    "itkwidgets",
    "torchsummary",
    "ipython",
]

[project.urls]
homepage = "https://careamics.github.io/"
repository = "https://github.com/CAREamics/careamics"

# https://docs.astral.sh/ruff/
[tool.ruff]
line-length = 88
target-version = "py38"
src = ["src"]
select = [
    "E",    # style errors
    "W",    # style warnings
    "F",    # flakes
    "I",    # isort
    "UP",   # pyupgrade
    "C4",   # flake8-comprehensions
    "B",    # flake8-bugbear
    "A001", # flake8-builtins
    "RUF",  # ruff-specific rules
    "TCH",  # flake8-type-checking
    "TID",  # flake8-tidy-imports
]
ignore = [
    # version specific
    "UP006", # Replace typing.List by list, mandatory for py3.8
    "UP007", # Replace Union by |, mandatory for py3.9
]
ignore-init-module-imports = true
show-fixes = true

[tool.ruff.per-file-ignores]
"tests/*.py" = ["S"]

[tool.black]
line-length = 88

# https://mypy.readthedocs.io/en/stable/config_file.html
[tool.mypy]
files = "src/**/"
strict = false
allow_untyped_defs = false
allow_untyped_calls = false
disallow_any_generics = false
ignore_missing_imports = false

# https://docs.pytest.org/en/6.2.x/customize.html
[tool.pytest.ini_options]
minversion = "6.0"
testpaths = ["tests"]
filterwarnings = [
    # "error",
    # "ignore::UserWarning",
]
markers = ["gpu: mark tests as requiring gpu"]

# https://coverage.readthedocs.io/en/6.4/config.html
[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
    "@overload",
    "\\.\\.\\.",
    "except ImportError:",
    "raise NotImplementedError()",
    "except PackageNotFoundError:",
    "if torch.cuda.is_available():",
    "except UsageError as e:",
    "except ModuleNotFoundError:",
    "except KeyboardInterrupt:",
]

[tool.coverage.run]
source = ["careamics"]

# https://github.com/mgedmin/check-manifest#configuration
# add files that you want check-manifest to explicitly ignore here
# (files that are in the repo but shouldn't go in the package)
[tool.check-manifest]
ignore = [
    ".github_changelog_generator",
    ".pre-commit-config.yaml",
    ".ruff_cache/**/*",
    "tests/**/*",
]

# https://numpydoc.readthedocs.io/en/latest/format.html
[tool.numpydoc_validation]
checks = [
    "all",  # report on all checks, except the ones below
    "EX01", # No examples section found
    "SA01", # See Also section not found
    "ES01", # No extended summary found
]
exclude = [ # don't report on objects that match any of these regex
    "test_*",
]
