# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_trys.ipynb.

# %% auto 0
__all__ = ['repattern', 'nan', 'strtemplate', 'number', 'pathlike', 'ichain', 'iprod', 'ziplong', 'dict_keys', 'dict_values',
           'dict_items', 'moduletype', 'wrappertype', 'builtinfunctype', 'nonetype', 'np', 'npdatasource', 'npbool',
           'npmatrix', 'nparray', 'npnan', 'npNaN', 'npNAN', 'pd', 'pdna', 'pdindex', 'pdseries', 'pdcatindex',
           'pddataframe', 'sp', 'sparray', 'spmatrix', 'ptnan', 'ptdtype', 'ptdevice', 'ptmodule', 'ptdataset',
           'ptdataloader', 'pttensorbase', 'pttensor', 'ptinttensor', 'ptbooltensor', 'ptfloattensor', 'ptdatasets',
           'pttransforms', 'ptfunctional', 'pldatamodule', 'vidcap', 'image', 'anndata', 'mpl', 'plt', 'artist',
           'colormap', 'lscolormap', 'mplpatch', 'mplaxbase', 'mplaxes', 'sns', 'skestimator', 'PHATE', 'gtbase',
           'gtdata', 'bgraph', 'dgraph', 'lgraph', 'kgraph', 'tgraph', 'mgraph', 'klgraph', 'mlgraph', 'tlgraph']

# %% ../nbs/02_trys.ipynb 5
from importlib import import_module


# %% ../nbs/02_trys.ipynb 7
from types import ModuleType, MethodWrapperType, BuiltinFunctionType, NoneType
from typing import (Type, Union, Tuple, Callable, ForwardRef, Optional, TypeVar, ParamSpec, TypeGuard, TypeAlias)

try: from abc import ABCMeta
except ImportError: ABCMeta = type

# %% ../nbs/02_trys.ipynb 8
from .atyp import G, T, P, TypeLike, GuardFunc

# %% ../nbs/02_trys.ipynb 10
from .core import tnew, imod, itry

# %% ../nbs/02_trys.ipynb 13
repattern: type = imod('re', 'Pattern')
nan: float = imod('math', 'nan')
strtemplate = imod('string', 'Template')
number: ABCMeta = imod('numbers', 'Number')
pathlike: type = imod('pathlib', 'Path')

ichain, iprod, ziplong = itry('itertools', 'chain', 'product', 'zip_longest')
ichain: type
iprod: type
ziplong: type

dict_keys, dict_values, dict_items = itry('_collections_abc', 'dict_keys', 'dict_values', 'dict_items')
dict_keys: type
dict_values: type
dict_items: type

# %% ../nbs/02_trys.ipynb 14
moduletype, wrappertype, builtinfunctype, nonetype = \
    itry('types', 'ModuleType', 'MethodWrapperType', 'BuiltinFunctionType', 'NoneType')

moduletype: type
wrappertype: type
builtinfunctype: type
nonetype: type

# %% ../nbs/02_trys.ipynb 16
np: ModuleType = imod('numpy')
npdatasource: type = imod('numpy', 'DataSource', default=pathlike)
npbool: type = imod('numpy', 'bool_', default=bool)
npmatrix, nparray = itry('numpy', 'matrix', 'ndarray', default=list)
npnan, npNaN, npNAN = itry('numpy', 'nan', 'NaN', 'NAN', default=nan)

npmatrix: type
nparray: type
npnan: float
npNaN: float
npNAN: float

# %% ../nbs/02_trys.ipynb 18
pd: ModuleType = imod('pandas')
pdna: type = imod('pandas', 'NA', default=nan)
pdindex, pdseries, pdcatindex, pddataframe = \
    itry('pandas', 'Index', 'Series', 'CategoricalIndex', 'DataFrame', default=list)

pdindex: type
pdseries: type
pdcatindex: type
pddataframe: type

# %% ../nbs/02_trys.ipynb 20
sp: ModuleType = imod('scipy')
sparray: type = imod('scipy.sparse._arrays', '_sparray')
sparray: type = imod('scipy.sparse', 'sparray', default=(sparray or list))
spmatrix: type = imod('scipy.sparse', 'spmatrix', default=list)

# %% ../nbs/02_trys.ipynb 22
ptnan: float = imod('torch', 'nan', default=nan)
ptdtype, ptdevice = itry('torch', 'dtype', 'device')
ptmodule: type = imod('torch.nn', 'Module')
ptdataset, ptdataloader = itry('torch.utils.data', 'Dataset', 'DataLoader')

pttensorbase: type = imod('torch._C', '_TensorBase')
pttensor: type = imod('torch', 'Tensor', bases=(pttensorbase, ))
ptinttensor, ptbooltensor, ptfloattensor = \
    itry('torch', 'IntTensor', 'BoolTensor', 'FloatTensor', bases=(pttensor, ))



ptdtype: type
ptdevice: type
ptdataset: type
ptdataloader: type
ptinttensor: type
ptbooltensor: type
ptfloattensor: type

# %% ../nbs/02_trys.ipynb 24
ptdatasets: ModuleType = imod('torchvision.datasets')
pttransforms: ModuleType = imod('torchvision.transforms')
ptfunctional: ModuleType = imod('torchvision.transforms.functional')

# %% ../nbs/02_trys.ipynb 26
pldatamodule, = itry('pytorch_lightning', 'LightningDataModule', default=list)
pldatamodule: type

# %% ../nbs/02_trys.ipynb 28
vidcap, = itry('cv2', 'VideoCapture')
vidcap: type

# %% ../nbs/02_trys.ipynb 30
image, = itry('PIL.Image', 'Image')
image: type

# %% ../nbs/02_trys.ipynb 32
anndata, = itry('anndata', 'AnnData')
anndata: type

# %% ../nbs/02_trys.ipynb 34
mpl: ModuleType = imod('matplotlib')
plt: ModuleType = imod('matplotlib', 'pyplot', bases=(ModuleType, ))
artist, = itry('matplotlib.artist', 'Artist')

colormap, = itry('matplotlib.colors', 'Colormap')
lscolormap, = itry('matplotlib.colors', 'LinearSegmentedColormap', bases=(colormap, ))

mplpatch, = itry('matplotlib.patches', 'Patch', bases=(artist, ))
mplaxbase, = itry('matplotlib.axes._axes', '_AxesBase', bases=(artist, ))
mplaxes, = itry('matplotlib.axes._axes', 'Axes', bases=(mplaxbase, ))


artist: type
colormap: type
lscolormap: type
mplpatch: type
mplaxbase: type
mplaxes: type

# %% ../nbs/02_trys.ipynb 36
sns: ModuleType = imod('seaborn')

# %% ../nbs/02_trys.ipynb 38
skestimator, = itry('sklearn.base', 'BaseEstimator')
skestimator: type

# %% ../nbs/02_trys.ipynb 40
PHATE, = itry('phate', 'PHATE', bases=(skestimator, ))
PHATE: type

# %% ../nbs/02_trys.ipynb 42
gtbase, = itry('graphtools.base', 'Base')
gtdata, = itry('graphtools.base', 'Data', bases=(gtbase, ))

bgraph, = itry('graphtools.base', 'BaseGraph', bases=(gtbase, ))
dgraph, = itry('graphtools.base', 'Data', bases=(gtdata, bgraph))


lgraph, kgraph, tgraph, mgraph = \
    itry('graphtools.graphs', 'LandmarkGraph', 'kNNGraph', 'TraditionalGraph', 'MNNGraph', bases=(dgraph, ))


klgraph, = itry('graphtools.graphs', 'kNNLandmarkGraph', bases=(kgraph, lgraph, ))
mlgraph, = itry('graphtools.graphs', 'MNNLandmarkGraph', bases=(mgraph, lgraph, ))
tlgraph, = itry('graphtools.graphs', 'TraditionalLandmarkGraph', bases=(tgraph, lgraph, ))

gtbase: type
gtdata: type
bgraph: type
dgraph: type
lgraph: type
kgraph: type
tgraph: type
mgraph: type
klgraph: type
mlgraph: type
tlgraph: type
