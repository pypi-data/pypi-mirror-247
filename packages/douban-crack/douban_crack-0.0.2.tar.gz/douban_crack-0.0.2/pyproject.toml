[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "douban-crack"
dynamic = ["version"]
description = 'crack douban DATA'
readme = "README.md"
requires-python = ">=3.7"
license = "MIT"
keywords = ["douban"]
authors = [{ name = "cromarmot", email = "yexiaorain@gmail.com" }]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "selenium>=4.16.0",
  "webdriver-manager>=4.0.1",
  "pyexecjs>=1.5.1",
]

[project.urls]
Documentation = "https://github.com/CroMarmot/douban-crack#readme"
Issues = "https://github.com/CroMarmot/douban-crack/issues"
Source = "https://github.com/CroMarmot/douban-crack"

[tool.hatch.version]
path = "src/douban_crack/__about__.py"

[tool.hatch.envs.default]
dependencies = ["selenium>=4.16.0", "webdriver-manager>=4.0.1"]
[tool.hatch.envs.default.scripts]

[[tool.hatch.envs.all.matrix]]
python = ["3.7", "3.8", "3.9", "3.10", "3.11"]

[tool.hatch.envs.lint]
detached = true
dependencies = ["black>=23.1.0", "mypy>=1.0.0", "ruff>=0.0.243"]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/douban_crack tests}"
style = ["ruff {args:.}", "black --check --diff {args:.}"]
fmt = ["black {args:.}", "ruff --fix {args:.}", "style"]
all = ["style", "typing"]

[tool.hatch.build.targets.sdist]
exclude = [
  "/.github",
  "/docs",
  "/tests",
  "/.gitignore",
  "mkdocs.yml",
  "Dockerfile",
]

[tool.hatch.envs.docs]
dependencies = ["mkdocs", "mkdocs-material"]

[tool.hatch.envs.docs.scripts]
build = "mkdocs build --clean --strict"
serve = "mkdocs serve --dev-addr localhost:8000"

[tool.hatch.envs.tests]
dependencies = ["coverage[toml]>=6.5", "pytest"]

[tool.hatch.envs.tests.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = ["- coverage combine", "coverage report"]
cov = ["test-cov", "cov-report"]


[tool.black]
target-version = ["py37"]
line-length = 120
skip-string-normalization = true

[tool.ruff]
target-version = "py37"
line-length = 120
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105",
  "S106",
  "S107",
  # Ignore complexity
  "C901",
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR0915",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.isort]
known-first-party = ["douban_crack"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.coverage.run]
source_pkgs = ["douban_crack", "tests"]
branch = true
parallel = true
omit = ["src/douban_crack/__about__.py"]

[tool.coverage.paths]
douban_crack = ["src/douban_crack", "*/douban-crack/src/douban_crack"]
tests = ["tests", "*/douban-crack/tests"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]
