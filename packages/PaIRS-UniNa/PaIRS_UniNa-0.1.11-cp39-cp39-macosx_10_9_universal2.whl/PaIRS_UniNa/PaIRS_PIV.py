# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _PaIRS_PIV
else:
    import _PaIRS_PIV

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

MOD_PaIRS = _PaIRS_PIV.MOD_PaIRS
MOD_PIV = _PaIRS_PIV.MOD_PIV
MOD_TrTomo = _PaIRS_PIV.MOD_TrTomo
MOD_TrPathOld = _PaIRS_PIV.MOD_TrPathOld
MOD_TrPath = _PaIRS_PIV.MOD_TrPath
MOD_Disparity = _PaIRS_PIV.MOD_Disparity
MOD_DisparityAvgCorr = _PaIRS_PIV.MOD_DisparityAvgCorr
MOD_StereoPIV = _PaIRS_PIV.MOD_StereoPIV
MOD_Soloff = _PaIRS_PIV.MOD_Soloff
MOD_TomoPIV = _PaIRS_PIV.MOD_TomoPIV
MOD_piv3d = _PaIRS_PIV.MOD_piv3d
MOD_SelfCal = _PaIRS_PIV.MOD_SelfCal
MOD_TomoPI = _PaIRS_PIV.MOD_TomoPI
MOD_RotCalib = _PaIRS_PIV.MOD_RotCalib
MOD_ParCorr = _PaIRS_PIV.MOD_ParCorr
MOD_Calib = _PaIRS_PIV.MOD_Calib

def Version(Flag: "Moduli") -> "char *":
    return _PaIRS_PIV.Version(Flag)

def SizeOfReal() -> "int":
    return _PaIRS_PIV.SizeOfReal()
IDEN_INT = _PaIRS_PIV.IDEN_INT
IDEN_DOUBLE = _PaIRS_PIV.IDEN_DOUBLE
IDEN_FLOAT = _PaIRS_PIV.IDEN_FLOAT
IDEN_LONG = _PaIRS_PIV.IDEN_LONG
class PIV_Input(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    RisX = property(_PaIRS_PIV.PIV_Input_RisX_get, _PaIRS_PIV.PIV_Input_RisX_set)
    RisY = property(_PaIRS_PIV.PIV_Input_RisY_get, _PaIRS_PIV.PIV_Input_RisY_set)
    dt = property(_PaIRS_PIV.PIV_Input_dt_get, _PaIRS_PIV.PIV_Input_dt_set)
    ImgH = property(_PaIRS_PIV.PIV_Input_ImgH_get, _PaIRS_PIV.PIV_Input_ImgH_set)
    ImgW = property(_PaIRS_PIV.PIV_Input_ImgW_get, _PaIRS_PIV.PIV_Input_ImgW_set)
    HCellaVec = property(_PaIRS_PIV.PIV_Input_HCellaVec_get, _PaIRS_PIV.PIV_Input_HCellaVec_set)
    WCellaVec = property(_PaIRS_PIV.PIV_Input_WCellaVec_get, _PaIRS_PIV.PIV_Input_WCellaVec_set)
    HOverlapVec = property(_PaIRS_PIV.PIV_Input_HOverlapVec_get, _PaIRS_PIV.PIV_Input_HOverlapVec_set)
    WOverlapVec = property(_PaIRS_PIV.PIV_Input_WOverlapVec_get, _PaIRS_PIV.PIV_Input_WOverlapVec_set)
    SogliaNoise = property(_PaIRS_PIV.PIV_Input_SogliaNoise_get, _PaIRS_PIV.PIV_Input_SogliaNoise_set)
    SogliaStd = property(_PaIRS_PIV.PIV_Input_SogliaStd_get, _PaIRS_PIV.PIV_Input_SogliaStd_set)
    SogliaSN = property(_PaIRS_PIV.PIV_Input_SogliaSN_get, _PaIRS_PIV.PIV_Input_SogliaSN_set)
    SogliaFcl = property(_PaIRS_PIV.PIV_Input_SogliaFcl_get, _PaIRS_PIV.PIV_Input_SogliaFcl_set)
    SogliaMed = property(_PaIRS_PIV.PIV_Input_SogliaMed_get, _PaIRS_PIV.PIV_Input_SogliaMed_set)
    FlagSecMax = property(_PaIRS_PIV.PIV_Input_FlagSecMax_get, _PaIRS_PIV.PIV_Input_FlagSecMax_set)
    SemiDimValid = property(_PaIRS_PIV.PIV_Input_SemiDimValid_get, _PaIRS_PIV.PIV_Input_SemiDimValid_set)
    FlagValidNog = property(_PaIRS_PIV.PIV_Input_FlagValidNog_get, _PaIRS_PIV.PIV_Input_FlagValidNog_set)
    FlagValid = property(_PaIRS_PIV.PIV_Input_FlagValid_get, _PaIRS_PIV.PIV_Input_FlagValid_set)
    FlagAttivaValSN = property(_PaIRS_PIV.PIV_Input_FlagAttivaValSN_get, _PaIRS_PIV.PIV_Input_FlagAttivaValSN_set)
    ErroreMed = property(_PaIRS_PIV.PIV_Input_ErroreMed_get, _PaIRS_PIV.PIV_Input_ErroreMed_set)
    FlagRemNoise = property(_PaIRS_PIV.PIV_Input_FlagRemNoise_get, _PaIRS_PIV.PIV_Input_FlagRemNoise_set)
    IntIniz = property(_PaIRS_PIV.PIV_Input_IntIniz_get, _PaIRS_PIV.PIV_Input_IntIniz_set)
    IntFin = property(_PaIRS_PIV.PIV_Input_IntFin_get, _PaIRS_PIV.PIV_Input_IntFin_set)
    FlagInt = property(_PaIRS_PIV.PIV_Input_FlagInt_get, _PaIRS_PIV.PIV_Input_FlagInt_set)
    IntVel = property(_PaIRS_PIV.PIV_Input_IntVel_get, _PaIRS_PIV.PIV_Input_IntVel_set)
    FlagCorrezioneVel = property(_PaIRS_PIV.PIV_Input_FlagCorrezioneVel_get, _PaIRS_PIV.PIV_Input_FlagCorrezioneVel_set)
    IntCorr = property(_PaIRS_PIV.PIV_Input_IntCorr_get, _PaIRS_PIV.PIV_Input_IntCorr_set)
    FlagWindowing = property(_PaIRS_PIV.PIV_Input_FlagWindowing_get, _PaIRS_PIV.PIV_Input_FlagWindowing_set)
    SemiDimCalcVel = property(_PaIRS_PIV.PIV_Input_SemiDimCalcVel_get, _PaIRS_PIV.PIV_Input_SemiDimCalcVel_set)
    MaxC = property(_PaIRS_PIV.PIV_Input_MaxC_get, _PaIRS_PIV.PIV_Input_MaxC_set)
    MinC = property(_PaIRS_PIV.PIV_Input_MinC_get, _PaIRS_PIV.PIV_Input_MinC_set)
    LarMin = property(_PaIRS_PIV.PIV_Input_LarMin_get, _PaIRS_PIV.PIV_Input_LarMin_set)
    LarMax = property(_PaIRS_PIV.PIV_Input_LarMax_get, _PaIRS_PIV.PIV_Input_LarMax_set)
    FlagCalcVel = property(_PaIRS_PIV.PIV_Input_FlagCalcVel_get, _PaIRS_PIV.PIV_Input_FlagCalcVel_set)
    FlagSommaProd = property(_PaIRS_PIV.PIV_Input_FlagSommaProd_get, _PaIRS_PIV.PIV_Input_FlagSommaProd_set)
    FlagDirectCorr = property(_PaIRS_PIV.PIV_Input_FlagDirectCorr_get, _PaIRS_PIV.PIV_Input_FlagDirectCorr_set)
    FlagBordo = property(_PaIRS_PIV.PIV_Input_FlagBordo_get, _PaIRS_PIV.PIV_Input_FlagBordo_set)
    ItAtt = property(_PaIRS_PIV.PIV_Input_ItAtt_get, _PaIRS_PIV.PIV_Input_ItAtt_set)
    NIterazioni = property(_PaIRS_PIV.PIV_Input_NIterazioni_get, _PaIRS_PIV.PIV_Input_NIterazioni_set)
    NomeFile = property(_PaIRS_PIV.PIV_Input_NomeFile_get, _PaIRS_PIV.PIV_Input_NomeFile_set)
    FlagLog = property(_PaIRS_PIV.PIV_Input_FlagLog_get, _PaIRS_PIV.PIV_Input_FlagLog_set)
    FlagNumThreads = property(_PaIRS_PIV.PIV_Input_FlagNumThreads_get, _PaIRS_PIV.PIV_Input_FlagNumThreads_set)
    Out = property(_PaIRS_PIV.PIV_Input_Out_get, _PaIRS_PIV.PIV_Input_Out_set)
    rImgA = property(_PaIRS_PIV.PIV_Input_rImgA_get, _PaIRS_PIV.PIV_Input_rImgA_set)
    rImgB = property(_PaIRS_PIV.PIV_Input_rImgB_get, _PaIRS_PIV.PIV_Input_rImgB_set)

    def __init__(self):
        _PaIRS_PIV.PIV_Input_swiginit(self, _PaIRS_PIV.new_PIV_Input())
    __swig_destroy__ = _PaIRS_PIV.delete_PIV_Input

# Register PIV_Input in _PaIRS_PIV:
_PaIRS_PIV.PIV_Input_swigregister(PIV_Input)

class ProcessingData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NitTot = property(_PaIRS_PIV.ProcessingData_NitTot_get, _PaIRS_PIV.ProcessingData_NitTot_set)
    It = property(_PaIRS_PIV.ProcessingData_It_get, _PaIRS_PIV.ProcessingData_It_set)
    WCella = property(_PaIRS_PIV.ProcessingData_WCella_get, _PaIRS_PIV.ProcessingData_WCella_set)
    HCella = property(_PaIRS_PIV.ProcessingData_HCella_get, _PaIRS_PIV.ProcessingData_HCella_set)
    W = property(_PaIRS_PIV.ProcessingData_W_get, _PaIRS_PIV.ProcessingData_W_set)
    H = property(_PaIRS_PIV.ProcessingData_H_get, _PaIRS_PIV.ProcessingData_H_set)
    NVect = property(_PaIRS_PIV.ProcessingData_NVect_get, _PaIRS_PIV.ProcessingData_NVect_set)
    ContErorreDc = property(_PaIRS_PIV.ProcessingData_ContErorreDc_get, _PaIRS_PIV.ProcessingData_ContErorreDc_set)
    ContRemNoise = property(_PaIRS_PIV.ProcessingData_ContRemNoise_get, _PaIRS_PIV.ProcessingData_ContRemNoise_set)
    ContCap = property(_PaIRS_PIV.ProcessingData_ContCap_get, _PaIRS_PIV.ProcessingData_ContCap_set)
    Fc = property(_PaIRS_PIV.ProcessingData_Fc_get, _PaIRS_PIV.ProcessingData_Fc_set)
    FcMedia = property(_PaIRS_PIV.ProcessingData_FcMedia_get, _PaIRS_PIV.ProcessingData_FcMedia_set)

    def __init__(self):
        _PaIRS_PIV.ProcessingData_swiginit(self, _PaIRS_PIV.new_ProcessingData())
    __swig_destroy__ = _PaIRS_PIV.delete_ProcessingData

# Register ProcessingData in _PaIRS_PIV:
_PaIRS_PIV.ProcessingData_swigregister(ProcessingData)

class PIV_Output(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _PaIRS_PIV.PIV_Output_swiginit(self, _PaIRS_PIV.new_PIV_Output())
    __swig_destroy__ = _PaIRS_PIV.delete_PIV_Output
    u = property(_PaIRS_PIV.PIV_Output_u_get, _PaIRS_PIV.PIV_Output_u_set)
    v = property(_PaIRS_PIV.PIV_Output_v_get, _PaIRS_PIV.PIV_Output_v_set)
    sn = property(_PaIRS_PIV.PIV_Output_sn_get, _PaIRS_PIV.PIV_Output_sn_set)
    FCl = property(_PaIRS_PIV.PIV_Output_FCl_get, _PaIRS_PIV.PIV_Output_FCl_set)
    Info = property(_PaIRS_PIV.PIV_Output_Info_get, _PaIRS_PIV.PIV_Output_Info_set)
    x = property(_PaIRS_PIV.PIV_Output_x_get, _PaIRS_PIV.PIV_Output_x_set)
    y = property(_PaIRS_PIV.PIV_Output_y_get, _PaIRS_PIV.PIV_Output_y_set)
    PD = property(_PaIRS_PIV.PIV_Output_PD_get, _PaIRS_PIV.PIV_Output_PD_set)

# Register PIV_Output in _PaIRS_PIV:
_PaIRS_PIV.PIV_Output_swigregister(PIV_Output)

class PIV(PIV_Output):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Inp = property(_PaIRS_PIV.PIV_Inp_get, _PaIRS_PIV.PIV_Inp_set)

    def __init__(self):
        _PaIRS_PIV.PIV_swiginit(self, _PaIRS_PIV.new_PIV())
    __swig_destroy__ = _PaIRS_PIV.delete_PIV

    def PIV_Cfg(self, NomeFile: "char *") -> "int":
        return _PaIRS_PIV.PIV_PIV_Cfg(self, NomeFile)

    def DefaultValues(self) -> "int":
        return _PaIRS_PIV.PIV_DefaultValues(self)

    def readCfgProc(self, cfgName: "char *") -> "int":
        return _PaIRS_PIV.PIV_readCfgProc(self, cfgName)

    def PIV_Run(self, p: "fptr_t"=None) -> "int":
        return _PaIRS_PIV.PIV_PIV_Run(self, p)

    def SetVect(self, p: "PyObject *") -> "int":
        return _PaIRS_PIV.PIV_SetVect(self, p)

    def GetVect(self) -> "PyObject *":
        return _PaIRS_PIV.PIV_GetVect(self)

    def SetImg(self, p: "PyObject *") -> "int":
        return _PaIRS_PIV.PIV_SetImg(self, p)

# Register PIV in _PaIRS_PIV:
_PaIRS_PIV.PIV_swigregister(PIV)


def Punto(x,y):
  return  _Punto().build(x,y)   
from dataclasses import dataclass
@dataclass
class CalFlags:
#// mask values and shifts
   MASK     =    0xF    #//Si usano solo blocchi da 16 bit 
   SHIFT    =    0       #//numero di bit da rimuovere (o aggiungere) per arrivare a Cal
   SHIFT_CYL=    0x4   #//numero di bit da rimuovere (o aggiungere) per arrivare a Cyl 
   SHIFT_PH =    0x8   #//numero di bit da rimuovere per arrivare a
   SHIFT_PAR=    0xC   #//numero di bit da rimuovere per arrivare a
#  #// La prima indica il tipo di calibrazione Cal=(TipoCal>>tipoCalSHIFT )&tipoCalMASK  
#// cal types
   NORMALE  =    0   #//Calibrazione normale
   PER_PIANI=    1   #//Calibrazione per piani
   SOLOPIANO=    2   #//Calibrazione solo piano
   CYL      =    3   #//Calibrazione cilindrica
   SELFCAL  =    10   #//Calibrazione cilindrica per selfcal 
   Flag_PINHOLE = (0b0001<< SHIFT_PAR)   #//Flag Pinhole
   Flag_PIANI   = (0b0010<<SHIFT_PAR )  #//Flag piani
   Flag_LIN_VI  = (0b0100<<SHIFT_PAR )  #//Flag per salvare linee di vista   

# // Point flags
   P_NOT_FOUND    =  0   #//Point not found 
   P_FOUND        =  1   #//Point  found   
   P_REMOVED      =  4   #//Point  removes
   P_REMOVED_BULK =  8   #// Point removed bulk è acceso solo se in precedenza il punto era stato trovato
# // Plane flags
   PLANE_NOT_FOUND            =  1  #// Plane not found
   PLANE_ORIGIN_NOT_FOUND     =  2  #// Origin not found
   PLANE_NOT_INIT_TROVA_PUNTO =  4  #// findPlane not initialised
   PLANE_CLEAN                =  PLANE_NOT_FOUND| PLANE_ORIGIN_NOT_FOUND|PLANE_NOT_INIT_TROVA_PUNTO #//Clean all falgs

class Calib(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    percorsoOut = property(_PaIRS_PIV.Calib_percorsoOut_get, _PaIRS_PIV.Calib_percorsoOut_set)
    NomeFileOut = property(_PaIRS_PIV.Calib_NomeFileOut_get, _PaIRS_PIV.Calib_NomeFileOut_set)
    EstensioneIn = property(_PaIRS_PIV.Calib_EstensioneIn_get, _PaIRS_PIV.Calib_EstensioneIn_set)
    percorso = property(_PaIRS_PIV.Calib_percorso_get, _PaIRS_PIV.Calib_percorso_set)
    NCam = property(_PaIRS_PIV.Calib_NCam_get, _PaIRS_PIV.Calib_NCam_set)
    PercErrMax = property(_PaIRS_PIV.Calib_PercErrMax_get, _PaIRS_PIV.Calib_PercErrMax_set)
    raggioInizialeRicerca = property(_PaIRS_PIV.Calib_raggioInizialeRicerca_get, _PaIRS_PIV.Calib_raggioInizialeRicerca_set)
    TipoTarget = property(_PaIRS_PIV.Calib_TipoTarget_get, _PaIRS_PIV.Calib_TipoTarget_set)
    dx = property(_PaIRS_PIV.Calib_dx_get, _PaIRS_PIV.Calib_dx_set)
    dy = property(_PaIRS_PIV.Calib_dy_get, _PaIRS_PIV.Calib_dy_set)
    dz = property(_PaIRS_PIV.Calib_dz_get, _PaIRS_PIV.Calib_dz_set)
    FlagCam = property(_PaIRS_PIV.Calib_FlagCam_get, _PaIRS_PIV.Calib_FlagCam_set)
    ColPart = property(_PaIRS_PIV.Calib_ColPart_get, _PaIRS_PIV.Calib_ColPart_set)
    RigaPart = property(_PaIRS_PIV.Calib_RigaPart_get, _PaIRS_PIV.Calib_RigaPart_set)
    TipoCal = property(_PaIRS_PIV.Calib_TipoCal_get, _PaIRS_PIV.Calib_TipoCal_set)
    FlagCal = property(_PaIRS_PIV.Calib_FlagCal_get, _PaIRS_PIV.Calib_FlagCal_set)
    NumCostCalib = property(_PaIRS_PIV.Calib_NumCostCalib_get, _PaIRS_PIV.Calib_NumCostCalib_set)
    NumCostCalib_All = property(_PaIRS_PIV.Calib_NumCostCalib_All_get, _PaIRS_PIV.Calib_NumCostCalib_All_set)
    Numpiani_PerCam = property(_PaIRS_PIV.Calib_Numpiani_PerCam_get, _PaIRS_PIV.Calib_Numpiani_PerCam_set)
    Numpiani = property(_PaIRS_PIV.Calib_Numpiani_get, _PaIRS_PIV.Calib_Numpiani_set)
    pasX = property(_PaIRS_PIV.Calib_pasX_get, _PaIRS_PIV.Calib_pasX_set)
    pasY = property(_PaIRS_PIV.Calib_pasY_get, _PaIRS_PIV.Calib_pasY_set)
    ImgW = property(_PaIRS_PIV.Calib_ImgW_get, _PaIRS_PIV.Calib_ImgW_set)
    ImgH = property(_PaIRS_PIV.Calib_ImgH_get, _PaIRS_PIV.Calib_ImgH_set)
    WinH = property(_PaIRS_PIV.Calib_WinH_get, _PaIRS_PIV.Calib_WinH_set)
    WinW = property(_PaIRS_PIV.Calib_WinW_get, _PaIRS_PIV.Calib_WinW_set)
    Threshold = property(_PaIRS_PIV.Calib_Threshold_get, _PaIRS_PIV.Calib_Threshold_set)
    FlagPos = property(_PaIRS_PIV.Calib_FlagPos_get, _PaIRS_PIV.Calib_FlagPos_set)
    piano = property(_PaIRS_PIV.Calib_piano_get, _PaIRS_PIV.Calib_piano_set)
    DimMat = property(_PaIRS_PIV.Calib_DimMat_get, _PaIRS_PIV.Calib_DimMat_set)
    Npti = property(_PaIRS_PIV.Calib_Npti_get, _PaIRS_PIV.Calib_Npti_set)
    NptiCorr = property(_PaIRS_PIV.Calib_NptiCorr_get, _PaIRS_PIV.Calib_NptiCorr_set)
    NptiNew = property(_PaIRS_PIV.Calib_NptiNew_get, _PaIRS_PIV.Calib_NptiNew_set)
    jMax = property(_PaIRS_PIV.Calib_jMax_get, _PaIRS_PIV.Calib_jMax_set)
    kMax = property(_PaIRS_PIV.Calib_kMax_get, _PaIRS_PIV.Calib_kMax_set)
    xMax = property(_PaIRS_PIV.Calib_xMax_get, _PaIRS_PIV.Calib_xMax_set)
    yMax = property(_PaIRS_PIV.Calib_yMax_get, _PaIRS_PIV.Calib_yMax_set)
    zMax = property(_PaIRS_PIV.Calib_zMax_get, _PaIRS_PIV.Calib_zMax_set)
    XMax = property(_PaIRS_PIV.Calib_XMax_get, _PaIRS_PIV.Calib_XMax_set)
    YMax = property(_PaIRS_PIV.Calib_YMax_get, _PaIRS_PIV.Calib_YMax_set)
    Errrms = property(_PaIRS_PIV.Calib_Errrms_get, _PaIRS_PIV.Calib_Errrms_set)
    ErrMax = property(_PaIRS_PIV.Calib_ErrMax_get, _PaIRS_PIV.Calib_ErrMax_set)
    DimWinCC = property(_PaIRS_PIV.Calib_DimWinCC_get, _PaIRS_PIV.Calib_DimWinCC_set)

    def __init__(self):
        _PaIRS_PIV.Calib_swiginit(self, _PaIRS_PIV.new_Calib())
    __swig_destroy__ = _PaIRS_PIV.delete_Calib

# Register Calib in _PaIRS_PIV:
_PaIRS_PIV.Calib_swigregister(Calib)

class _Punto(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_PaIRS_PIV._Punto_x_get, _PaIRS_PIV._Punto_x_set)
    y = property(_PaIRS_PIV._Punto_y_get, _PaIRS_PIV._Punto_y_set)

    def build(self, x: "double", y: "double") -> "_Punto":
        return _PaIRS_PIV._Punto_build(self, x, y)

    def __init__(self):
        _PaIRS_PIV._Punto_swiginit(self, _PaIRS_PIV.new__Punto())
    __swig_destroy__ = _PaIRS_PIV.delete__Punto

# Register _Punto in _PaIRS_PIV:
_PaIRS_PIV._Punto_swigregister(_Punto)

class CalibVect(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cam = property(_PaIRS_PIV.CalibVect_cam_get, _PaIRS_PIV.CalibVect_cam_set)
    XOr = property(_PaIRS_PIV.CalibVect_XOr_get, _PaIRS_PIV.CalibVect_XOr_set)
    YOr = property(_PaIRS_PIV.CalibVect_YOr_get, _PaIRS_PIV.CalibVect_YOr_set)
    z = property(_PaIRS_PIV.CalibVect_z_get, _PaIRS_PIV.CalibVect_z_set)
    angCol = property(_PaIRS_PIV.CalibVect_angCol_get, _PaIRS_PIV.CalibVect_angCol_set)
    angRow = property(_PaIRS_PIV.CalibVect_angRow_get, _PaIRS_PIV.CalibVect_angRow_set)
    xOrShift = property(_PaIRS_PIV.CalibVect_xOrShift_get, _PaIRS_PIV.CalibVect_xOrShift_set)
    yOrShift = property(_PaIRS_PIV.CalibVect_yOrShift_get, _PaIRS_PIV.CalibVect_yOrShift_set)
    remPointsUp = property(_PaIRS_PIV.CalibVect_remPointsUp_get, _PaIRS_PIV.CalibVect_remPointsUp_set)
    remPointsDo = property(_PaIRS_PIV.CalibVect_remPointsDo_get, _PaIRS_PIV.CalibVect_remPointsDo_set)
    remPointsLe = property(_PaIRS_PIV.CalibVect_remPointsLe_get, _PaIRS_PIV.CalibVect_remPointsLe_set)
    remPointsRi = property(_PaIRS_PIV.CalibVect_remPointsRi_get, _PaIRS_PIV.CalibVect_remPointsRi_set)
    W = property(_PaIRS_PIV.CalibVect_W_get, _PaIRS_PIV.CalibVect_W_set)
    H = property(_PaIRS_PIV.CalibVect_H_get, _PaIRS_PIV.CalibVect_H_set)
    dColPix = property(_PaIRS_PIV.CalibVect_dColPix_get, _PaIRS_PIV.CalibVect_dColPix_set)
    dRigPix = property(_PaIRS_PIV.CalibVect_dRigPix_get, _PaIRS_PIV.CalibVect_dRigPix_set)
    nPointsPlane = property(_PaIRS_PIV.CalibVect_nPointsPlane_get, _PaIRS_PIV.CalibVect_nPointsPlane_set)
    flagPlane = property(_PaIRS_PIV.CalibVect_flagPlane_get, _PaIRS_PIV.CalibVect_flagPlane_set)
    costPlanes = property(_PaIRS_PIV.CalibVect_costPlanes_get, _PaIRS_PIV.CalibVect_costPlanes_set)
    X = property(_PaIRS_PIV.CalibVect_X_get, _PaIRS_PIV.CalibVect_X_set)
    Y = property(_PaIRS_PIV.CalibVect_Y_get, _PaIRS_PIV.CalibVect_Y_set)
    Xc = property(_PaIRS_PIV.CalibVect_Xc_get, _PaIRS_PIV.CalibVect_Xc_set)
    Yc = property(_PaIRS_PIV.CalibVect_Yc_get, _PaIRS_PIV.CalibVect_Yc_set)
    x = property(_PaIRS_PIV.CalibVect_x_get, _PaIRS_PIV.CalibVect_x_set)
    y = property(_PaIRS_PIV.CalibVect_y_get, _PaIRS_PIV.CalibVect_y_set)
    flag = property(_PaIRS_PIV.CalibVect_flag_get, _PaIRS_PIV.CalibVect_flag_set)
    cost = property(_PaIRS_PIV.CalibVect_cost_get, _PaIRS_PIV.CalibVect_cost_set)

    def __init__(self):
        _PaIRS_PIV.CalibVect_swiginit(self, _PaIRS_PIV.new_CalibVect())
    __swig_destroy__ = _PaIRS_PIV.delete_CalibVect

# Register CalibVect in _PaIRS_PIV:
_PaIRS_PIV.CalibVect_swigregister(CalibVect)

class Cal(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    data = property(_PaIRS_PIV.Cal_data_get, _PaIRS_PIV.Cal_data_set)
    vect = property(_PaIRS_PIV.Cal_vect_get, _PaIRS_PIV.Cal_vect_set)
    flagCalibrated = property(_PaIRS_PIV.Cal_flagCalibrated_get, _PaIRS_PIV.Cal_flagCalibrated_set)

    def __init__(self):
        _PaIRS_PIV.Cal_swiginit(self, _PaIRS_PIV.new_Cal())
    __swig_destroy__ = _PaIRS_PIV.delete_Cal

    def DefaultValues(self) -> "int":
        return _PaIRS_PIV.Cal_DefaultValues(self)

    def setImgs(self, List: "PyObject *") -> "int":
        return _PaIRS_PIV.Cal_setImgs(self, List)

    def findPoint(self, p: "_Punto") -> "_Punto":
        return _PaIRS_PIV.Cal_findPoint(self, p)

    def initFindPoint(self, p: "int") -> "int":
        return _PaIRS_PIV.Cal_initFindPoint(self, p)

    def getMask(self) -> "PyObject *":
        return _PaIRS_PIV.Cal_getMask(self)

    def cleanPlanes(self) -> "int":
        return _PaIRS_PIV.Cal_cleanPlanes(self)

    def evalAngles(self, plane: "int", flagOper: "int", pp: "_Punto") -> "int":
        return _PaIRS_PIV.Cal_evalAngles(self, plane, flagOper, pp)

    def getCams(self) -> "PyObject *":
        return _PaIRS_PIV.Cal_getCams(self)

    def getImgRoot(self, plane: "int") -> "char *":
        return _PaIRS_PIV.Cal_getImgRoot(self, plane)

    def setImgRoot(self, plane: "int", name: "char *") -> "int":
        return _PaIRS_PIV.Cal_setImgRoot(self, plane, name)

    def readCfg(self, fileName: "char *") -> "int":
        return _PaIRS_PIV.Cal_readCfg(self, fileName)

    def findPlane(self, plane: "int") -> "int":
        return _PaIRS_PIV.Cal_findPlane(self, plane)

    def calibrate(self, pFunOut: "fptrOutCalib") -> "int":
        return _PaIRS_PIV.Cal_calibrate(self, pFunOut)

    def saveCfg(self, FlagPiano: "int", nomeFileCfg: "char *") -> "int":
        return _PaIRS_PIV.Cal_saveCfg(self, FlagPiano, nomeFileCfg)

    def saveConst(self) -> "int":
        return _PaIRS_PIV.Cal_saveConst(self)

    def pointFromCalib(self, List: "PyObject *", cam: "int") -> "_Punto":
        return _PaIRS_PIV.Cal_pointFromCalib(self, List, cam)

    def setAllFlagPlane(self, list: "PyObject *") -> "int":
        return _PaIRS_PIV.Cal_setAllFlagPlane(self, list)

    def setFlagPlane(self, plane: "int", flag: "int") -> "int":
        return _PaIRS_PIV.Cal_setFlagPlane(self, plane, flag)

    def setOriginFound(self, p: "int", flag: "int") -> "int":
        return _PaIRS_PIV.Cal_setOriginFound(self, p, flag)

    def originFound(self, p: "int") -> "int":
        return _PaIRS_PIV.Cal_originFound(self, p)

    def indFromCoord(self, i: "int", j: "int", p: "int") -> "int":
        return _PaIRS_PIV.Cal_indFromCoord(self, i, j, p)

    def removeMaxErrPoint(self) -> "int":
        return _PaIRS_PIV.Cal_removeMaxErrPoint(self)

    def removePoint(self, p: "_Punto") -> "int":
        return _PaIRS_PIV.Cal_removePoint(self, p)

    def removeBulk(self) -> "int":
        return _PaIRS_PIV.Cal_removeBulk(self)

    def setPuTrovaCC(self, list: "PyObject *", plane: "int") -> "int":
        return _PaIRS_PIV.Cal_setPuTrovaCC(self, list, plane)

    def getPuTrovaCC(self, plane: "int") -> "PyObject *":
        return _PaIRS_PIV.Cal_getPuTrovaCC(self, plane)

    def savePoints(self) -> "int":
        return _PaIRS_PIV.Cal_savePoints(self)

    def allocAndinit(self, list: "PyObject *", flag: "int") -> "int":
        return _PaIRS_PIV.Cal_allocAndinit(self, list, flag)

# Register Cal in _PaIRS_PIV:
_PaIRS_PIV.Cal_swigregister(Cal)

class PyFunOutCalib(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def funOutCalib(self, a: "int", s: "char *") -> "int":
        return _PaIRS_PIV.PyFunOutCalib_funOutCalib(self, a, s)
    __swig_destroy__ = _PaIRS_PIV.delete_PyFunOutCalib

    def __init__(self):
        if self.__class__ == PyFunOutCalib:
            _self = None
        else:
            _self = self
        _PaIRS_PIV.PyFunOutCalib_swiginit(self, _PaIRS_PIV.new_PyFunOutCalib(_self, ))
    def __disown__(self):
        self.this.disown()
        _PaIRS_PIV.disown_PyFunOutCalib(self)
        return weakref.proxy(self)

# Register PyFunOutCalib in _PaIRS_PIV:
_PaIRS_PIV.PyFunOutCalib_swigregister(PyFunOutCalib)


def getPyFunCalib(funOutCalib: "PyFunOutCalib") -> "fptrOutCalib":
    return _PaIRS_PIV.getPyFunCalib(funOutCalib)

#// PythonOutFromPIV class is defined and derived from C++ class PyFunOutCalib
class PythonOutFromLib(PyFunOutCalib) :
   Count = 0
#// Define Python class 'constructor'
   def __init__(self) :
#// Call C++ base class constructor
      PyFunOutCalib.__init__(self)
      self.Count=0
#// Override C++ method: virtual int handle
   def funOutCalib(self, a, o) :
      self.Count += 1
#print(f"PyOut {self.Count} {a}  {b}")
#if self.Count== 2:
#return  -1
      return 0



class DataFromPIV(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    a = property(_PaIRS_PIV.DataFromPIV_a_get, _PaIRS_PIV.DataFromPIV_a_set)
    b = property(_PaIRS_PIV.DataFromPIV_b_get, _PaIRS_PIV.DataFromPIV_b_set)
    Out = property(_PaIRS_PIV.DataFromPIV_Out_get, _PaIRS_PIV.DataFromPIV_Out_set)

    def __init__(self):
        _PaIRS_PIV.DataFromPIV_swiginit(self, _PaIRS_PIV.new_DataFromPIV())
    __swig_destroy__ = _PaIRS_PIV.delete_DataFromPIV

# Register DataFromPIV in _PaIRS_PIV:
_PaIRS_PIV.DataFromPIV_swigregister(DataFromPIV)

class PyFunOutPIV(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def FunOut(self, a: "double", b: "int", o: "DataFromPIV") -> "int":
        return _PaIRS_PIV.PyFunOutPIV_FunOut(self, a, b, o)
    __swig_destroy__ = _PaIRS_PIV.delete_PyFunOutPIV

    def __init__(self):
        if self.__class__ == PyFunOutPIV:
            _self = None
        else:
            _self = self
        _PaIRS_PIV.PyFunOutPIV_swiginit(self, _PaIRS_PIV.new_PyFunOutPIV(_self, ))
    def __disown__(self):
        self.this.disown()
        _PaIRS_PIV.disown_PyFunOutPIV(self)
        return weakref.proxy(self)

# Register PyFunOutPIV in _PaIRS_PIV:
_PaIRS_PIV.PyFunOutPIV_swigregister(PyFunOutPIV)


def GetPyFunction(FunOut: "PyFunOutPIV") -> "fptr_t":
    return _PaIRS_PIV.GetPyFunction(FunOut)

#// PythonOutFromPIV class is defined and derived from C++ class PyFunOutPIV
class PythonOutFromPIV(PyFunOutPIV) :
   Count = 0
#// Define Python class 'constructor'
   def __init__(self) :
#// Call C++ base class constructor
      PyFunOutPIV.__init__(self)

#// Override C++ method: virtual int handle
   def FunOut(self, a, b, o) :
      self.Count += 1
#print(f"PyOut {self.Count} {a}  {b}")
#if self.Count== 2:
#return  -1
      return 0





