# This file was autogenerated by some hot garbage in the `uniffi` crate.
# Trust me, you don't want to mess with it!

# Common helper code.
#
# Ideally this would live in a separate .py file where it can be unittested etc
# in isolation, and perhaps even published as a re-useable package.
#
# However, it's important that the details of how this helper code works (e.g. the
# way that different builtin types are passed across the FFI) exactly match what's
# expected by the rust code on the other side of the interface. In practice right
# now that means coming from the exact some version of `uniffi` that was used to
# compile the rust component. The easiest way to ensure this is to bundle the Python
# helpers directly inline like we're doing here.

import os
import sys
import ctypes
import enum
import struct
import contextlib
import datetime
import typing
import platform

# Used for default argument values
DEFAULT = object()


class RustBuffer(ctypes.Structure):
    _fields_ = [
        ("capacity", ctypes.c_int32),
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    @staticmethod
    def alloc(size):
        return rust_call(_UniFFILib.ffi_payjoin_ffi_rustbuffer_alloc, size)

    @staticmethod
    def reserve(rbuf, additional):
        return rust_call(_UniFFILib.ffi_payjoin_ffi_rustbuffer_reserve, rbuf, additional)

    def free(self):
        return rust_call(_UniFFILib.ffi_payjoin_ffi_rustbuffer_free, self)

    def __str__(self):
        return "RustBuffer(capacity={}, len={}, data={})".format(
            self.capacity,
            self.len,
            self.data[0:self.len]
        )

    @contextlib.contextmanager
    def allocWithBuilder(*args):
        """Context-manger to allocate a buffer using a RustBufferBuilder.

        The allocated buffer will be automatically freed if an error occurs, ensuring that
        we don't accidentally leak it.
        """
        builder = RustBufferBuilder()
        try:
            yield builder
        except:
            builder.discard()
            raise

    @contextlib.contextmanager
    def consumeWithStream(self):
        """Context-manager to consume a buffer using a RustBufferStream.

        The RustBuffer will be freed once the context-manager exits, ensuring that we don't
        leak it even if an error occurs.
        """
        try:
            s = RustBufferStream.from_rust_buffer(self)
            yield s
            if s.remaining() != 0:
                raise RuntimeError("junk data left in buffer at end of consumeWithStream")
        finally:
            self.free()

    @contextlib.contextmanager
    def readWithStream(self):
        """Context-manager to read a buffer using a RustBufferStream.

        This is like consumeWithStream, but doesn't free the buffer afterwards.
        It should only be used with borrowed `RustBuffer` data.
        """
        s = RustBufferStream.from_rust_buffer(self)
        yield s
        if s.remaining() != 0:
            raise RuntimeError("junk data left in buffer at end of readWithStream")

class ForeignBytes(ctypes.Structure):
    _fields_ = [
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    def __str__(self):
        return "ForeignBytes(len={}, data={})".format(self.len, self.data[0:self.len])


class RustBufferStream:
    """
    Helper for structured reading of bytes from a RustBuffer
    """

    def __init__(self, data, len):
        self.data = data
        self.len = len
        self.offset = 0

    @classmethod
    def from_rust_buffer(cls, buf):
        return cls(buf.data, buf.len)

    def remaining(self):
        return self.len - self.offset

    def _unpack_from(self, size, format):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        value = struct.unpack(format, self.data[self.offset:self.offset+size])[0]
        self.offset += size
        return value

    def read(self, size):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        data = self.data[self.offset:self.offset+size]
        self.offset += size
        return data

    def readI8(self):
        return self._unpack_from(1, ">b")

    def readU8(self):
        return self._unpack_from(1, ">B")

    def readI16(self):
        return self._unpack_from(2, ">h")

    def readU16(self):
        return self._unpack_from(2, ">H")

    def readI32(self):
        return self._unpack_from(4, ">i")

    def readU32(self):
        return self._unpack_from(4, ">I")

    def readI64(self):
        return self._unpack_from(8, ">q")

    def readU64(self):
        return self._unpack_from(8, ">Q")

    def readFloat(self):
        v = self._unpack_from(4, ">f")
        return v

    def readDouble(self):
        return self._unpack_from(8, ">d")

    def readCSizeT(self):
        return self._unpack_from(ctypes.sizeof(ctypes.c_size_t) , "@N")

class RustBufferBuilder:
    """
    Helper for structured writing of bytes into a RustBuffer.
    """

    def __init__(self):
        self.rbuf = RustBuffer.alloc(16)
        self.rbuf.len = 0

    def finalize(self):
        rbuf = self.rbuf
        self.rbuf = None
        return rbuf

    def discard(self):
        if self.rbuf is not None:
            rbuf = self.finalize()
            rbuf.free()

    @contextlib.contextmanager
    def _reserve(self, numBytes):
        if self.rbuf.len + numBytes > self.rbuf.capacity:
            self.rbuf = RustBuffer.reserve(self.rbuf, numBytes)
        yield None
        self.rbuf.len += numBytes

    def _pack_into(self, size, format, value):
        with self._reserve(size):
            # XXX TODO: I feel like I should be able to use `struct.pack_into` here but can't figure it out.
            for i, byte in enumerate(struct.pack(format, value)):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write(self, value):
        with self._reserve(len(value)):
            for i, byte in enumerate(value):
                self.rbuf.data[self.rbuf.len + i] = byte

    def writeI8(self, v):
        self._pack_into(1, ">b", v)

    def writeU8(self, v):
        self._pack_into(1, ">B", v)

    def writeI16(self, v):
        self._pack_into(2, ">h", v)

    def writeU16(self, v):
        self._pack_into(2, ">H", v)

    def writeI32(self, v):
        self._pack_into(4, ">i", v)

    def writeU32(self, v):
        self._pack_into(4, ">I", v)

    def writeI64(self, v):
        self._pack_into(8, ">q", v)

    def writeU64(self, v):
        self._pack_into(8, ">Q", v)

    def writeFloat(self, v):
        self._pack_into(4, ">f", v)

    def writeDouble(self, v):
        self._pack_into(8, ">d", v)

    def writeCSizeT(self, v):
        self._pack_into(ctypes.sizeof(ctypes.c_size_t) , "@N", v)
# A handful of classes and functions to support the generated data structures.
# This would be a good candidate for isolating in its own ffi-support lib.

class InternalError(Exception):
    pass

class RustCallStatus(ctypes.Structure):
    """
    Error runtime.
    """
    _fields_ = [
        ("code", ctypes.c_int8),
        ("error_buf", RustBuffer),
    ]

    # These match the values from the uniffi::rustcalls module
    CALL_SUCCESS = 0
    CALL_ERROR = 1
    CALL_PANIC = 2

    def __str__(self):
        if self.code == RustCallStatus.CALL_SUCCESS:
            return "RustCallStatus(CALL_SUCCESS)"
        elif self.code == RustCallStatus.CALL_ERROR:
            return "RustCallStatus(CALL_ERROR)"
        elif self.code == RustCallStatus.CALL_PANIC:
            return "RustCallStatus(CALL_PANIC)"
        else:
            return "RustCallStatus(<invalid code>)"

def rust_call(fn, *args):
    # Call a rust function
    return rust_call_with_error(None, fn, *args)

def rust_call_with_error(error_ffi_converter, fn, *args):
    # Call a rust function and handle any errors
    #
    # This function is used for rust calls that return Result<> and therefore can set the CALL_ERROR status code.
    # error_ffi_converter must be set to the FfiConverter for the error class that corresponds to the result.
    call_status = RustCallStatus(code=RustCallStatus.CALL_SUCCESS, error_buf=RustBuffer(0, 0, None))

    args_with_error = args + (ctypes.byref(call_status),)
    result = fn(*args_with_error)
    uniffi_check_call_status(error_ffi_converter, call_status)
    return result

def rust_call_async(scaffolding_fn, callback_fn, *args):
    # Call the scaffolding function, passing it a callback handler for `AsyncTypes.py` and a pointer
    # to a python Future object.  The async function then awaits the Future.
    uniffi_eventloop = asyncio.get_running_loop()
    uniffi_py_future = uniffi_eventloop.create_future()
    uniffi_call_status = RustCallStatus(code=RustCallStatus.CALL_SUCCESS, error_buf=RustBuffer(0, 0, None))
    scaffolding_fn(*args,
       FfiConverterForeignExecutor._pointer_manager.new_pointer(uniffi_eventloop),
       callback_fn,
       # Note: It's tempting to skip the pointer manager and just use a `py_object` pointing to a
       # local variable like we do in Swift.  However, Python doesn't use cooperative cancellation
       # -- asyncio can cancel a task at anytime.  This means if we use a local variable, the Rust
       # callback could fire with a dangling pointer.
       UniFfiPyFuturePointerManager.new_pointer(uniffi_py_future),
       ctypes.byref(uniffi_call_status),
    )
    uniffi_check_call_status(None, uniffi_call_status)
    return uniffi_py_future

def uniffi_check_call_status(error_ffi_converter, call_status):
    if call_status.code == RustCallStatus.CALL_SUCCESS:
        pass
    elif call_status.code == RustCallStatus.CALL_ERROR:
        if error_ffi_converter is None:
            call_status.error_buf.free()
            raise InternalError("rust_call_with_error: CALL_ERROR, but error_ffi_converter is None")
        else:
            raise error_ffi_converter.lift(call_status.error_buf)
    elif call_status.code == RustCallStatus.CALL_PANIC:
        # When the rust code sees a panic, it tries to construct a RustBuffer
        # with the message.  But if that code panics, then it just sends back
        # an empty buffer.
        if call_status.error_buf.len > 0:
            msg = FfiConverterString.lift(call_status.error_buf)
        else:
            msg = "Unknown rust panic"
        raise InternalError(msg)
    else:
        raise InternalError("Invalid RustCallStatus code: {}".format(
            call_status.code))

# A function pointer for a callback as defined by UniFFI.
# Rust definition `fn(handle: u64, method: u32, args: RustBuffer, buf_ptr: *mut RustBuffer) -> int`
FOREIGN_CALLBACK_T = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_ulonglong, ctypes.c_ulong, ctypes.POINTER(ctypes.c_char), ctypes.c_int, ctypes.POINTER(RustBuffer))
class UniFfiPointerManagerCPython:
    """
    Manage giving out pointers to Python objects on CPython

    This class is used to generate opaque pointers that reference Python objects to pass to Rust.
    It assumes a CPython platform.  See UniFfiPointerManagerGeneral for the alternative.
    """

    def new_pointer(self, obj):
        """
        Get a pointer for an object as a ctypes.c_size_t instance

        Each call to new_pointer() must be balanced with exactly one call to release_pointer()

        This returns a ctypes.c_size_t.  This is always the same size as a pointer and can be
        interchanged with pointers for FFI function arguments and return values.
        """
        # IncRef the object since we're going to pass a pointer to Rust
        ctypes.pythonapi.Py_IncRef(ctypes.py_object(obj))
        # id() is the object address on CPython
        # (https://docs.python.org/3/library/functions.html#id)
        return id(obj)

    def release_pointer(self, address):
        py_obj = ctypes.cast(address, ctypes.py_object)
        obj = py_obj.value
        ctypes.pythonapi.Py_DecRef(py_obj)
        return obj

    def lookup(self, address):
        return ctypes.cast(address, ctypes.py_object).value

class UniFfiPointerManagerGeneral:
    """
    Manage giving out pointers to Python objects on non-CPython platforms

    This has the same API as UniFfiPointerManagerCPython, but doesn't assume we're running on
    CPython and is slightly slower.

    Instead of using real pointers, it maps integer values to objects and returns the keys as
    c_size_t values.
    """

    def __init__(self):
        self._map = {}
        self._lock = threading.Lock()
        self._current_handle = 0

    def new_pointer(self, obj):
        with self._lock:
            handle = self._current_handle
            self._current_handle += 1
            self._map[handle] = obj
        return handle

    def release_pointer(self, handle):
        with self._lock:
            return self._map.pop(handle)

    def lookup(self, handle):
        with self._lock:
            return self._map[handle]

# Pick an pointer manager implementation based on the platform
if platform.python_implementation() == 'CPython':
    UniFfiPointerManager = UniFfiPointerManagerCPython  # type: ignore
else:
    UniFfiPointerManager = UniFfiPointerManagerGeneral  # type: ignore
# Types conforming to `FfiConverterPrimitive` pass themselves directly over the FFI.
class FfiConverterPrimitive:
    @classmethod
    def check(cls, value):
        return value

    @classmethod
    def lift(cls, value):
        return value

    @classmethod
    def lower(cls, value):
        return cls.lowerUnchecked(cls.check(value))

    @classmethod
    def lowerUnchecked(cls, value):
        return value

    @classmethod
    def write(cls, value, buf):
        cls.writeUnchecked(cls.check(value), buf)

class FfiConverterPrimitiveInt(FfiConverterPrimitive):
    @classmethod
    def check(cls, value):
        try:
            value = value.__index__()
        except Exception:
            raise TypeError("'{}' object cannot be interpreted as an integer".format(type(value).__name__))
        if not isinstance(value, int):
            raise TypeError("__index__ returned non-int (type {})".format(type(value).__name__))
        if not cls.VALUE_MIN <= value < cls.VALUE_MAX:
            raise ValueError("{} requires {} <= value < {}".format(cls.CLASS_NAME, cls.VALUE_MIN, cls.VALUE_MAX))
        return super().check(value)

class FfiConverterPrimitiveFloat(FfiConverterPrimitive):
    @classmethod
    def check(cls, value):
        try:
            value = value.__float__()
        except Exception:
            raise TypeError("must be real number, not {}".format(type(value).__name__))
        if not isinstance(value, float):
            raise TypeError("__float__ returned non-float (type {})".format(type(value).__name__))
        return super().check(value)

# Helper class for wrapper types that will always go through a RustBuffer.
# Classes should inherit from this and implement the `read` and `write` static methods.
class FfiConverterRustBuffer:
    @classmethod
    def lift(cls, rbuf):
        with rbuf.consumeWithStream() as stream:
            return cls.read(stream)

    @classmethod
    def lower(cls, value):
        with RustBuffer.allocWithBuilder() as builder:
            cls.write(value, builder)
            return builder.finalize()

# Contains loading, initialization code,
# and the FFI Function declarations in a com.sun.jna.Library.
# Define some ctypes FFI types that we use in the library

"""
ctypes type for the foreign executor callback.  This is a built-in interface for scheduling
tasks

Args:
  executor: opaque c_size_t value representing the eventloop
  delay: delay in ms
  task: function pointer to the task callback
  task_data: void pointer to the task callback data

Normally we should call task(task_data) after the detail.
However, when task is NULL this indicates that Rust has dropped the ForeignExecutor and we should
decrease the EventLoop refcount.
"""
UNIFFI_FOREIGN_EXECUTOR_CALLBACK_T = ctypes.CFUNCTYPE(None, ctypes.c_size_t, ctypes.c_uint32, ctypes.c_void_p, ctypes.c_void_p)

"""
Function pointer for a Rust task, which a callback function that takes a opaque pointer
"""
UNIFFI_RUST_TASK = ctypes.CFUNCTYPE(None, ctypes.c_void_p)

def uniffi_future_callback_t(return_type):
    """
    Factory function to create callback function types for async functions
    """
    return ctypes.CFUNCTYPE(None, ctypes.c_size_t, return_type, RustCallStatus)

from pathlib import Path

def loadIndirect():
    """
    This is how we find and load the dynamic library provided by the component.
    For now we just look it up by name.
    """
    if sys.platform == "darwin":
        libname = "lib{}.dylib"
    elif sys.platform.startswith("win"):
        # As of python3.8, ctypes does not seem to search $PATH when loading DLLs.
        # We could use `os.add_dll_directory` to configure the search path, but
        # it doesn't feel right to mess with application-wide settings. Let's
        # assume that the `.dll` is next to the `.py` file and load by full path.
        libname = os.path.join(
            os.path.dirname(__file__),
            "{}.dll",
        )
    else:
        # Anything else must be an ELF platform - Linux, *BSD, Solaris/illumos
        libname = "lib{}.so"

    libname = libname.format("payjoin_ffi")
    path = str(Path(__file__).parent / libname)
    lib = ctypes.cdll.LoadLibrary(path)
    return lib

def uniffi_check_contract_api_version(lib):
    # Get the bindings contract version from our ComponentInterface
    bindings_contract_version = 22
    # Get the scaffolding contract version by calling the into the dylib
    scaffolding_contract_version = lib.ffi_payjoin_ffi_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version:
        raise InternalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")

def uniffi_check_api_checksums(lib):
    if lib.uniffi_payjoin_ffi_checksum_method_scriptbuf_to_bytes() != 17531:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_scriptbuf_to_hex_string() != 9418:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_scriptbuf_as_string() != 58131:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_scriptbuf_to_asm_string() != 5384:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_address_as_string() != 55047:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_headers_get_map() != 25605:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_url_query() != 47908:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_uri_amount() != 44089:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_uri_address() != 15909:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_uri_check_pj_supported() != 25242:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_configuration_always_disable_output_substitution() != 9488:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_configuration_clamp_fee_contribution() != 8083:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_configuration_min_fee_rate() != 54870:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_partiallysignedtransaction_serialize() != 45849:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_partiallysignedtransaction_extract_tx() != 6070:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_partiallysignedtransaction_as_string() != 32034:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_context_process_response() != 3341:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_amount_to_btc() != 39645:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_amount_to_sat() != 11749:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_prjuri_create_pj_request() != 63928:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_prjuri_address() != 1626:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_prjuri_amount() != 4009:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_txid_as_string() != 38333:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_transaction_txid() != 4652:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_transaction_serialize() != 39639:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_uncheckedproposal_extract_tx_to_schedule_broadcast() != 28662:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_uncheckedproposal_check_can_broadcast() != 41678:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_uncheckedproposal_assume_interactive_receiver() != 23867:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_maybeinputsowned_check_inputs_not_owned() != 37633:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_maybemixedinputscripts_check_no_mixed_input_scripts() != 26267:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_maybeinputsseen_check_no_inputs_seen_before() != 11949:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_outputsunknown_identify_receiver_outputs() != 15844:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_provisionalproposal_contribute_witness_input() != 31996:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_provisionalproposal_contribute_non_witness_input() != 49566:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_provisionalproposal_substitute_output_address() != 6934:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_provisionalproposal_try_preserving_privacy() != 18598:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_provisionalproposal_finalize_proposal() != 56758:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_payjoinproposal_utxos_to_be_locked() != 55131:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_payjoinproposal_is_output_substitution_disabled() != 62839:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_payjoinproposal_owned_vouts() != 47791:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_method_payjoinproposal_psbt() != 18759:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_constructor_scriptbuf_new() != 27877:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_constructor_scriptbuf_from_string() != 39407:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_constructor_address_new() != 3978:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_constructor_address_from_script() != 21858:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_constructor_headers_from_vec() != 34862:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_constructor_url_new() != 23952:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_constructor_uri_new() != 35102:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_constructor_configuration_with_fee_contribution() != 61785:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_constructor_configuration_recommended() != 34192:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_constructor_configuration_non_incentivizing() != 27440:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_constructor_partiallysignedtransaction_from_string() != 53728:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_constructor_amount_from_sat() != 50973:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_constructor_amount_from_btc() != 19090:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_constructor_transaction_new() != 59478:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_constructor_uncheckedproposal_from_request() != 53808:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_constructor_feerate_zero() != 42970:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_constructor_feerate_min() != 23815:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_constructor_feerate_max() != 24959:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_constructor_feerate_broadcast_min() != 45266:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_constructor_feerate_dust() != 27864:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payjoin_ffi_checksum_constructor_feerate_from_sat_per_kwu() != 6841:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")

# A ctypes library to expose the extern-C FFI definitions.
# This is an implementation detail which will be called internally by the public API.

_UniFFILib = loadIndirect()
_UniFFILib.uniffi_payjoin_ffi_fn_free_scriptbuf.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_free_scriptbuf.restype = None
_UniFFILib.uniffi_payjoin_ffi_fn_constructor_scriptbuf_new.argtypes = (
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_constructor_scriptbuf_new.restype = ctypes.c_void_p
_UniFFILib.uniffi_payjoin_ffi_fn_constructor_scriptbuf_from_string.argtypes = (
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_constructor_scriptbuf_from_string.restype = ctypes.c_void_p
_UniFFILib.uniffi_payjoin_ffi_fn_method_scriptbuf_to_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_method_scriptbuf_to_bytes.restype = RustBuffer
_UniFFILib.uniffi_payjoin_ffi_fn_method_scriptbuf_to_hex_string.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_method_scriptbuf_to_hex_string.restype = RustBuffer
_UniFFILib.uniffi_payjoin_ffi_fn_method_scriptbuf_as_string.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_method_scriptbuf_as_string.restype = RustBuffer
_UniFFILib.uniffi_payjoin_ffi_fn_method_scriptbuf_to_asm_string.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_method_scriptbuf_to_asm_string.restype = RustBuffer
_UniFFILib.uniffi_payjoin_ffi_fn_free_address.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_free_address.restype = None
_UniFFILib.uniffi_payjoin_ffi_fn_constructor_address_new.argtypes = (
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_constructor_address_new.restype = ctypes.c_void_p
_UniFFILib.uniffi_payjoin_ffi_fn_constructor_address_from_script.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_constructor_address_from_script.restype = ctypes.c_void_p
_UniFFILib.uniffi_payjoin_ffi_fn_method_address_as_string.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_method_address_as_string.restype = RustBuffer
_UniFFILib.uniffi_payjoin_ffi_fn_free_headers.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_free_headers.restype = None
_UniFFILib.uniffi_payjoin_ffi_fn_constructor_headers_from_vec.argtypes = (
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_constructor_headers_from_vec.restype = ctypes.c_void_p
_UniFFILib.uniffi_payjoin_ffi_fn_method_headers_get_map.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_method_headers_get_map.restype = RustBuffer
_UniFFILib.uniffi_payjoin_ffi_fn_free_url.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_free_url.restype = None
_UniFFILib.uniffi_payjoin_ffi_fn_constructor_url_new.argtypes = (
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_constructor_url_new.restype = ctypes.c_void_p
_UniFFILib.uniffi_payjoin_ffi_fn_method_url_query.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_method_url_query.restype = RustBuffer
_UniFFILib.uniffi_payjoin_ffi_fn_free_uri.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_free_uri.restype = None
_UniFFILib.uniffi_payjoin_ffi_fn_constructor_uri_new.argtypes = (
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_constructor_uri_new.restype = ctypes.c_void_p
_UniFFILib.uniffi_payjoin_ffi_fn_method_uri_amount.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_method_uri_amount.restype = RustBuffer
_UniFFILib.uniffi_payjoin_ffi_fn_method_uri_address.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_method_uri_address.restype = ctypes.c_void_p
_UniFFILib.uniffi_payjoin_ffi_fn_method_uri_check_pj_supported.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_method_uri_check_pj_supported.restype = ctypes.c_void_p
_UniFFILib.uniffi_payjoin_ffi_fn_free_configuration.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_free_configuration.restype = None
_UniFFILib.uniffi_payjoin_ffi_fn_constructor_configuration_with_fee_contribution.argtypes = (
    ctypes.c_uint64,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_constructor_configuration_with_fee_contribution.restype = ctypes.c_void_p
_UniFFILib.uniffi_payjoin_ffi_fn_constructor_configuration_recommended.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_constructor_configuration_recommended.restype = ctypes.c_void_p
_UniFFILib.uniffi_payjoin_ffi_fn_constructor_configuration_non_incentivizing.argtypes = (
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_constructor_configuration_non_incentivizing.restype = ctypes.c_void_p
_UniFFILib.uniffi_payjoin_ffi_fn_method_configuration_always_disable_output_substitution.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int8,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_method_configuration_always_disable_output_substitution.restype = None
_UniFFILib.uniffi_payjoin_ffi_fn_method_configuration_clamp_fee_contribution.argtypes = (
    ctypes.c_void_p,
    ctypes.c_int8,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_method_configuration_clamp_fee_contribution.restype = None
_UniFFILib.uniffi_payjoin_ffi_fn_method_configuration_min_fee_rate.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_method_configuration_min_fee_rate.restype = None
_UniFFILib.uniffi_payjoin_ffi_fn_free_partiallysignedtransaction.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_free_partiallysignedtransaction.restype = None
_UniFFILib.uniffi_payjoin_ffi_fn_constructor_partiallysignedtransaction_from_string.argtypes = (
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_constructor_partiallysignedtransaction_from_string.restype = ctypes.c_void_p
_UniFFILib.uniffi_payjoin_ffi_fn_method_partiallysignedtransaction_serialize.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_method_partiallysignedtransaction_serialize.restype = RustBuffer
_UniFFILib.uniffi_payjoin_ffi_fn_method_partiallysignedtransaction_extract_tx.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_method_partiallysignedtransaction_extract_tx.restype = ctypes.c_void_p
_UniFFILib.uniffi_payjoin_ffi_fn_method_partiallysignedtransaction_as_string.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_method_partiallysignedtransaction_as_string.restype = RustBuffer
_UniFFILib.uniffi_payjoin_ffi_fn_free_context.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_free_context.restype = None
_UniFFILib.uniffi_payjoin_ffi_fn_method_context_process_response.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_method_context_process_response.restype = ctypes.c_void_p
_UniFFILib.uniffi_payjoin_ffi_fn_free_amount.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_free_amount.restype = None
_UniFFILib.uniffi_payjoin_ffi_fn_constructor_amount_from_sat.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_constructor_amount_from_sat.restype = ctypes.c_void_p
_UniFFILib.uniffi_payjoin_ffi_fn_constructor_amount_from_btc.argtypes = (
    ctypes.c_double,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_constructor_amount_from_btc.restype = ctypes.c_void_p
_UniFFILib.uniffi_payjoin_ffi_fn_method_amount_to_btc.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_method_amount_to_btc.restype = ctypes.c_double
_UniFFILib.uniffi_payjoin_ffi_fn_method_amount_to_sat.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_method_amount_to_sat.restype = ctypes.c_uint64
_UniFFILib.uniffi_payjoin_ffi_fn_free_prjuri.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_free_prjuri.restype = None
_UniFFILib.uniffi_payjoin_ffi_fn_method_prjuri_create_pj_request.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_method_prjuri_create_pj_request.restype = RustBuffer
_UniFFILib.uniffi_payjoin_ffi_fn_method_prjuri_address.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_method_prjuri_address.restype = ctypes.c_void_p
_UniFFILib.uniffi_payjoin_ffi_fn_method_prjuri_amount.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_method_prjuri_amount.restype = RustBuffer
_UniFFILib.uniffi_payjoin_ffi_fn_free_txid.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_free_txid.restype = None
_UniFFILib.uniffi_payjoin_ffi_fn_method_txid_as_string.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_method_txid_as_string.restype = RustBuffer
_UniFFILib.uniffi_payjoin_ffi_fn_free_transaction.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_free_transaction.restype = None
_UniFFILib.uniffi_payjoin_ffi_fn_constructor_transaction_new.argtypes = (
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_constructor_transaction_new.restype = ctypes.c_void_p
_UniFFILib.uniffi_payjoin_ffi_fn_method_transaction_txid.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_method_transaction_txid.restype = ctypes.c_void_p
_UniFFILib.uniffi_payjoin_ffi_fn_method_transaction_serialize.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_method_transaction_serialize.restype = RustBuffer
_UniFFILib.uniffi_payjoin_ffi_fn_free_uncheckedproposal.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_free_uncheckedproposal.restype = None
_UniFFILib.uniffi_payjoin_ffi_fn_constructor_uncheckedproposal_from_request.argtypes = (
    RustBuffer,
    RustBuffer,
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_constructor_uncheckedproposal_from_request.restype = ctypes.c_void_p
_UniFFILib.uniffi_payjoin_ffi_fn_method_uncheckedproposal_extract_tx_to_schedule_broadcast.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_method_uncheckedproposal_extract_tx_to_schedule_broadcast.restype = ctypes.c_void_p
_UniFFILib.uniffi_payjoin_ffi_fn_method_uncheckedproposal_check_can_broadcast.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_method_uncheckedproposal_check_can_broadcast.restype = ctypes.c_void_p
_UniFFILib.uniffi_payjoin_ffi_fn_method_uncheckedproposal_assume_interactive_receiver.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_method_uncheckedproposal_assume_interactive_receiver.restype = ctypes.c_void_p
_UniFFILib.uniffi_payjoin_ffi_fn_free_maybeinputsowned.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_free_maybeinputsowned.restype = None
_UniFFILib.uniffi_payjoin_ffi_fn_method_maybeinputsowned_check_inputs_not_owned.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_method_maybeinputsowned_check_inputs_not_owned.restype = ctypes.c_void_p
_UniFFILib.uniffi_payjoin_ffi_fn_free_maybemixedinputscripts.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_free_maybemixedinputscripts.restype = None
_UniFFILib.uniffi_payjoin_ffi_fn_method_maybemixedinputscripts_check_no_mixed_input_scripts.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_method_maybemixedinputscripts_check_no_mixed_input_scripts.restype = ctypes.c_void_p
_UniFFILib.uniffi_payjoin_ffi_fn_free_maybeinputsseen.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_free_maybeinputsseen.restype = None
_UniFFILib.uniffi_payjoin_ffi_fn_method_maybeinputsseen_check_no_inputs_seen_before.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_method_maybeinputsseen_check_no_inputs_seen_before.restype = ctypes.c_void_p
_UniFFILib.uniffi_payjoin_ffi_fn_free_outputsunknown.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_free_outputsunknown.restype = None
_UniFFILib.uniffi_payjoin_ffi_fn_method_outputsunknown_identify_receiver_outputs.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_method_outputsunknown_identify_receiver_outputs.restype = ctypes.c_void_p
_UniFFILib.uniffi_payjoin_ffi_fn_free_feerate.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_free_feerate.restype = None
_UniFFILib.uniffi_payjoin_ffi_fn_constructor_feerate_zero.argtypes = (
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_constructor_feerate_zero.restype = ctypes.c_void_p
_UniFFILib.uniffi_payjoin_ffi_fn_constructor_feerate_min.argtypes = (
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_constructor_feerate_min.restype = ctypes.c_void_p
_UniFFILib.uniffi_payjoin_ffi_fn_constructor_feerate_max.argtypes = (
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_constructor_feerate_max.restype = ctypes.c_void_p
_UniFFILib.uniffi_payjoin_ffi_fn_constructor_feerate_broadcast_min.argtypes = (
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_constructor_feerate_broadcast_min.restype = ctypes.c_void_p
_UniFFILib.uniffi_payjoin_ffi_fn_constructor_feerate_dust.argtypes = (
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_constructor_feerate_dust.restype = ctypes.c_void_p
_UniFFILib.uniffi_payjoin_ffi_fn_constructor_feerate_from_sat_per_kwu.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_constructor_feerate_from_sat_per_kwu.restype = ctypes.c_void_p
_UniFFILib.uniffi_payjoin_ffi_fn_free_provisionalproposal.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_free_provisionalproposal.restype = None
_UniFFILib.uniffi_payjoin_ffi_fn_method_provisionalproposal_contribute_witness_input.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_method_provisionalproposal_contribute_witness_input.restype = None
_UniFFILib.uniffi_payjoin_ffi_fn_method_provisionalproposal_contribute_non_witness_input.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_method_provisionalproposal_contribute_non_witness_input.restype = None
_UniFFILib.uniffi_payjoin_ffi_fn_method_provisionalproposal_substitute_output_address.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_method_provisionalproposal_substitute_output_address.restype = None
_UniFFILib.uniffi_payjoin_ffi_fn_method_provisionalproposal_try_preserving_privacy.argtypes = (
    ctypes.c_void_p,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_method_provisionalproposal_try_preserving_privacy.restype = RustBuffer
_UniFFILib.uniffi_payjoin_ffi_fn_method_provisionalproposal_finalize_proposal.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_method_provisionalproposal_finalize_proposal.restype = ctypes.c_void_p
_UniFFILib.uniffi_payjoin_ffi_fn_free_payjoinproposal.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_free_payjoinproposal.restype = None
_UniFFILib.uniffi_payjoin_ffi_fn_method_payjoinproposal_utxos_to_be_locked.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_method_payjoinproposal_utxos_to_be_locked.restype = RustBuffer
_UniFFILib.uniffi_payjoin_ffi_fn_method_payjoinproposal_is_output_substitution_disabled.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_method_payjoinproposal_is_output_substitution_disabled.restype = ctypes.c_int8
_UniFFILib.uniffi_payjoin_ffi_fn_method_payjoinproposal_owned_vouts.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_method_payjoinproposal_owned_vouts.restype = RustBuffer
_UniFFILib.uniffi_payjoin_ffi_fn_method_payjoinproposal_psbt.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_method_payjoinproposal_psbt.restype = ctypes.c_void_p
_UniFFILib.uniffi_payjoin_ffi_fn_init_callback_canbroadcast.argtypes = (
    FOREIGN_CALLBACK_T,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_init_callback_canbroadcast.restype = None
_UniFFILib.uniffi_payjoin_ffi_fn_init_callback_isscriptowned.argtypes = (
    FOREIGN_CALLBACK_T,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_init_callback_isscriptowned.restype = None
_UniFFILib.uniffi_payjoin_ffi_fn_init_callback_isoutputknown.argtypes = (
    FOREIGN_CALLBACK_T,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_init_callback_isoutputknown.restype = None
_UniFFILib.uniffi_payjoin_ffi_fn_init_callback_processpartiallysignedtransaction.argtypes = (
    FOREIGN_CALLBACK_T,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_payjoin_ffi_fn_init_callback_processpartiallysignedtransaction.restype = None
_UniFFILib.ffi_payjoin_ffi_rustbuffer_alloc.argtypes = (
    ctypes.c_int32,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.ffi_payjoin_ffi_rustbuffer_alloc.restype = RustBuffer
_UniFFILib.ffi_payjoin_ffi_rustbuffer_from_bytes.argtypes = (
    ForeignBytes,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.ffi_payjoin_ffi_rustbuffer_from_bytes.restype = RustBuffer
_UniFFILib.ffi_payjoin_ffi_rustbuffer_free.argtypes = (
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.ffi_payjoin_ffi_rustbuffer_free.restype = None
_UniFFILib.ffi_payjoin_ffi_rustbuffer_reserve.argtypes = (
    RustBuffer,
    ctypes.c_int32,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.ffi_payjoin_ffi_rustbuffer_reserve.restype = RustBuffer
_UniFFILib.uniffi_payjoin_ffi_checksum_method_scriptbuf_to_bytes.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_method_scriptbuf_to_bytes.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_method_scriptbuf_to_hex_string.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_method_scriptbuf_to_hex_string.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_method_scriptbuf_as_string.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_method_scriptbuf_as_string.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_method_scriptbuf_to_asm_string.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_method_scriptbuf_to_asm_string.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_method_address_as_string.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_method_address_as_string.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_method_headers_get_map.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_method_headers_get_map.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_method_url_query.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_method_url_query.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_method_uri_amount.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_method_uri_amount.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_method_uri_address.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_method_uri_address.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_method_uri_check_pj_supported.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_method_uri_check_pj_supported.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_method_configuration_always_disable_output_substitution.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_method_configuration_always_disable_output_substitution.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_method_configuration_clamp_fee_contribution.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_method_configuration_clamp_fee_contribution.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_method_configuration_min_fee_rate.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_method_configuration_min_fee_rate.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_method_partiallysignedtransaction_serialize.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_method_partiallysignedtransaction_serialize.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_method_partiallysignedtransaction_extract_tx.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_method_partiallysignedtransaction_extract_tx.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_method_partiallysignedtransaction_as_string.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_method_partiallysignedtransaction_as_string.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_method_context_process_response.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_method_context_process_response.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_method_amount_to_btc.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_method_amount_to_btc.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_method_amount_to_sat.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_method_amount_to_sat.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_method_prjuri_create_pj_request.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_method_prjuri_create_pj_request.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_method_prjuri_address.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_method_prjuri_address.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_method_prjuri_amount.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_method_prjuri_amount.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_method_txid_as_string.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_method_txid_as_string.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_method_transaction_txid.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_method_transaction_txid.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_method_transaction_serialize.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_method_transaction_serialize.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_method_uncheckedproposal_extract_tx_to_schedule_broadcast.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_method_uncheckedproposal_extract_tx_to_schedule_broadcast.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_method_uncheckedproposal_check_can_broadcast.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_method_uncheckedproposal_check_can_broadcast.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_method_uncheckedproposal_assume_interactive_receiver.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_method_uncheckedproposal_assume_interactive_receiver.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_method_maybeinputsowned_check_inputs_not_owned.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_method_maybeinputsowned_check_inputs_not_owned.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_method_maybemixedinputscripts_check_no_mixed_input_scripts.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_method_maybemixedinputscripts_check_no_mixed_input_scripts.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_method_maybeinputsseen_check_no_inputs_seen_before.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_method_maybeinputsseen_check_no_inputs_seen_before.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_method_outputsunknown_identify_receiver_outputs.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_method_outputsunknown_identify_receiver_outputs.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_method_provisionalproposal_contribute_witness_input.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_method_provisionalproposal_contribute_witness_input.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_method_provisionalproposal_contribute_non_witness_input.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_method_provisionalproposal_contribute_non_witness_input.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_method_provisionalproposal_substitute_output_address.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_method_provisionalproposal_substitute_output_address.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_method_provisionalproposal_try_preserving_privacy.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_method_provisionalproposal_try_preserving_privacy.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_method_provisionalproposal_finalize_proposal.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_method_provisionalproposal_finalize_proposal.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_method_payjoinproposal_utxos_to_be_locked.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_method_payjoinproposal_utxos_to_be_locked.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_method_payjoinproposal_is_output_substitution_disabled.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_method_payjoinproposal_is_output_substitution_disabled.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_method_payjoinproposal_owned_vouts.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_method_payjoinproposal_owned_vouts.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_method_payjoinproposal_psbt.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_method_payjoinproposal_psbt.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_constructor_scriptbuf_new.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_constructor_scriptbuf_new.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_constructor_scriptbuf_from_string.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_constructor_scriptbuf_from_string.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_constructor_address_new.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_constructor_address_new.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_constructor_address_from_script.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_constructor_address_from_script.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_constructor_headers_from_vec.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_constructor_headers_from_vec.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_constructor_url_new.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_constructor_url_new.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_constructor_uri_new.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_constructor_uri_new.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_constructor_configuration_with_fee_contribution.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_constructor_configuration_with_fee_contribution.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_constructor_configuration_recommended.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_constructor_configuration_recommended.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_constructor_configuration_non_incentivizing.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_constructor_configuration_non_incentivizing.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_constructor_partiallysignedtransaction_from_string.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_constructor_partiallysignedtransaction_from_string.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_constructor_amount_from_sat.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_constructor_amount_from_sat.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_constructor_amount_from_btc.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_constructor_amount_from_btc.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_constructor_transaction_new.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_constructor_transaction_new.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_constructor_uncheckedproposal_from_request.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_constructor_uncheckedproposal_from_request.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_constructor_feerate_zero.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_constructor_feerate_zero.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_constructor_feerate_min.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_constructor_feerate_min.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_constructor_feerate_max.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_constructor_feerate_max.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_constructor_feerate_broadcast_min.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_constructor_feerate_broadcast_min.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_constructor_feerate_dust.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_constructor_feerate_dust.restype = ctypes.c_uint16
_UniFFILib.uniffi_payjoin_ffi_checksum_constructor_feerate_from_sat_per_kwu.argtypes = (
)
_UniFFILib.uniffi_payjoin_ffi_checksum_constructor_feerate_from_sat_per_kwu.restype = ctypes.c_uint16
_UniFFILib.ffi_payjoin_ffi_uniffi_contract_version.argtypes = (
)
_UniFFILib.ffi_payjoin_ffi_uniffi_contract_version.restype = ctypes.c_uint32
uniffi_check_contract_api_version(_UniFFILib)
uniffi_check_api_checksums(_UniFFILib)

# Public interface members begin here.


class FfiConverterUInt8(FfiConverterPrimitiveInt):
    CLASS_NAME = "u8"
    VALUE_MIN = 0
    VALUE_MAX = 2**8

    @staticmethod
    def read(buf):
        return buf.readU8()

    @staticmethod
    def writeUnchecked(value, buf):
        buf.writeU8(value)

class FfiConverterUInt32(FfiConverterPrimitiveInt):
    CLASS_NAME = "u32"
    VALUE_MIN = 0
    VALUE_MAX = 2**32

    @staticmethod
    def read(buf):
        return buf.readU32()

    @staticmethod
    def writeUnchecked(value, buf):
        buf.writeU32(value)

class FfiConverterUInt64(FfiConverterPrimitiveInt):
    CLASS_NAME = "u64"
    VALUE_MIN = 0
    VALUE_MAX = 2**64

    @staticmethod
    def read(buf):
        return buf.readU64()

    @staticmethod
    def writeUnchecked(value, buf):
        buf.writeU64(value)

class FfiConverterDouble(FfiConverterPrimitiveFloat):
    @staticmethod
    def read(buf):
        return buf.readDouble()

    @staticmethod
    def writeUnchecked(value, buf):
        buf.writeDouble(value)

class FfiConverterBool(FfiConverterPrimitive):
    @classmethod
    def check(cls, value):
        return not not value

    @classmethod
    def read(cls, buf):
        return cls.lift(buf.readU8())

    @classmethod
    def writeUnchecked(cls, value, buf):
        buf.writeU8(value)

    @staticmethod
    def lift(value):
        return value != 0

class FfiConverterString:
    @staticmethod
    def check(value):
        if not isinstance(value, str):
            raise TypeError("argument must be str, not {}".format(type(value).__name__))
        return value

    @staticmethod
    def read(buf):
        size = buf.readI32()
        if size < 0:
            raise InternalError("Unexpected negative string length")
        utf8Bytes = buf.read(size)
        return utf8Bytes.decode("utf-8")

    @staticmethod
    def write(value, buf):
        value = FfiConverterString.check(value)
        utf8Bytes = value.encode("utf-8")
        buf.writeI32(len(utf8Bytes))
        buf.write(utf8Bytes)

    @staticmethod
    def lift(buf):
        with buf.consumeWithStream() as stream:
            return stream.read(stream.remaining()).decode("utf-8")

    @staticmethod
    def lower(value):
        value = FfiConverterString.check(value)
        with RustBuffer.allocWithBuilder() as builder:
            builder.write(value.encode("utf-8"))
            return builder.finalize()



class Address:
    _pointer: ctypes.c_void_p
    def __init__(self, address: "str"):
        
        self._pointer = rust_call_with_error(FfiConverterTypePayjoinError,_UniFFILib.uniffi_payjoin_ffi_fn_constructor_address_new,
        FfiConverterString.lower(address))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_free_address, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_script(cls, script: "ScriptBuf",network: "Network"):
        
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = rust_call_with_error(FfiConverterTypePayjoinError,_UniFFILib.uniffi_payjoin_ffi_fn_constructor_address_from_script,
        FfiConverterTypeScriptBuf.lower(script),
        FfiConverterTypeNetwork.lower(network))
        return cls._make_instance_(pointer)



    def as_string(self, ) -> "str":
        return FfiConverterString.lift(
            rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_method_address_as_string,self._pointer,)
        )






class FfiConverterTypeAddress:
    @classmethod
    def read(cls, buf):
        ptr = buf.readU64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, Address):
            raise TypeError("Expected Address instance, {} found".format(value.__class__.__name__))
        buf.writeU64(cls.lower(value))

    @staticmethod
    def lift(value):
        return Address._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class Amount:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_free_amount, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_sat(cls, sats: "int"):
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_constructor_amount_from_sat,
        FfiConverterUInt64.lower(sats))
        return cls._make_instance_(pointer)


    @classmethod
    def from_btc(cls, btc: "float"):
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_constructor_amount_from_btc,
        FfiConverterDouble.lower(btc))
        return cls._make_instance_(pointer)



    def to_btc(self, ) -> "float":
        return FfiConverterDouble.lift(
            rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_method_amount_to_btc,self._pointer,)
        )






    def to_sat(self, ) -> "int":
        return FfiConverterUInt64.lift(
            rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_method_amount_to_sat,self._pointer,)
        )






class FfiConverterTypeAmount:
    @classmethod
    def read(cls, buf):
        ptr = buf.readU64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, Amount):
            raise TypeError("Expected Amount instance, {} found".format(value.__class__.__name__))
        buf.writeU64(cls.lower(value))

    @staticmethod
    def lift(value):
        return Amount._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class Configuration:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_free_configuration, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def with_fee_contribution(cls, max_fee_contribution: "int",change_index: "typing.Optional[int]"):
        
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_constructor_configuration_with_fee_contribution,
        FfiConverterUInt64.lower(max_fee_contribution),
        FfiConverterOptionalUInt64.lower(change_index))
        return cls._make_instance_(pointer)


    @classmethod
    def recommended(cls, psbt: "PartiallySignedTransaction",payout_scripts: "typing.List[ScriptBuf]",min_fee_rate: "FeeRate"):
        
        
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = rust_call_with_error(FfiConverterTypePayjoinError,_UniFFILib.uniffi_payjoin_ffi_fn_constructor_configuration_recommended,
        FfiConverterTypePartiallySignedTransaction.lower(psbt),
        FfiConverterSequenceTypeScriptBuf.lower(payout_scripts),
        FfiConverterTypeFeeRate.lower(min_fee_rate))
        return cls._make_instance_(pointer)


    @classmethod
    def non_incentivizing(cls, ):
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_constructor_configuration_non_incentivizing,)
        return cls._make_instance_(pointer)



    def always_disable_output_substitution(self, disable: "bool"):
        
        rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_method_configuration_always_disable_output_substitution,self._pointer,
        FfiConverterBool.lower(disable))







    def clamp_fee_contribution(self, clamp: "bool"):
        
        rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_method_configuration_clamp_fee_contribution,self._pointer,
        FfiConverterBool.lower(clamp))







    def min_fee_rate(self, fee_rate: "FeeRate"):
        
        rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_method_configuration_min_fee_rate,self._pointer,
        FfiConverterTypeFeeRate.lower(fee_rate))







class FfiConverterTypeConfiguration:
    @classmethod
    def read(cls, buf):
        ptr = buf.readU64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, Configuration):
            raise TypeError("Expected Configuration instance, {} found".format(value.__class__.__name__))
        buf.writeU64(cls.lower(value))

    @staticmethod
    def lift(value):
        return Configuration._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class Context:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_free_context, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def process_response(self, response: "str") -> "PartiallySignedTransaction":
        
        return FfiConverterTypePartiallySignedTransaction.lift(
            rust_call_with_error(
    FfiConverterTypePayjoinError,_UniFFILib.uniffi_payjoin_ffi_fn_method_context_process_response,self._pointer,
        FfiConverterString.lower(response))
        )






class FfiConverterTypeContext:
    @classmethod
    def read(cls, buf):
        ptr = buf.readU64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, Context):
            raise TypeError("Expected Context instance, {} found".format(value.__class__.__name__))
        buf.writeU64(cls.lower(value))

    @staticmethod
    def lift(value):
        return Context._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class FeeRate:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_free_feerate, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def zero(cls, ):
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_constructor_feerate_zero,)
        return cls._make_instance_(pointer)


    @classmethod
    def min(cls, ):
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_constructor_feerate_min,)
        return cls._make_instance_(pointer)


    @classmethod
    def max(cls, ):
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_constructor_feerate_max,)
        return cls._make_instance_(pointer)


    @classmethod
    def broadcast_min(cls, ):
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_constructor_feerate_broadcast_min,)
        return cls._make_instance_(pointer)


    @classmethod
    def dust(cls, ):
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_constructor_feerate_dust,)
        return cls._make_instance_(pointer)


    @classmethod
    def from_sat_per_kwu(cls, sat_kwu: "int"):
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_constructor_feerate_from_sat_per_kwu,
        FfiConverterUInt64.lower(sat_kwu))
        return cls._make_instance_(pointer)



class FfiConverterTypeFeeRate:
    @classmethod
    def read(cls, buf):
        ptr = buf.readU64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, FeeRate):
            raise TypeError("Expected FeeRate instance, {} found".format(value.__class__.__name__))
        buf.writeU64(cls.lower(value))

    @staticmethod
    def lift(value):
        return FeeRate._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class Headers:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_free_headers, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_vec(cls, body: "typing.List[int]"):
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_constructor_headers_from_vec,
        FfiConverterSequenceUInt8.lower(body))
        return cls._make_instance_(pointer)



    def get_map(self, ) -> "dict":
        return FfiConverterMapStringString.lift(
            rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_method_headers_get_map,self._pointer,)
        )






class FfiConverterTypeHeaders:
    @classmethod
    def read(cls, buf):
        ptr = buf.readU64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, Headers):
            raise TypeError("Expected Headers instance, {} found".format(value.__class__.__name__))
        buf.writeU64(cls.lower(value))

    @staticmethod
    def lift(value):
        return Headers._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class MaybeInputsOwned:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_free_maybeinputsowned, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def check_inputs_not_owned(self, is_owned: "IsScriptOwned") -> "MaybeMixedInputScripts":
        
        return FfiConverterTypeMaybeMixedInputScripts.lift(
            rust_call_with_error(
    FfiConverterTypePayjoinError,_UniFFILib.uniffi_payjoin_ffi_fn_method_maybeinputsowned_check_inputs_not_owned,self._pointer,
        FfiConverterCallbackInterfaceIsScriptOwned.lower(is_owned))
        )






class FfiConverterTypeMaybeInputsOwned:
    @classmethod
    def read(cls, buf):
        ptr = buf.readU64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, MaybeInputsOwned):
            raise TypeError("Expected MaybeInputsOwned instance, {} found".format(value.__class__.__name__))
        buf.writeU64(cls.lower(value))

    @staticmethod
    def lift(value):
        return MaybeInputsOwned._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class MaybeInputsSeen:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_free_maybeinputsseen, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def check_no_inputs_seen_before(self, is_known: "IsOutputKnown") -> "OutputsUnknown":
        
        return FfiConverterTypeOutputsUnknown.lift(
            rust_call_with_error(
    FfiConverterTypePayjoinError,_UniFFILib.uniffi_payjoin_ffi_fn_method_maybeinputsseen_check_no_inputs_seen_before,self._pointer,
        FfiConverterCallbackInterfaceIsOutputKnown.lower(is_known))
        )






class FfiConverterTypeMaybeInputsSeen:
    @classmethod
    def read(cls, buf):
        ptr = buf.readU64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, MaybeInputsSeen):
            raise TypeError("Expected MaybeInputsSeen instance, {} found".format(value.__class__.__name__))
        buf.writeU64(cls.lower(value))

    @staticmethod
    def lift(value):
        return MaybeInputsSeen._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class MaybeMixedInputScripts:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_free_maybemixedinputscripts, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def check_no_mixed_input_scripts(self, ) -> "MaybeInputsSeen":
        return FfiConverterTypeMaybeInputsSeen.lift(
            rust_call_with_error(
    FfiConverterTypePayjoinError,_UniFFILib.uniffi_payjoin_ffi_fn_method_maybemixedinputscripts_check_no_mixed_input_scripts,self._pointer,)
        )






class FfiConverterTypeMaybeMixedInputScripts:
    @classmethod
    def read(cls, buf):
        ptr = buf.readU64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, MaybeMixedInputScripts):
            raise TypeError("Expected MaybeMixedInputScripts instance, {} found".format(value.__class__.__name__))
        buf.writeU64(cls.lower(value))

    @staticmethod
    def lift(value):
        return MaybeMixedInputScripts._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class OutputsUnknown:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_free_outputsunknown, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def identify_receiver_outputs(self, is_receiver_output: "IsScriptOwned") -> "ProvisionalProposal":
        
        return FfiConverterTypeProvisionalProposal.lift(
            rust_call_with_error(
    FfiConverterTypePayjoinError,_UniFFILib.uniffi_payjoin_ffi_fn_method_outputsunknown_identify_receiver_outputs,self._pointer,
        FfiConverterCallbackInterfaceIsScriptOwned.lower(is_receiver_output))
        )






class FfiConverterTypeOutputsUnknown:
    @classmethod
    def read(cls, buf):
        ptr = buf.readU64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, OutputsUnknown):
            raise TypeError("Expected OutputsUnknown instance, {} found".format(value.__class__.__name__))
        buf.writeU64(cls.lower(value))

    @staticmethod
    def lift(value):
        return OutputsUnknown._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class PartiallySignedTransaction:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_free_partiallysignedtransaction, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_string(cls, psbt_base64: "str"):
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = rust_call_with_error(FfiConverterTypePayjoinError,_UniFFILib.uniffi_payjoin_ffi_fn_constructor_partiallysignedtransaction_from_string,
        FfiConverterString.lower(psbt_base64))
        return cls._make_instance_(pointer)



    def serialize(self, ) -> "typing.List[int]":
        return FfiConverterSequenceUInt8.lift(
            rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_method_partiallysignedtransaction_serialize,self._pointer,)
        )






    def extract_tx(self, ) -> "Transaction":
        return FfiConverterTypeTransaction.lift(
            rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_method_partiallysignedtransaction_extract_tx,self._pointer,)
        )






    def as_string(self, ) -> "str":
        return FfiConverterString.lift(
            rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_method_partiallysignedtransaction_as_string,self._pointer,)
        )






class FfiConverterTypePartiallySignedTransaction:
    @classmethod
    def read(cls, buf):
        ptr = buf.readU64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, PartiallySignedTransaction):
            raise TypeError("Expected PartiallySignedTransaction instance, {} found".format(value.__class__.__name__))
        buf.writeU64(cls.lower(value))

    @staticmethod
    def lift(value):
        return PartiallySignedTransaction._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class PayjoinProposal:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_free_payjoinproposal, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def utxos_to_be_locked(self, ) -> "typing.List[OutPoint]":
        return FfiConverterSequenceTypeOutPoint.lift(
            rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_method_payjoinproposal_utxos_to_be_locked,self._pointer,)
        )






    def is_output_substitution_disabled(self, ) -> "bool":
        return FfiConverterBool.lift(
            rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_method_payjoinproposal_is_output_substitution_disabled,self._pointer,)
        )






    def owned_vouts(self, ) -> "typing.List[int]":
        return FfiConverterSequenceUInt64.lift(
            rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_method_payjoinproposal_owned_vouts,self._pointer,)
        )






    def psbt(self, ) -> "PartiallySignedTransaction":
        return FfiConverterTypePartiallySignedTransaction.lift(
            rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_method_payjoinproposal_psbt,self._pointer,)
        )






class FfiConverterTypePayjoinProposal:
    @classmethod
    def read(cls, buf):
        ptr = buf.readU64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, PayjoinProposal):
            raise TypeError("Expected PayjoinProposal instance, {} found".format(value.__class__.__name__))
        buf.writeU64(cls.lower(value))

    @staticmethod
    def lift(value):
        return PayjoinProposal._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class PrjUri:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_free_prjuri, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def create_pj_request(self, psbt: "PartiallySignedTransaction",params: "Configuration") -> "PrjUriRequest":
        
        
        return FfiConverterTypePrjUriRequest.lift(
            rust_call_with_error(
    FfiConverterTypePayjoinError,_UniFFILib.uniffi_payjoin_ffi_fn_method_prjuri_create_pj_request,self._pointer,
        FfiConverterTypePartiallySignedTransaction.lower(psbt),
        FfiConverterTypeConfiguration.lower(params))
        )






    def address(self, ) -> "Address":
        return FfiConverterTypeAddress.lift(
            rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_method_prjuri_address,self._pointer,)
        )






    def amount(self, ) -> "typing.Optional[Amount]":
        return FfiConverterOptionalTypeAmount.lift(
            rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_method_prjuri_amount,self._pointer,)
        )






class FfiConverterTypePrjUri:
    @classmethod
    def read(cls, buf):
        ptr = buf.readU64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, PrjUri):
            raise TypeError("Expected PrjUri instance, {} found".format(value.__class__.__name__))
        buf.writeU64(cls.lower(value))

    @staticmethod
    def lift(value):
        return PrjUri._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ProvisionalProposal:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_free_provisionalproposal, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def contribute_witness_input(self, txout: "TxOut",outpoint: "OutPoint"):
        
        
        rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_method_provisionalproposal_contribute_witness_input,self._pointer,
        FfiConverterTypeTxOut.lower(txout),
        FfiConverterTypeOutPoint.lower(outpoint))







    def contribute_non_witness_input(self, tx: "Transaction",outpoint: "OutPoint"):
        
        
        rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_method_provisionalproposal_contribute_non_witness_input,self._pointer,
        FfiConverterTypeTransaction.lower(tx),
        FfiConverterTypeOutPoint.lower(outpoint))







    def substitute_output_address(self, substitute_address: "Address"):
        
        rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_method_provisionalproposal_substitute_output_address,self._pointer,
        FfiConverterTypeAddress.lower(substitute_address))







    def try_preserving_privacy(self, candidate_inputs: "dict") -> "OutPoint":
        
        return FfiConverterTypeOutPoint.lift(
            rust_call_with_error(
    FfiConverterTypePayjoinError,_UniFFILib.uniffi_payjoin_ffi_fn_method_provisionalproposal_try_preserving_privacy,self._pointer,
        FfiConverterMapUInt64TypeOutPoint.lower(candidate_inputs))
        )






    def finalize_proposal(self, process_psbt: "ProcessPartiallySignedTransaction",min_feerate_sat_per_vb: "typing.Optional[FeeRate]") -> "PayjoinProposal":
        
        
        return FfiConverterTypePayjoinProposal.lift(
            rust_call_with_error(
    FfiConverterTypePayjoinError,_UniFFILib.uniffi_payjoin_ffi_fn_method_provisionalproposal_finalize_proposal,self._pointer,
        FfiConverterCallbackInterfaceProcessPartiallySignedTransaction.lower(process_psbt),
        FfiConverterOptionalTypeFeeRate.lower(min_feerate_sat_per_vb))
        )






class FfiConverterTypeProvisionalProposal:
    @classmethod
    def read(cls, buf):
        ptr = buf.readU64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ProvisionalProposal):
            raise TypeError("Expected ProvisionalProposal instance, {} found".format(value.__class__.__name__))
        buf.writeU64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ProvisionalProposal._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class ScriptBuf:
    _pointer: ctypes.c_void_p
    def __init__(self, raw_output_script: "typing.List[int]"):
        
        self._pointer = rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_constructor_scriptbuf_new,
        FfiConverterSequenceUInt8.lower(raw_output_script))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_free_scriptbuf, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_string(cls, script: "str"):
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = rust_call_with_error(FfiConverterTypePayjoinError,_UniFFILib.uniffi_payjoin_ffi_fn_constructor_scriptbuf_from_string,
        FfiConverterString.lower(script))
        return cls._make_instance_(pointer)



    def to_bytes(self, ) -> "typing.List[int]":
        return FfiConverterSequenceUInt8.lift(
            rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_method_scriptbuf_to_bytes,self._pointer,)
        )






    def to_hex_string(self, ) -> "str":
        return FfiConverterString.lift(
            rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_method_scriptbuf_to_hex_string,self._pointer,)
        )






    def as_string(self, ) -> "str":
        return FfiConverterString.lift(
            rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_method_scriptbuf_as_string,self._pointer,)
        )






    def to_asm_string(self, ) -> "str":
        return FfiConverterString.lift(
            rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_method_scriptbuf_to_asm_string,self._pointer,)
        )






class FfiConverterTypeScriptBuf:
    @classmethod
    def read(cls, buf):
        ptr = buf.readU64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, ScriptBuf):
            raise TypeError("Expected ScriptBuf instance, {} found".format(value.__class__.__name__))
        buf.writeU64(cls.lower(value))

    @staticmethod
    def lift(value):
        return ScriptBuf._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class Transaction:
    _pointer: ctypes.c_void_p
    def __init__(self, transaction_bytes: "typing.List[int]"):
        
        self._pointer = rust_call_with_error(FfiConverterTypePayjoinError,_UniFFILib.uniffi_payjoin_ffi_fn_constructor_transaction_new,
        FfiConverterSequenceUInt8.lower(transaction_bytes))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_free_transaction, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def txid(self, ) -> "Txid":
        return FfiConverterTypeTxid.lift(
            rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_method_transaction_txid,self._pointer,)
        )






    def serialize(self, ) -> "typing.List[int]":
        return FfiConverterSequenceUInt8.lift(
            rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_method_transaction_serialize,self._pointer,)
        )






class FfiConverterTypeTransaction:
    @classmethod
    def read(cls, buf):
        ptr = buf.readU64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, Transaction):
            raise TypeError("Expected Transaction instance, {} found".format(value.__class__.__name__))
        buf.writeU64(cls.lower(value))

    @staticmethod
    def lift(value):
        return Transaction._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class Txid:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_free_txid, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def as_string(self, ) -> "str":
        return FfiConverterString.lift(
            rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_method_txid_as_string,self._pointer,)
        )






class FfiConverterTypeTxid:
    @classmethod
    def read(cls, buf):
        ptr = buf.readU64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, Txid):
            raise TypeError("Expected Txid instance, {} found".format(value.__class__.__name__))
        buf.writeU64(cls.lower(value))

    @staticmethod
    def lift(value):
        return Txid._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class UncheckedProposal:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_free_uncheckedproposal, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_request(cls, body: "typing.List[int]",query: "str",headers: "Headers"):
        
        
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = rust_call_with_error(FfiConverterTypePayjoinError,_UniFFILib.uniffi_payjoin_ffi_fn_constructor_uncheckedproposal_from_request,
        FfiConverterSequenceUInt8.lower(body),
        FfiConverterString.lower(query),
        FfiConverterTypeHeaders.lower(headers))
        return cls._make_instance_(pointer)



    def extract_tx_to_schedule_broadcast(self, ) -> "Transaction":
        return FfiConverterTypeTransaction.lift(
            rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_method_uncheckedproposal_extract_tx_to_schedule_broadcast,self._pointer,)
        )






    def check_can_broadcast(self, can_broadcast: "CanBroadcast") -> "MaybeInputsOwned":
        
        return FfiConverterTypeMaybeInputsOwned.lift(
            rust_call_with_error(
    FfiConverterTypePayjoinError,_UniFFILib.uniffi_payjoin_ffi_fn_method_uncheckedproposal_check_can_broadcast,self._pointer,
        FfiConverterCallbackInterfaceCanBroadcast.lower(can_broadcast))
        )






    def assume_interactive_receiver(self, ) -> "MaybeInputsOwned":
        return FfiConverterTypeMaybeInputsOwned.lift(
            rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_method_uncheckedproposal_assume_interactive_receiver,self._pointer,)
        )






class FfiConverterTypeUncheckedProposal:
    @classmethod
    def read(cls, buf):
        ptr = buf.readU64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, UncheckedProposal):
            raise TypeError("Expected UncheckedProposal instance, {} found".format(value.__class__.__name__))
        buf.writeU64(cls.lower(value))

    @staticmethod
    def lift(value):
        return UncheckedProposal._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class Uri:
    _pointer: ctypes.c_void_p
    def __init__(self, uri: "str"):
        
        self._pointer = rust_call_with_error(FfiConverterTypePayjoinError,_UniFFILib.uniffi_payjoin_ffi_fn_constructor_uri_new,
        FfiConverterString.lower(uri))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_free_uri, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def amount(self, ) -> "typing.Optional[int]":
        return FfiConverterOptionalUInt64.lift(
            rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_method_uri_amount,self._pointer,)
        )






    def address(self, ) -> "Address":
        return FfiConverterTypeAddress.lift(
            rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_method_uri_address,self._pointer,)
        )






    def check_pj_supported(self, ) -> "PrjUri":
        return FfiConverterTypePrjUri.lift(
            rust_call_with_error(
    FfiConverterTypePayjoinError,_UniFFILib.uniffi_payjoin_ffi_fn_method_uri_check_pj_supported,self._pointer,)
        )






class FfiConverterTypeUri:
    @classmethod
    def read(cls, buf):
        ptr = buf.readU64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, Uri):
            raise TypeError("Expected Uri instance, {} found".format(value.__class__.__name__))
        buf.writeU64(cls.lower(value))

    @staticmethod
    def lift(value):
        return Uri._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class Url:
    _pointer: ctypes.c_void_p
    def __init__(self, input: "str"):
        
        self._pointer = rust_call_with_error(FfiConverterTypePayjoinError,_UniFFILib.uniffi_payjoin_ffi_fn_constructor_url_new,
        FfiConverterString.lower(input))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_free_url, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def query(self, ) -> "typing.Optional[str]":
        return FfiConverterOptionalString.lift(
            rust_call(_UniFFILib.uniffi_payjoin_ffi_fn_method_url_query,self._pointer,)
        )






class FfiConverterTypeUrl:
    @classmethod
    def read(cls, buf):
        ptr = buf.readU64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, Url):
            raise TypeError("Expected Url instance, {} found".format(value.__class__.__name__))
        buf.writeU64(cls.lower(value))

    @staticmethod
    def lift(value):
        return Url._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer


class OutPoint:

    def __init__(self, txid, vout):
        self.txid = txid
        self.vout = vout

    def __str__(self):
        return "OutPoint(txid={}, vout={})".format(self.txid, self.vout)

    def __eq__(self, other):
        if self.txid != other.txid:
            return False
        if self.vout != other.vout:
            return False
        return True

class FfiConverterTypeOutPoint(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return OutPoint(
            txid=FfiConverterString.read(buf),
            vout=FfiConverterUInt32.read(buf),
        )

    @staticmethod
    def write(value, buf):
        FfiConverterString.write(value.txid, buf)
        FfiConverterUInt32.write(value.vout, buf)


class PrjUriRequest:

    def __init__(self, context, request):
        self.context = context
        self.request = request

    def __str__(self):
        return "PrjUriRequest(context={}, request={})".format(self.context, self.request)

    def __eq__(self, other):
        if self.context != other.context:
            return False
        if self.request != other.request:
            return False
        return True

class FfiConverterTypePrjUriRequest(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return PrjUriRequest(
            context=FfiConverterTypeContext.read(buf),
            request=FfiConverterTypeRequest.read(buf),
        )

    @staticmethod
    def write(value, buf):
        FfiConverterTypeContext.write(value.context, buf)
        FfiConverterTypeRequest.write(value.request, buf)


class Request:

    def __init__(self, url, body):
        self.url = url
        self.body = body

    def __str__(self):
        return "Request(url={}, body={})".format(self.url, self.body)

    def __eq__(self, other):
        if self.url != other.url:
            return False
        if self.body != other.body:
            return False
        return True

class FfiConverterTypeRequest(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Request(
            url=FfiConverterTypeUrl.read(buf),
            body=FfiConverterSequenceUInt8.read(buf),
        )

    @staticmethod
    def write(value, buf):
        FfiConverterTypeUrl.write(value.url, buf)
        FfiConverterSequenceUInt8.write(value.body, buf)


class TxOut:

    def __init__(self, value, script_pubkey):
        self.value = value
        self.script_pubkey = script_pubkey

    def __str__(self):
        return "TxOut(value={}, script_pubkey={})".format(self.value, self.script_pubkey)

    def __eq__(self, other):
        if self.value != other.value:
            return False
        if self.script_pubkey != other.script_pubkey:
            return False
        return True

class FfiConverterTypeTxOut(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return TxOut(
            value=FfiConverterUInt64.read(buf),
            script_pubkey=FfiConverterTypeScriptBuf.read(buf),
        )

    @staticmethod
    def write(value, buf):
        FfiConverterUInt64.write(value.value, buf)
        FfiConverterTypeScriptBuf.write(value.script_pubkey, buf)





class Network(enum.Enum):
    BITCOIN = 1
    TESTNET = 2
    SIGNET = 3
    REGTEST = 4
    


class FfiConverterTypeNetwork(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.readI32()
        if variant == 1:
            return Network.BITCOIN
        if variant == 2:
            return Network.TESTNET
        if variant == 3:
            return Network.SIGNET
        if variant == 4:
            return Network.REGTEST
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value == Network.BITCOIN:
            buf.writeI32(1)
        if value == Network.TESTNET:
            buf.writeI32(2)
        if value == Network.SIGNET:
            buf.writeI32(3)
        if value == Network.REGTEST:
            buf.writeI32(4)



# PayjoinError
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separately, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class PayjoinError(Exception):
    pass

UniFFITempPayjoinError = PayjoinError

class PayjoinError:  # type: ignore
    class InvalidAddress(UniFFITempPayjoinError):
        def __init__(self, message):
            super().__init__(", ".join([
                "message={!r}".format(message),
            ]))
            self.message = message
        def __repr__(self):
            return "PayjoinError.InvalidAddress({})".format(str(self))
    UniFFITempPayjoinError.InvalidAddress = InvalidAddress  # type: ignore
    class InvalidScript(UniFFITempPayjoinError):
        def __init__(self, message):
            super().__init__(", ".join([
                "message={!r}".format(message),
            ]))
            self.message = message
        def __repr__(self):
            return "PayjoinError.InvalidScript({})".format(str(self))
    UniFFITempPayjoinError.InvalidScript = InvalidScript  # type: ignore
    class PsbtParseError(UniFFITempPayjoinError):
        def __init__(self, message):
            super().__init__(", ".join([
                "message={!r}".format(message),
            ]))
            self.message = message
        def __repr__(self):
            return "PayjoinError.PsbtParseError({})".format(str(self))
    UniFFITempPayjoinError.PsbtParseError = PsbtParseError  # type: ignore
    class ReceiveError(UniFFITempPayjoinError):
        def __init__(self, message):
            super().__init__(", ".join([
                "message={!r}".format(message),
            ]))
            self.message = message
        def __repr__(self):
            return "PayjoinError.ReceiveError({})".format(str(self))
    UniFFITempPayjoinError.ReceiveError = ReceiveError  # type: ignore
    class RequestError(UniFFITempPayjoinError):
        def __init__(self, message):
            super().__init__(", ".join([
                "message={!r}".format(message),
            ]))
            self.message = message
        def __repr__(self):
            return "PayjoinError.RequestError({})".format(str(self))
    UniFFITempPayjoinError.RequestError = RequestError  # type: ignore
    class SelectionError(UniFFITempPayjoinError):
        def __init__(self, message):
            super().__init__(", ".join([
                "message={!r}".format(message),
            ]))
            self.message = message
        def __repr__(self):
            return "PayjoinError.SelectionError({})".format(str(self))
    UniFFITempPayjoinError.SelectionError = SelectionError  # type: ignore
    class CreateRequestError(UniFFITempPayjoinError):
        def __init__(self, message):
            super().__init__(", ".join([
                "message={!r}".format(message),
            ]))
            self.message = message
        def __repr__(self):
            return "PayjoinError.CreateRequestError({})".format(str(self))
    UniFFITempPayjoinError.CreateRequestError = CreateRequestError  # type: ignore
    class PjParseError(UniFFITempPayjoinError):
        def __init__(self, message):
            super().__init__(", ".join([
                "message={!r}".format(message),
            ]))
            self.message = message
        def __repr__(self):
            return "PayjoinError.PjParseError({})".format(str(self))
    UniFFITempPayjoinError.PjParseError = PjParseError  # type: ignore
    class PjNotSupported(UniFFITempPayjoinError):
        def __init__(self, message):
            super().__init__(", ".join([
                "message={!r}".format(message),
            ]))
            self.message = message
        def __repr__(self):
            return "PayjoinError.PjNotSupported({})".format(str(self))
    UniFFITempPayjoinError.PjNotSupported = PjNotSupported  # type: ignore
    class ContextValidationError(UniFFITempPayjoinError):
        def __init__(self, message):
            super().__init__(", ".join([
                "message={!r}".format(message),
            ]))
            self.message = message
        def __repr__(self):
            return "PayjoinError.ContextValidationError({})".format(str(self))
    UniFFITempPayjoinError.ContextValidationError = ContextValidationError  # type: ignore
    class TransactionError(UniFFITempPayjoinError):
        def __init__(self, message):
            super().__init__(", ".join([
                "message={!r}".format(message),
            ]))
            self.message = message
        def __repr__(self):
            return "PayjoinError.TransactionError({})".format(str(self))
    UniFFITempPayjoinError.TransactionError = TransactionError  # type: ignore
    class UnexpectedError(UniFFITempPayjoinError):
        def __init__(self, message):
            super().__init__(", ".join([
                "message={!r}".format(message),
            ]))
            self.message = message
        def __repr__(self):
            return "PayjoinError.UnexpectedError({})".format(str(self))
    UniFFITempPayjoinError.UnexpectedError = UnexpectedError  # type: ignore
    class ServerError(UniFFITempPayjoinError):
        def __init__(self, message):
            super().__init__(", ".join([
                "message={!r}".format(message),
            ]))
            self.message = message
        def __repr__(self):
            return "PayjoinError.ServerError({})".format(str(self))
    UniFFITempPayjoinError.ServerError = ServerError  # type: ignore

PayjoinError = UniFFITempPayjoinError  # type: ignore
del UniFFITempPayjoinError


class FfiConverterTypePayjoinError(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.readI32()
        if variant == 1:
            return PayjoinError.InvalidAddress(
                message=FfiConverterString.read(buf),
            )
        if variant == 2:
            return PayjoinError.InvalidScript(
                message=FfiConverterString.read(buf),
            )
        if variant == 3:
            return PayjoinError.PsbtParseError(
                message=FfiConverterString.read(buf),
            )
        if variant == 4:
            return PayjoinError.ReceiveError(
                message=FfiConverterString.read(buf),
            )
        if variant == 5:
            return PayjoinError.RequestError(
                message=FfiConverterString.read(buf),
            )
        if variant == 6:
            return PayjoinError.SelectionError(
                message=FfiConverterString.read(buf),
            )
        if variant == 7:
            return PayjoinError.CreateRequestError(
                message=FfiConverterString.read(buf),
            )
        if variant == 8:
            return PayjoinError.PjParseError(
                message=FfiConverterString.read(buf),
            )
        if variant == 9:
            return PayjoinError.PjNotSupported(
                message=FfiConverterString.read(buf),
            )
        if variant == 10:
            return PayjoinError.ContextValidationError(
                message=FfiConverterString.read(buf),
            )
        if variant == 11:
            return PayjoinError.TransactionError(
                message=FfiConverterString.read(buf),
            )
        if variant == 12:
            return PayjoinError.UnexpectedError(
                message=FfiConverterString.read(buf),
            )
        if variant == 13:
            return PayjoinError.ServerError(
                message=FfiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def write(value, buf):
        if isinstance(value, PayjoinError.InvalidAddress):
            buf.writeI32(1)
            FfiConverterString.write(value.message, buf)
        if isinstance(value, PayjoinError.InvalidScript):
            buf.writeI32(2)
            FfiConverterString.write(value.message, buf)
        if isinstance(value, PayjoinError.PsbtParseError):
            buf.writeI32(3)
            FfiConverterString.write(value.message, buf)
        if isinstance(value, PayjoinError.ReceiveError):
            buf.writeI32(4)
            FfiConverterString.write(value.message, buf)
        if isinstance(value, PayjoinError.RequestError):
            buf.writeI32(5)
            FfiConverterString.write(value.message, buf)
        if isinstance(value, PayjoinError.SelectionError):
            buf.writeI32(6)
            FfiConverterString.write(value.message, buf)
        if isinstance(value, PayjoinError.CreateRequestError):
            buf.writeI32(7)
            FfiConverterString.write(value.message, buf)
        if isinstance(value, PayjoinError.PjParseError):
            buf.writeI32(8)
            FfiConverterString.write(value.message, buf)
        if isinstance(value, PayjoinError.PjNotSupported):
            buf.writeI32(9)
            FfiConverterString.write(value.message, buf)
        if isinstance(value, PayjoinError.ContextValidationError):
            buf.writeI32(10)
            FfiConverterString.write(value.message, buf)
        if isinstance(value, PayjoinError.TransactionError):
            buf.writeI32(11)
            FfiConverterString.write(value.message, buf)
        if isinstance(value, PayjoinError.UnexpectedError):
            buf.writeI32(12)
            FfiConverterString.write(value.message, buf)
        if isinstance(value, PayjoinError.ServerError):
            buf.writeI32(13)
            FfiConverterString.write(value.message, buf)



import threading

class ConcurrentHandleMap:
    """
    A map where inserting, getting and removing data is synchronized with a lock.
    """

    def __init__(self):
        # type Handle = int
        self._left_map = {}  # type: Dict[Handle, Any]
        self._right_map = {}  # type: Dict[Any, Handle]

        self._lock = threading.Lock()
        self._current_handle = 0
        self._stride = 1


    def insert(self, obj):
        with self._lock:
            if obj in self._right_map:
                return self._right_map[obj]
            else:
                handle = self._current_handle
                self._current_handle += self._stride
                self._left_map[handle] = obj
                self._right_map[obj] = handle
                return handle

    def get(self, handle):
        with self._lock:
            return self._left_map.get(handle)

    def remove(self, handle):
        with self._lock:
            if handle in self._left_map:
                obj = self._left_map.pop(handle)
                del self._right_map[obj]
                return obj

# Magic number for the Rust proxy to call using the same mechanism as every other method,
# to free the callback once it's dropped by Rust.
IDX_CALLBACK_FREE = 0
# Return codes for callback calls
UNIFFI_CALLBACK_SUCCESS = 0
UNIFFI_CALLBACK_ERROR = 1
UNIFFI_CALLBACK_UNEXPECTED_ERROR = 2

class FfiConverterCallbackInterface:
    _handle_map = ConcurrentHandleMap()

    def __init__(self, cb):
        self._foreign_callback = cb

    def drop(self, handle):
        self.__class__._handle_map.remove(handle)

    @classmethod
    def lift(cls, handle):
        obj = cls._handle_map.get(handle)
        if not obj:
            raise InternalError("The object in the handle map has been dropped already")

        return obj

    @classmethod
    def read(cls, buf):
        handle = buf.readU64()
        cls.lift(handle)

    @classmethod
    def lower(cls, cb):
        handle = cls._handle_map.insert(cb)
        return handle

    @classmethod
    def write(cls, cb, buf):
        buf.writeU64(cls.lower(cb))

# Declaration and FfiConverters for CanBroadcast Callback Interface

class CanBroadcast:
    def test_mempool_accept(self, tx: "typing.List[int]"):
        raise NotImplementedError

    

def py_foreignCallbackCallbackInterfaceCanBroadcast(handle, method, args_data, args_len, buf_ptr):
    
    def invoke_test_mempool_accept(python_callback, args_stream, buf_ptr):
        def makeCall():return python_callback.test_mempool_accept(
                FfiConverterSequenceUInt8.read(args_stream)
                )

        def makeCallAndHandleReturn():
            rval = makeCall()
            with RustBuffer.allocWithBuilder() as builder:
                FfiConverterBool.write(rval, builder)
                buf_ptr[0] = builder.finalize()
            return UNIFFI_CALLBACK_SUCCESS
        try:
            return makeCallAndHandleReturn()
        except PayjoinError as e:
            # Catch errors declared in the UDL file
            with RustBuffer.allocWithBuilder() as builder:
                FfiConverterTypePayjoinError.write(e, builder)
                buf_ptr[0] = builder.finalize()
            return UNIFFI_CALLBACK_ERROR

    

    cb = FfiConverterCallbackInterfaceCanBroadcast.lift(handle)
    if not cb:
        raise InternalError("No callback in handlemap; this is a Uniffi bug")

    if method == IDX_CALLBACK_FREE:
        FfiConverterCallbackInterfaceCanBroadcast.drop(handle)
        # Successfull return
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
        return UNIFFI_CALLBACK_SUCCESS

    if method == 1:
        # Call the method and handle any errors
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for details
        try:
            return invoke_test_mempool_accept(cb, RustBufferStream(args_data, args_len), buf_ptr)
        except BaseException as e:
            # Catch unexpected errors
            try:
                # Try to serialize the exception into a String
                buf_ptr[0] = FfiConverterString.lower(repr(e))
            except:
                # If that fails, just give up
                pass
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    

    # This should never happen, because an out of bounds method index won't
    # ever be used. Once we can catch errors, we should return an InternalException.
    # https://github.com/mozilla/uniffi-rs/issues/351

    # An unexpected error happened.
    # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
    return UNIFFI_CALLBACK_UNEXPECTED_ERROR

# We need to keep this function reference alive:
# if they get GC'd while in use then UniFFI internals could attempt to call a function
# that is in freed memory.
# That would be...uh...bad. Yeah, that's the word. Bad.
foreignCallbackCallbackInterfaceCanBroadcast = FOREIGN_CALLBACK_T(py_foreignCallbackCallbackInterfaceCanBroadcast)
rust_call(lambda err: _UniFFILib.uniffi_payjoin_ffi_fn_init_callback_canbroadcast(foreignCallbackCallbackInterfaceCanBroadcast, err))

# The FfiConverter which transforms the Callbacks in to Handles to pass to Rust.
FfiConverterCallbackInterfaceCanBroadcast = FfiConverterCallbackInterface(foreignCallbackCallbackInterfaceCanBroadcast)





# Declaration and FfiConverters for IsOutputKnown Callback Interface

class IsOutputKnown:
    def is_known(self, outpoint: "OutPoint"):
        raise NotImplementedError

    

def py_foreignCallbackCallbackInterfaceIsOutputKnown(handle, method, args_data, args_len, buf_ptr):
    
    def invoke_is_known(python_callback, args_stream, buf_ptr):
        def makeCall():return python_callback.is_known(
                FfiConverterTypeOutPoint.read(args_stream)
                )

        def makeCallAndHandleReturn():
            rval = makeCall()
            with RustBuffer.allocWithBuilder() as builder:
                FfiConverterBool.write(rval, builder)
                buf_ptr[0] = builder.finalize()
            return UNIFFI_CALLBACK_SUCCESS
        try:
            return makeCallAndHandleReturn()
        except PayjoinError as e:
            # Catch errors declared in the UDL file
            with RustBuffer.allocWithBuilder() as builder:
                FfiConverterTypePayjoinError.write(e, builder)
                buf_ptr[0] = builder.finalize()
            return UNIFFI_CALLBACK_ERROR

    

    cb = FfiConverterCallbackInterfaceIsOutputKnown.lift(handle)
    if not cb:
        raise InternalError("No callback in handlemap; this is a Uniffi bug")

    if method == IDX_CALLBACK_FREE:
        FfiConverterCallbackInterfaceIsOutputKnown.drop(handle)
        # Successfull return
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
        return UNIFFI_CALLBACK_SUCCESS

    if method == 1:
        # Call the method and handle any errors
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for details
        try:
            return invoke_is_known(cb, RustBufferStream(args_data, args_len), buf_ptr)
        except BaseException as e:
            # Catch unexpected errors
            try:
                # Try to serialize the exception into a String
                buf_ptr[0] = FfiConverterString.lower(repr(e))
            except:
                # If that fails, just give up
                pass
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    

    # This should never happen, because an out of bounds method index won't
    # ever be used. Once we can catch errors, we should return an InternalException.
    # https://github.com/mozilla/uniffi-rs/issues/351

    # An unexpected error happened.
    # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
    return UNIFFI_CALLBACK_UNEXPECTED_ERROR

# We need to keep this function reference alive:
# if they get GC'd while in use then UniFFI internals could attempt to call a function
# that is in freed memory.
# That would be...uh...bad. Yeah, that's the word. Bad.
foreignCallbackCallbackInterfaceIsOutputKnown = FOREIGN_CALLBACK_T(py_foreignCallbackCallbackInterfaceIsOutputKnown)
rust_call(lambda err: _UniFFILib.uniffi_payjoin_ffi_fn_init_callback_isoutputknown(foreignCallbackCallbackInterfaceIsOutputKnown, err))

# The FfiConverter which transforms the Callbacks in to Handles to pass to Rust.
FfiConverterCallbackInterfaceIsOutputKnown = FfiConverterCallbackInterface(foreignCallbackCallbackInterfaceIsOutputKnown)





# Declaration and FfiConverters for IsScriptOwned Callback Interface

class IsScriptOwned:
    def is_owned(self, script: "ScriptBuf"):
        raise NotImplementedError

    

def py_foreignCallbackCallbackInterfaceIsScriptOwned(handle, method, args_data, args_len, buf_ptr):
    
    def invoke_is_owned(python_callback, args_stream, buf_ptr):
        def makeCall():return python_callback.is_owned(
                FfiConverterTypeScriptBuf.read(args_stream)
                )

        def makeCallAndHandleReturn():
            rval = makeCall()
            with RustBuffer.allocWithBuilder() as builder:
                FfiConverterBool.write(rval, builder)
                buf_ptr[0] = builder.finalize()
            return UNIFFI_CALLBACK_SUCCESS
        try:
            return makeCallAndHandleReturn()
        except PayjoinError as e:
            # Catch errors declared in the UDL file
            with RustBuffer.allocWithBuilder() as builder:
                FfiConverterTypePayjoinError.write(e, builder)
                buf_ptr[0] = builder.finalize()
            return UNIFFI_CALLBACK_ERROR

    

    cb = FfiConverterCallbackInterfaceIsScriptOwned.lift(handle)
    if not cb:
        raise InternalError("No callback in handlemap; this is a Uniffi bug")

    if method == IDX_CALLBACK_FREE:
        FfiConverterCallbackInterfaceIsScriptOwned.drop(handle)
        # Successfull return
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
        return UNIFFI_CALLBACK_SUCCESS

    if method == 1:
        # Call the method and handle any errors
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for details
        try:
            return invoke_is_owned(cb, RustBufferStream(args_data, args_len), buf_ptr)
        except BaseException as e:
            # Catch unexpected errors
            try:
                # Try to serialize the exception into a String
                buf_ptr[0] = FfiConverterString.lower(repr(e))
            except:
                # If that fails, just give up
                pass
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    

    # This should never happen, because an out of bounds method index won't
    # ever be used. Once we can catch errors, we should return an InternalException.
    # https://github.com/mozilla/uniffi-rs/issues/351

    # An unexpected error happened.
    # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
    return UNIFFI_CALLBACK_UNEXPECTED_ERROR

# We need to keep this function reference alive:
# if they get GC'd while in use then UniFFI internals could attempt to call a function
# that is in freed memory.
# That would be...uh...bad. Yeah, that's the word. Bad.
foreignCallbackCallbackInterfaceIsScriptOwned = FOREIGN_CALLBACK_T(py_foreignCallbackCallbackInterfaceIsScriptOwned)
rust_call(lambda err: _UniFFILib.uniffi_payjoin_ffi_fn_init_callback_isscriptowned(foreignCallbackCallbackInterfaceIsScriptOwned, err))

# The FfiConverter which transforms the Callbacks in to Handles to pass to Rust.
FfiConverterCallbackInterfaceIsScriptOwned = FfiConverterCallbackInterface(foreignCallbackCallbackInterfaceIsScriptOwned)





# Declaration and FfiConverters for ProcessPartiallySignedTransaction Callback Interface

class ProcessPartiallySignedTransaction:
    def process_psbt(self, psbt: "PartiallySignedTransaction"):
        raise NotImplementedError

    

def py_foreignCallbackCallbackInterfaceProcessPartiallySignedTransaction(handle, method, args_data, args_len, buf_ptr):
    
    def invoke_process_psbt(python_callback, args_stream, buf_ptr):
        def makeCall():return python_callback.process_psbt(
                FfiConverterTypePartiallySignedTransaction.read(args_stream)
                )

        def makeCallAndHandleReturn():
            rval = makeCall()
            with RustBuffer.allocWithBuilder() as builder:
                FfiConverterString.write(rval, builder)
                buf_ptr[0] = builder.finalize()
            return UNIFFI_CALLBACK_SUCCESS
        try:
            return makeCallAndHandleReturn()
        except PayjoinError as e:
            # Catch errors declared in the UDL file
            with RustBuffer.allocWithBuilder() as builder:
                FfiConverterTypePayjoinError.write(e, builder)
                buf_ptr[0] = builder.finalize()
            return UNIFFI_CALLBACK_ERROR

    

    cb = FfiConverterCallbackInterfaceProcessPartiallySignedTransaction.lift(handle)
    if not cb:
        raise InternalError("No callback in handlemap; this is a Uniffi bug")

    if method == IDX_CALLBACK_FREE:
        FfiConverterCallbackInterfaceProcessPartiallySignedTransaction.drop(handle)
        # Successfull return
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
        return UNIFFI_CALLBACK_SUCCESS

    if method == 1:
        # Call the method and handle any errors
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for details
        try:
            return invoke_process_psbt(cb, RustBufferStream(args_data, args_len), buf_ptr)
        except BaseException as e:
            # Catch unexpected errors
            try:
                # Try to serialize the exception into a String
                buf_ptr[0] = FfiConverterString.lower(repr(e))
            except:
                # If that fails, just give up
                pass
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    

    # This should never happen, because an out of bounds method index won't
    # ever be used. Once we can catch errors, we should return an InternalException.
    # https://github.com/mozilla/uniffi-rs/issues/351

    # An unexpected error happened.
    # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
    return UNIFFI_CALLBACK_UNEXPECTED_ERROR

# We need to keep this function reference alive:
# if they get GC'd while in use then UniFFI internals could attempt to call a function
# that is in freed memory.
# That would be...uh...bad. Yeah, that's the word. Bad.
foreignCallbackCallbackInterfaceProcessPartiallySignedTransaction = FOREIGN_CALLBACK_T(py_foreignCallbackCallbackInterfaceProcessPartiallySignedTransaction)
rust_call(lambda err: _UniFFILib.uniffi_payjoin_ffi_fn_init_callback_processpartiallysignedtransaction(foreignCallbackCallbackInterfaceProcessPartiallySignedTransaction, err))

# The FfiConverter which transforms the Callbacks in to Handles to pass to Rust.
FfiConverterCallbackInterfaceProcessPartiallySignedTransaction = FfiConverterCallbackInterface(foreignCallbackCallbackInterfaceProcessPartiallySignedTransaction)



class FfiConverterOptionalUInt64(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.writeU8(0)
            return

        buf.writeU8(1)
        FfiConverterUInt64.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.readU8()
        if flag == 0:
            return None
        elif flag == 1:
            return FfiConverterUInt64.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class FfiConverterOptionalString(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.writeU8(0)
            return

        buf.writeU8(1)
        FfiConverterString.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.readU8()
        if flag == 0:
            return None
        elif flag == 1:
            return FfiConverterString.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class FfiConverterOptionalTypeAmount(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.writeU8(0)
            return

        buf.writeU8(1)
        FfiConverterTypeAmount.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.readU8()
        if flag == 0:
            return None
        elif flag == 1:
            return FfiConverterTypeAmount.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class FfiConverterOptionalTypeFeeRate(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.writeU8(0)
            return

        buf.writeU8(1)
        FfiConverterTypeFeeRate.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.readU8()
        if flag == 0:
            return None
        elif flag == 1:
            return FfiConverterTypeFeeRate.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class FfiConverterSequenceUInt8(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.writeI32(items)
        for item in value:
            FfiConverterUInt8.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.readI32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            FfiConverterUInt8.read(buf) for i in range(count)
        ]



class FfiConverterSequenceUInt64(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.writeI32(items)
        for item in value:
            FfiConverterUInt64.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.readI32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            FfiConverterUInt64.read(buf) for i in range(count)
        ]



class FfiConverterSequenceTypeScriptBuf(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.writeI32(items)
        for item in value:
            FfiConverterTypeScriptBuf.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.readI32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            FfiConverterTypeScriptBuf.read(buf) for i in range(count)
        ]



class FfiConverterSequenceTypeOutPoint(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.writeI32(items)
        for item in value:
            FfiConverterTypeOutPoint.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.readI32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            FfiConverterTypeOutPoint.read(buf) for i in range(count)
        ]



class FfiConverterMapUInt64TypeOutPoint(FfiConverterRustBuffer):
    @classmethod
    def write(cls, items, buf):
        buf.writeI32(len(items))
        for (key, value) in items.items():
            FfiConverterUInt64.write(key, buf)
            FfiConverterTypeOutPoint.write(value, buf)

    @classmethod
    def read(cls, buf):
        count = buf.readI32()
        if count < 0:
            raise InternalError("Unexpected negative map size")

        # It would be nice to use a dict comprehension,
        # but in Python 3.7 and before the evaluation order is not according to spec,
        # so we we're reading the value before the key.
        # This loop makes the order explicit: first reading the key, then the value.
        d = {}
        for i in range(count):
            key = FfiConverterUInt64.read(buf)
            val = FfiConverterTypeOutPoint.read(buf)
            d[key] = val
        return d



class FfiConverterMapStringString(FfiConverterRustBuffer):
    @classmethod
    def write(cls, items, buf):
        buf.writeI32(len(items))
        for (key, value) in items.items():
            FfiConverterString.write(key, buf)
            FfiConverterString.write(value, buf)

    @classmethod
    def read(cls, buf):
        count = buf.readI32()
        if count < 0:
            raise InternalError("Unexpected negative map size")

        # It would be nice to use a dict comprehension,
        # but in Python 3.7 and before the evaluation order is not according to spec,
        # so we we're reading the value before the key.
        # This loop makes the order explicit: first reading the key, then the value.
        d = {}
        for i in range(count):
            key = FfiConverterString.read(buf)
            val = FfiConverterString.read(buf)
            d[key] = val
        return d

__all__ = [
    "InternalError",
    "Network",
    "PayjoinError",
    "OutPoint",
    "PrjUriRequest",
    "Request",
    "TxOut",
    "ScriptBuf",
    "Address",
    "Headers",
    "Url",
    "Uri",
    "Configuration",
    "PartiallySignedTransaction",
    "Context",
    "Amount",
    "PrjUri",
    "Txid",
    "Transaction",
    "UncheckedProposal",
    "MaybeInputsOwned",
    "MaybeMixedInputScripts",
    "MaybeInputsSeen",
    "OutputsUnknown",
    "FeeRate",
    "ProvisionalProposal",
    "PayjoinProposal",
    "CanBroadcast",
    "IsScriptOwned",
    "IsOutputKnown",
    "ProcessPartiallySignedTransaction",
]

