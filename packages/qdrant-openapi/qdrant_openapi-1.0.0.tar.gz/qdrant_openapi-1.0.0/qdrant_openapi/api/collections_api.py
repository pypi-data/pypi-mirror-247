# coding: utf-8

"""
    Qdrant API

    API description for Qdrant vector search engine.  This document describes CRUD and search operations on collections of points (vectors with payload).  Qdrant supports any combinations of `should`, `must` and `must_not` conditions, which makes it possible to use in applications when object could not be described solely by vector. It could be location features, availability flags, and other custom properties businesses should take into account. ## Examples This examples cover the most basic use-cases - collection creation and basic vector search. ### Create collection First - let's create a collection with dot-production metric. ``` curl -X PUT 'http://localhost:6333/collections/test_collection' \\   -H 'Content-Type: application/json' \\   --data-raw '{     \"vectors\": {       \"size\": 4,       \"distance\": \"Dot\"     }   }'  ``` Expected response: ``` {     \"result\": true,     \"status\": \"ok\",     \"time\": 0.031095451 } ``` We can ensure that collection was created: ``` curl 'http://localhost:6333/collections/test_collection' ``` Expected response: ``` {   \"result\": {     \"status\": \"green\",     \"vectors_count\": 0,     \"segments_count\": 5,     \"disk_data_size\": 0,     \"ram_data_size\": 0,     \"config\": {       \"params\": {         \"vectors\": {           \"size\": 4,           \"distance\": \"Dot\"         }       },       \"hnsw_config\": {         \"m\": 16,         \"ef_construct\": 100,         \"full_scan_threshold\": 10000       },       \"optimizer_config\": {         \"deleted_threshold\": 0.2,         \"vacuum_min_vector_number\": 1000,         \"max_segment_number\": 5,         \"memmap_threshold\": 50000,         \"indexing_threshold\": 20000,         \"flush_interval_sec\": 1       },       \"wal_config\": {         \"wal_capacity_mb\": 32,         \"wal_segments_ahead\": 0       }     }   },   \"status\": \"ok\",   \"time\": 2.1199e-05 } ```  ### Add points Let's now add vectors with some payload: ``` curl -L -X PUT 'http://localhost:6333/collections/test_collection/points?wait=true' \\ -H 'Content-Type: application/json' \\ --data-raw '{   \"points\": [     {\"id\": 1, \"vector\": [0.05, 0.61, 0.76, 0.74], \"payload\": {\"city\": \"Berlin\"}},     {\"id\": 2, \"vector\": [0.19, 0.81, 0.75, 0.11], \"payload\": {\"city\": [\"Berlin\", \"London\"] }},     {\"id\": 3, \"vector\": [0.36, 0.55, 0.47, 0.94], \"payload\": {\"city\": [\"Berlin\", \"Moscow\"] }},     {\"id\": 4, \"vector\": [0.18, 0.01, 0.85, 0.80], \"payload\": {\"city\": [\"London\", \"Moscow\"] }},     {\"id\": 5, \"vector\": [0.24, 0.18, 0.22, 0.44], \"payload\": {\"count\": [0]}},     {\"id\": 6, \"vector\": [0.35, 0.08, 0.11, 0.44]}   ] }' ``` Expected response: ``` {     \"result\": {         \"operation_id\": 0,         \"status\": \"completed\"     },     \"status\": \"ok\",     \"time\": 0.000206061 } ``` ### Search with filtering Let's start with a basic request: ``` curl -L -X POST 'http://localhost:6333/collections/test_collection/points/search' \\ -H 'Content-Type: application/json' \\ --data-raw '{     \"vector\": [0.2,0.1,0.9,0.7],     \"top\": 3 }' ``` Expected response: ``` {     \"result\": [         { \"id\": 4, \"score\": 1.362, \"payload\": null, \"version\": 0 },         { \"id\": 1, \"score\": 1.273, \"payload\": null, \"version\": 0 },         { \"id\": 3, \"score\": 1.208, \"payload\": null, \"version\": 0 }     ],     \"status\": \"ok\",     \"time\": 0.000055785 } ``` But result is different if we add a filter: ``` curl -L -X POST 'http://localhost:6333/collections/test_collection/points/search' \\ -H 'Content-Type: application/json' \\ --data-raw '{     \"filter\": {         \"should\": [             {                 \"key\": \"city\",                 \"match\": {                     \"value\": \"London\"                 }             }         ]     },     \"vector\": [0.2, 0.1, 0.9, 0.7],     \"top\": 3 }' ``` Expected response: ``` {     \"result\": [         { \"id\": 4, \"score\": 1.362, \"payload\": null, \"version\": 0 },         { \"id\": 2, \"score\": 0.871, \"payload\": null, \"version\": 0 }     ],     \"status\": \"ok\",     \"time\": 0.000093972 } ``` 

    The version of the OpenAPI document: v1.7.x
    Contact: andrey@vasnetsov.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictBool, StrictBytes, StrictInt, StrictStr

from typing import Optional, Union

from qdrant_openapi.models.change_aliases_operation import ChangeAliasesOperation
from qdrant_openapi.models.cluster_operations import ClusterOperations
from qdrant_openapi.models.collection_cluster_info200_response import CollectionClusterInfo200Response
from qdrant_openapi.models.create_collection import CreateCollection
from qdrant_openapi.models.create_field_index import CreateFieldIndex
from qdrant_openapi.models.create_field_index200_response import CreateFieldIndex200Response
from qdrant_openapi.models.create_shard_key200_response import CreateShardKey200Response
from qdrant_openapi.models.create_sharding_key import CreateShardingKey
from qdrant_openapi.models.create_snapshot200_response import CreateSnapshot200Response
from qdrant_openapi.models.drop_sharding_key import DropShardingKey
from qdrant_openapi.models.get_collection200_response import GetCollection200Response
from qdrant_openapi.models.get_collection_aliases200_response import GetCollectionAliases200Response
from qdrant_openapi.models.get_collections200_response import GetCollections200Response
from qdrant_openapi.models.list_snapshots200_response import ListSnapshots200Response
from qdrant_openapi.models.shard_snapshot_recover import ShardSnapshotRecover
from qdrant_openapi.models.snapshot_priority import SnapshotPriority
from qdrant_openapi.models.snapshot_recover import SnapshotRecover
from qdrant_openapi.models.update_collection import UpdateCollection
from qdrant_openapi.models.write_ordering import WriteOrdering

from qdrant_openapi.api_client import ApiClient
from qdrant_openapi.api_response import ApiResponse
from qdrant_openapi.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class CollectionsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def collection_cluster_info(self, collection_name : Annotated[StrictStr, Field(..., description="Name of the collection to retrieve the cluster info for")], **kwargs) -> CollectionClusterInfo200Response:  # noqa: E501
        """Collection cluster info  # noqa: E501

        Get cluster information for a collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.collection_cluster_info(collection_name, async_req=True)
        >>> result = thread.get()

        :param collection_name: Name of the collection to retrieve the cluster info for (required)
        :type collection_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CollectionClusterInfo200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the collection_cluster_info_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.collection_cluster_info_with_http_info(collection_name, **kwargs)  # noqa: E501

    @validate_arguments
    def collection_cluster_info_with_http_info(self, collection_name : Annotated[StrictStr, Field(..., description="Name of the collection to retrieve the cluster info for")], **kwargs) -> ApiResponse:  # noqa: E501
        """Collection cluster info  # noqa: E501

        Get cluster information for a collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.collection_cluster_info_with_http_info(collection_name, async_req=True)
        >>> result = thread.get()

        :param collection_name: Name of the collection to retrieve the cluster info for (required)
        :type collection_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CollectionClusterInfo200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'collection_name'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collection_cluster_info" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['collection_name'] is not None:
            _path_params['collection_name'] = _params['collection_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api-key', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "CollectionClusterInfo200Response",
            '4XX': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/collections/{collection_name}/cluster', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_collection(self, collection_name : Annotated[StrictStr, Field(..., description="Name of the new collection")], timeout : Annotated[Optional[StrictInt], Field(description="Wait for operation commit timeout in seconds.  If timeout is reached - request will return with service error. ")] = None, create_collection : Annotated[Optional[CreateCollection], Field(description="Parameters of a new collection")] = None, **kwargs) -> CreateShardKey200Response:  # noqa: E501
        """Create collection  # noqa: E501

        Create new collection with given parameters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_collection(collection_name, timeout, create_collection, async_req=True)
        >>> result = thread.get()

        :param collection_name: Name of the new collection (required)
        :type collection_name: str
        :param timeout: Wait for operation commit timeout in seconds.  If timeout is reached - request will return with service error. 
        :type timeout: int
        :param create_collection: Parameters of a new collection
        :type create_collection: CreateCollection
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateShardKey200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_collection_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_collection_with_http_info(collection_name, timeout, create_collection, **kwargs)  # noqa: E501

    @validate_arguments
    def create_collection_with_http_info(self, collection_name : Annotated[StrictStr, Field(..., description="Name of the new collection")], timeout : Annotated[Optional[StrictInt], Field(description="Wait for operation commit timeout in seconds.  If timeout is reached - request will return with service error. ")] = None, create_collection : Annotated[Optional[CreateCollection], Field(description="Parameters of a new collection")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create collection  # noqa: E501

        Create new collection with given parameters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_collection_with_http_info(collection_name, timeout, create_collection, async_req=True)
        >>> result = thread.get()

        :param collection_name: Name of the new collection (required)
        :type collection_name: str
        :param timeout: Wait for operation commit timeout in seconds.  If timeout is reached - request will return with service error. 
        :type timeout: int
        :param create_collection: Parameters of a new collection
        :type create_collection: CreateCollection
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateShardKey200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'collection_name',
            'timeout',
            'create_collection'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_collection" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['collection_name'] is not None:
            _path_params['collection_name'] = _params['collection_name']


        # process the query parameters
        _query_params = []
        if _params.get('timeout') is not None:  # noqa: E501
            _query_params.append(('timeout', _params['timeout']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['create_collection'] is not None:
            _body_params = _params['create_collection']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['api-key', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "CreateShardKey200Response",
            '4XX': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/collections/{collection_name}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_field_index(self, collection_name : Annotated[StrictStr, Field(..., description="Name of the collection")], wait : Annotated[Optional[StrictBool], Field(description="If true, wait for changes to actually happen")] = None, ordering : Annotated[Optional[WriteOrdering], Field(description="define ordering guarantees for the operation")] = None, create_field_index : Annotated[Optional[CreateFieldIndex], Field(description="Field name")] = None, **kwargs) -> CreateFieldIndex200Response:  # noqa: E501
        """Create index for field in collection  # noqa: E501

        Create index for field in collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_field_index(collection_name, wait, ordering, create_field_index, async_req=True)
        >>> result = thread.get()

        :param collection_name: Name of the collection (required)
        :type collection_name: str
        :param wait: If true, wait for changes to actually happen
        :type wait: bool
        :param ordering: define ordering guarantees for the operation
        :type ordering: WriteOrdering
        :param create_field_index: Field name
        :type create_field_index: CreateFieldIndex
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateFieldIndex200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_field_index_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_field_index_with_http_info(collection_name, wait, ordering, create_field_index, **kwargs)  # noqa: E501

    @validate_arguments
    def create_field_index_with_http_info(self, collection_name : Annotated[StrictStr, Field(..., description="Name of the collection")], wait : Annotated[Optional[StrictBool], Field(description="If true, wait for changes to actually happen")] = None, ordering : Annotated[Optional[WriteOrdering], Field(description="define ordering guarantees for the operation")] = None, create_field_index : Annotated[Optional[CreateFieldIndex], Field(description="Field name")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create index for field in collection  # noqa: E501

        Create index for field in collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_field_index_with_http_info(collection_name, wait, ordering, create_field_index, async_req=True)
        >>> result = thread.get()

        :param collection_name: Name of the collection (required)
        :type collection_name: str
        :param wait: If true, wait for changes to actually happen
        :type wait: bool
        :param ordering: define ordering guarantees for the operation
        :type ordering: WriteOrdering
        :param create_field_index: Field name
        :type create_field_index: CreateFieldIndex
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateFieldIndex200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'collection_name',
            'wait',
            'ordering',
            'create_field_index'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_field_index" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['collection_name'] is not None:
            _path_params['collection_name'] = _params['collection_name']


        # process the query parameters
        _query_params = []
        if _params.get('wait') is not None:  # noqa: E501
            _query_params.append(('wait', _params['wait']))

        if _params.get('ordering') is not None:  # noqa: E501
            _query_params.append(('ordering', _params['ordering'].value))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['create_field_index'] is not None:
            _body_params = _params['create_field_index']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['api-key', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "CreateFieldIndex200Response",
            '4XX': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/collections/{collection_name}/index', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_shard_key(self, collection_name : Annotated[StrictStr, Field(..., description="Name of the collection to create shards for")], timeout : Annotated[Optional[StrictInt], Field(description="Wait for operation commit timeout in seconds.  If timeout is reached - request will return with service error. ")] = None, create_sharding_key : Annotated[Optional[CreateShardingKey], Field(description="Shard key configuration")] = None, **kwargs) -> CreateShardKey200Response:  # noqa: E501
        """Create shard key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_shard_key(collection_name, timeout, create_sharding_key, async_req=True)
        >>> result = thread.get()

        :param collection_name: Name of the collection to create shards for (required)
        :type collection_name: str
        :param timeout: Wait for operation commit timeout in seconds.  If timeout is reached - request will return with service error. 
        :type timeout: int
        :param create_sharding_key: Shard key configuration
        :type create_sharding_key: CreateShardingKey
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateShardKey200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_shard_key_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_shard_key_with_http_info(collection_name, timeout, create_sharding_key, **kwargs)  # noqa: E501

    @validate_arguments
    def create_shard_key_with_http_info(self, collection_name : Annotated[StrictStr, Field(..., description="Name of the collection to create shards for")], timeout : Annotated[Optional[StrictInt], Field(description="Wait for operation commit timeout in seconds.  If timeout is reached - request will return with service error. ")] = None, create_sharding_key : Annotated[Optional[CreateShardingKey], Field(description="Shard key configuration")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create shard key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_shard_key_with_http_info(collection_name, timeout, create_sharding_key, async_req=True)
        >>> result = thread.get()

        :param collection_name: Name of the collection to create shards for (required)
        :type collection_name: str
        :param timeout: Wait for operation commit timeout in seconds.  If timeout is reached - request will return with service error. 
        :type timeout: int
        :param create_sharding_key: Shard key configuration
        :type create_sharding_key: CreateShardingKey
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateShardKey200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'collection_name',
            'timeout',
            'create_sharding_key'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_shard_key" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['collection_name'] is not None:
            _path_params['collection_name'] = _params['collection_name']


        # process the query parameters
        _query_params = []
        if _params.get('timeout') is not None:  # noqa: E501
            _query_params.append(('timeout', _params['timeout']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['create_sharding_key'] is not None:
            _body_params = _params['create_sharding_key']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['api-key', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "CreateShardKey200Response",
            '4XX': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/collections/{collection_name}/shards', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_shard_snapshot(self, collection_name : Annotated[StrictStr, Field(..., description="Name of the collection for which to create a snapshot")], shard_id : Annotated[StrictInt, Field(..., description="Id of the shard")], wait : Annotated[Optional[StrictBool], Field(description="If true, wait for changes to actually happen. If false - let changes happen in background. Default is true.")] = None, **kwargs) -> CreateSnapshot200Response:  # noqa: E501
        """Create shard snapshot  # noqa: E501

        Create new snapshot of a shard for a collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_shard_snapshot(collection_name, shard_id, wait, async_req=True)
        >>> result = thread.get()

        :param collection_name: Name of the collection for which to create a snapshot (required)
        :type collection_name: str
        :param shard_id: Id of the shard (required)
        :type shard_id: int
        :param wait: If true, wait for changes to actually happen. If false - let changes happen in background. Default is true.
        :type wait: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateSnapshot200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_shard_snapshot_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_shard_snapshot_with_http_info(collection_name, shard_id, wait, **kwargs)  # noqa: E501

    @validate_arguments
    def create_shard_snapshot_with_http_info(self, collection_name : Annotated[StrictStr, Field(..., description="Name of the collection for which to create a snapshot")], shard_id : Annotated[StrictInt, Field(..., description="Id of the shard")], wait : Annotated[Optional[StrictBool], Field(description="If true, wait for changes to actually happen. If false - let changes happen in background. Default is true.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create shard snapshot  # noqa: E501

        Create new snapshot of a shard for a collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_shard_snapshot_with_http_info(collection_name, shard_id, wait, async_req=True)
        >>> result = thread.get()

        :param collection_name: Name of the collection for which to create a snapshot (required)
        :type collection_name: str
        :param shard_id: Id of the shard (required)
        :type shard_id: int
        :param wait: If true, wait for changes to actually happen. If false - let changes happen in background. Default is true.
        :type wait: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateSnapshot200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'collection_name',
            'shard_id',
            'wait'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_shard_snapshot" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['collection_name'] is not None:
            _path_params['collection_name'] = _params['collection_name']

        if _params['shard_id'] is not None:
            _path_params['shard_id'] = _params['shard_id']


        # process the query parameters
        _query_params = []
        if _params.get('wait') is not None:  # noqa: E501
            _query_params.append(('wait', _params['wait']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api-key', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "CreateSnapshot200Response",
            '202': "RecoverFromUploadedSnapshot202Response",
            '4XX': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/collections/{collection_name}/shards/{shard_id}/snapshots', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_snapshot(self, collection_name : Annotated[StrictStr, Field(..., description="Name of the collection for which to create a snapshot")], wait : Annotated[Optional[StrictBool], Field(description="If true, wait for changes to actually happen. If false - let changes happen in background. Default is true.")] = None, **kwargs) -> CreateSnapshot200Response:  # noqa: E501
        """Create collection snapshot  # noqa: E501

        Create new snapshot for a collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_snapshot(collection_name, wait, async_req=True)
        >>> result = thread.get()

        :param collection_name: Name of the collection for which to create a snapshot (required)
        :type collection_name: str
        :param wait: If true, wait for changes to actually happen. If false - let changes happen in background. Default is true.
        :type wait: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateSnapshot200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_snapshot_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_snapshot_with_http_info(collection_name, wait, **kwargs)  # noqa: E501

    @validate_arguments
    def create_snapshot_with_http_info(self, collection_name : Annotated[StrictStr, Field(..., description="Name of the collection for which to create a snapshot")], wait : Annotated[Optional[StrictBool], Field(description="If true, wait for changes to actually happen. If false - let changes happen in background. Default is true.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create collection snapshot  # noqa: E501

        Create new snapshot for a collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_snapshot_with_http_info(collection_name, wait, async_req=True)
        >>> result = thread.get()

        :param collection_name: Name of the collection for which to create a snapshot (required)
        :type collection_name: str
        :param wait: If true, wait for changes to actually happen. If false - let changes happen in background. Default is true.
        :type wait: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateSnapshot200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'collection_name',
            'wait'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_snapshot" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['collection_name'] is not None:
            _path_params['collection_name'] = _params['collection_name']


        # process the query parameters
        _query_params = []
        if _params.get('wait') is not None:  # noqa: E501
            _query_params.append(('wait', _params['wait']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api-key', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "CreateSnapshot200Response",
            '202': "RecoverFromUploadedSnapshot202Response",
            '4XX': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/collections/{collection_name}/snapshots', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_collection(self, collection_name : Annotated[StrictStr, Field(..., description="Name of the collection to delete")], timeout : Annotated[Optional[StrictInt], Field(description="Wait for operation commit timeout in seconds.  If timeout is reached - request will return with service error. ")] = None, **kwargs) -> CreateShardKey200Response:  # noqa: E501
        """Delete collection  # noqa: E501

        Drop collection and all associated data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_collection(collection_name, timeout, async_req=True)
        >>> result = thread.get()

        :param collection_name: Name of the collection to delete (required)
        :type collection_name: str
        :param timeout: Wait for operation commit timeout in seconds.  If timeout is reached - request will return with service error. 
        :type timeout: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateShardKey200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delete_collection_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_collection_with_http_info(collection_name, timeout, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_collection_with_http_info(self, collection_name : Annotated[StrictStr, Field(..., description="Name of the collection to delete")], timeout : Annotated[Optional[StrictInt], Field(description="Wait for operation commit timeout in seconds.  If timeout is reached - request will return with service error. ")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete collection  # noqa: E501

        Drop collection and all associated data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_collection_with_http_info(collection_name, timeout, async_req=True)
        >>> result = thread.get()

        :param collection_name: Name of the collection to delete (required)
        :type collection_name: str
        :param timeout: Wait for operation commit timeout in seconds.  If timeout is reached - request will return with service error. 
        :type timeout: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateShardKey200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'collection_name',
            'timeout'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_collection" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['collection_name'] is not None:
            _path_params['collection_name'] = _params['collection_name']


        # process the query parameters
        _query_params = []
        if _params.get('timeout') is not None:  # noqa: E501
            _query_params.append(('timeout', _params['timeout']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api-key', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "CreateShardKey200Response",
            '4XX': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/collections/{collection_name}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_field_index(self, collection_name : Annotated[StrictStr, Field(..., description="Name of the collection")], field_name : Annotated[StrictStr, Field(..., description="Name of the field where to delete the index")], wait : Annotated[Optional[StrictBool], Field(description="If true, wait for changes to actually happen")] = None, ordering : Annotated[Optional[WriteOrdering], Field(description="define ordering guarantees for the operation")] = None, **kwargs) -> CreateFieldIndex200Response:  # noqa: E501
        """Delete index for field in collection  # noqa: E501

        Delete field index for collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_field_index(collection_name, field_name, wait, ordering, async_req=True)
        >>> result = thread.get()

        :param collection_name: Name of the collection (required)
        :type collection_name: str
        :param field_name: Name of the field where to delete the index (required)
        :type field_name: str
        :param wait: If true, wait for changes to actually happen
        :type wait: bool
        :param ordering: define ordering guarantees for the operation
        :type ordering: WriteOrdering
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateFieldIndex200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delete_field_index_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_field_index_with_http_info(collection_name, field_name, wait, ordering, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_field_index_with_http_info(self, collection_name : Annotated[StrictStr, Field(..., description="Name of the collection")], field_name : Annotated[StrictStr, Field(..., description="Name of the field where to delete the index")], wait : Annotated[Optional[StrictBool], Field(description="If true, wait for changes to actually happen")] = None, ordering : Annotated[Optional[WriteOrdering], Field(description="define ordering guarantees for the operation")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete index for field in collection  # noqa: E501

        Delete field index for collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_field_index_with_http_info(collection_name, field_name, wait, ordering, async_req=True)
        >>> result = thread.get()

        :param collection_name: Name of the collection (required)
        :type collection_name: str
        :param field_name: Name of the field where to delete the index (required)
        :type field_name: str
        :param wait: If true, wait for changes to actually happen
        :type wait: bool
        :param ordering: define ordering guarantees for the operation
        :type ordering: WriteOrdering
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateFieldIndex200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'collection_name',
            'field_name',
            'wait',
            'ordering'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_field_index" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['collection_name'] is not None:
            _path_params['collection_name'] = _params['collection_name']

        if _params['field_name'] is not None:
            _path_params['field_name'] = _params['field_name']


        # process the query parameters
        _query_params = []
        if _params.get('wait') is not None:  # noqa: E501
            _query_params.append(('wait', _params['wait']))

        if _params.get('ordering') is not None:  # noqa: E501
            _query_params.append(('ordering', _params['ordering'].value))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api-key', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "CreateFieldIndex200Response",
            '4XX': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/collections/{collection_name}/index/{field_name}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_shard_key(self, collection_name : Annotated[StrictStr, Field(..., description="Name of the collection to create shards for")], timeout : Annotated[Optional[StrictInt], Field(description="Wait for operation commit timeout in seconds.  If timeout is reached - request will return with service error. ")] = None, drop_sharding_key : Annotated[Optional[DropShardingKey], Field(description="Select shard key to delete")] = None, **kwargs) -> CreateShardKey200Response:  # noqa: E501
        """Delete shard key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_shard_key(collection_name, timeout, drop_sharding_key, async_req=True)
        >>> result = thread.get()

        :param collection_name: Name of the collection to create shards for (required)
        :type collection_name: str
        :param timeout: Wait for operation commit timeout in seconds.  If timeout is reached - request will return with service error. 
        :type timeout: int
        :param drop_sharding_key: Select shard key to delete
        :type drop_sharding_key: DropShardingKey
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateShardKey200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delete_shard_key_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_shard_key_with_http_info(collection_name, timeout, drop_sharding_key, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_shard_key_with_http_info(self, collection_name : Annotated[StrictStr, Field(..., description="Name of the collection to create shards for")], timeout : Annotated[Optional[StrictInt], Field(description="Wait for operation commit timeout in seconds.  If timeout is reached - request will return with service error. ")] = None, drop_sharding_key : Annotated[Optional[DropShardingKey], Field(description="Select shard key to delete")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete shard key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_shard_key_with_http_info(collection_name, timeout, drop_sharding_key, async_req=True)
        >>> result = thread.get()

        :param collection_name: Name of the collection to create shards for (required)
        :type collection_name: str
        :param timeout: Wait for operation commit timeout in seconds.  If timeout is reached - request will return with service error. 
        :type timeout: int
        :param drop_sharding_key: Select shard key to delete
        :type drop_sharding_key: DropShardingKey
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateShardKey200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'collection_name',
            'timeout',
            'drop_sharding_key'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_shard_key" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['collection_name'] is not None:
            _path_params['collection_name'] = _params['collection_name']


        # process the query parameters
        _query_params = []
        if _params.get('timeout') is not None:  # noqa: E501
            _query_params.append(('timeout', _params['timeout']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['drop_sharding_key'] is not None:
            _body_params = _params['drop_sharding_key']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['api-key', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "CreateShardKey200Response",
            '4XX': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/collections/{collection_name}/shards/delete', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_shard_snapshot(self, collection_name : Annotated[StrictStr, Field(..., description="Name of the collection for which to delete a snapshot")], shard_id : Annotated[StrictInt, Field(..., description="Id of the shard")], snapshot_name : Annotated[StrictStr, Field(..., description="Name of the snapshot to delete")], wait : Annotated[Optional[StrictBool], Field(description="If true, wait for changes to actually happen. If false - let changes happen in background. Default is true.")] = None, **kwargs) -> CreateShardKey200Response:  # noqa: E501
        """Delete shard snapshot  # noqa: E501

        Delete snapshot of a shard for a collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_shard_snapshot(collection_name, shard_id, snapshot_name, wait, async_req=True)
        >>> result = thread.get()

        :param collection_name: Name of the collection for which to delete a snapshot (required)
        :type collection_name: str
        :param shard_id: Id of the shard (required)
        :type shard_id: int
        :param snapshot_name: Name of the snapshot to delete (required)
        :type snapshot_name: str
        :param wait: If true, wait for changes to actually happen. If false - let changes happen in background. Default is true.
        :type wait: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateShardKey200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delete_shard_snapshot_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_shard_snapshot_with_http_info(collection_name, shard_id, snapshot_name, wait, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_shard_snapshot_with_http_info(self, collection_name : Annotated[StrictStr, Field(..., description="Name of the collection for which to delete a snapshot")], shard_id : Annotated[StrictInt, Field(..., description="Id of the shard")], snapshot_name : Annotated[StrictStr, Field(..., description="Name of the snapshot to delete")], wait : Annotated[Optional[StrictBool], Field(description="If true, wait for changes to actually happen. If false - let changes happen in background. Default is true.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete shard snapshot  # noqa: E501

        Delete snapshot of a shard for a collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_shard_snapshot_with_http_info(collection_name, shard_id, snapshot_name, wait, async_req=True)
        >>> result = thread.get()

        :param collection_name: Name of the collection for which to delete a snapshot (required)
        :type collection_name: str
        :param shard_id: Id of the shard (required)
        :type shard_id: int
        :param snapshot_name: Name of the snapshot to delete (required)
        :type snapshot_name: str
        :param wait: If true, wait for changes to actually happen. If false - let changes happen in background. Default is true.
        :type wait: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateShardKey200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'collection_name',
            'shard_id',
            'snapshot_name',
            'wait'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_shard_snapshot" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['collection_name'] is not None:
            _path_params['collection_name'] = _params['collection_name']

        if _params['shard_id'] is not None:
            _path_params['shard_id'] = _params['shard_id']

        if _params['snapshot_name'] is not None:
            _path_params['snapshot_name'] = _params['snapshot_name']


        # process the query parameters
        _query_params = []
        if _params.get('wait') is not None:  # noqa: E501
            _query_params.append(('wait', _params['wait']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api-key', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "CreateShardKey200Response",
            '202': "RecoverFromUploadedSnapshot202Response",
            '4XX': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/collections/{collection_name}/shards/{shard_id}/snapshots/{snapshot_name}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_snapshot(self, collection_name : Annotated[StrictStr, Field(..., description="Name of the collection for which to delete a snapshot")], snapshot_name : Annotated[StrictStr, Field(..., description="Name of the snapshot to delete")], wait : Annotated[Optional[StrictBool], Field(description="If true, wait for changes to actually happen. If false - let changes happen in background. Default is true.")] = None, **kwargs) -> CreateShardKey200Response:  # noqa: E501
        """Delete collection snapshot  # noqa: E501

        Delete snapshot for a collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_snapshot(collection_name, snapshot_name, wait, async_req=True)
        >>> result = thread.get()

        :param collection_name: Name of the collection for which to delete a snapshot (required)
        :type collection_name: str
        :param snapshot_name: Name of the snapshot to delete (required)
        :type snapshot_name: str
        :param wait: If true, wait for changes to actually happen. If false - let changes happen in background. Default is true.
        :type wait: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateShardKey200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delete_snapshot_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_snapshot_with_http_info(collection_name, snapshot_name, wait, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_snapshot_with_http_info(self, collection_name : Annotated[StrictStr, Field(..., description="Name of the collection for which to delete a snapshot")], snapshot_name : Annotated[StrictStr, Field(..., description="Name of the snapshot to delete")], wait : Annotated[Optional[StrictBool], Field(description="If true, wait for changes to actually happen. If false - let changes happen in background. Default is true.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete collection snapshot  # noqa: E501

        Delete snapshot for a collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_snapshot_with_http_info(collection_name, snapshot_name, wait, async_req=True)
        >>> result = thread.get()

        :param collection_name: Name of the collection for which to delete a snapshot (required)
        :type collection_name: str
        :param snapshot_name: Name of the snapshot to delete (required)
        :type snapshot_name: str
        :param wait: If true, wait for changes to actually happen. If false - let changes happen in background. Default is true.
        :type wait: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateShardKey200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'collection_name',
            'snapshot_name',
            'wait'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_snapshot" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['collection_name'] is not None:
            _path_params['collection_name'] = _params['collection_name']

        if _params['snapshot_name'] is not None:
            _path_params['snapshot_name'] = _params['snapshot_name']


        # process the query parameters
        _query_params = []
        if _params.get('wait') is not None:  # noqa: E501
            _query_params.append(('wait', _params['wait']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api-key', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "CreateShardKey200Response",
            '202': "RecoverFromUploadedSnapshot202Response",
            '4XX': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/collections/{collection_name}/snapshots/{snapshot_name}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_collection(self, collection_name : Annotated[StrictStr, Field(..., description="Name of the collection to retrieve")], **kwargs) -> GetCollection200Response:  # noqa: E501
        """Collection info  # noqa: E501

        Get detailed information about specified existing collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_collection(collection_name, async_req=True)
        >>> result = thread.get()

        :param collection_name: Name of the collection to retrieve (required)
        :type collection_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetCollection200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_collection_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_collection_with_http_info(collection_name, **kwargs)  # noqa: E501

    @validate_arguments
    def get_collection_with_http_info(self, collection_name : Annotated[StrictStr, Field(..., description="Name of the collection to retrieve")], **kwargs) -> ApiResponse:  # noqa: E501
        """Collection info  # noqa: E501

        Get detailed information about specified existing collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_collection_with_http_info(collection_name, async_req=True)
        >>> result = thread.get()

        :param collection_name: Name of the collection to retrieve (required)
        :type collection_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetCollection200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'collection_name'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_collection" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['collection_name'] is not None:
            _path_params['collection_name'] = _params['collection_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api-key', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "GetCollection200Response",
            '4XX': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/collections/{collection_name}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_collection_aliases(self, collection_name : Annotated[StrictStr, Field(..., description="Name of the collection")], **kwargs) -> GetCollectionAliases200Response:  # noqa: E501
        """List aliases for collection  # noqa: E501

        Get list of all aliases for a collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_collection_aliases(collection_name, async_req=True)
        >>> result = thread.get()

        :param collection_name: Name of the collection (required)
        :type collection_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetCollectionAliases200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_collection_aliases_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_collection_aliases_with_http_info(collection_name, **kwargs)  # noqa: E501

    @validate_arguments
    def get_collection_aliases_with_http_info(self, collection_name : Annotated[StrictStr, Field(..., description="Name of the collection")], **kwargs) -> ApiResponse:  # noqa: E501
        """List aliases for collection  # noqa: E501

        Get list of all aliases for a collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_collection_aliases_with_http_info(collection_name, async_req=True)
        >>> result = thread.get()

        :param collection_name: Name of the collection (required)
        :type collection_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetCollectionAliases200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'collection_name'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_collection_aliases" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['collection_name'] is not None:
            _path_params['collection_name'] = _params['collection_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api-key', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "GetCollectionAliases200Response",
            '4XX': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/collections/{collection_name}/aliases', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_collections(self, **kwargs) -> GetCollections200Response:  # noqa: E501
        """List collections  # noqa: E501

        Get list name of all existing collections  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_collections(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetCollections200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_collections_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_collections_with_http_info(**kwargs)  # noqa: E501

    @validate_arguments
    def get_collections_with_http_info(self, **kwargs) -> ApiResponse:  # noqa: E501
        """List collections  # noqa: E501

        Get list name of all existing collections  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_collections_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetCollections200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_collections" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api-key', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "GetCollections200Response",
            '4XX': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/collections', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_collections_aliases(self, **kwargs) -> GetCollectionAliases200Response:  # noqa: E501
        """List collections aliases  # noqa: E501

        Get list of all existing collections aliases  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_collections_aliases(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetCollectionAliases200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_collections_aliases_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_collections_aliases_with_http_info(**kwargs)  # noqa: E501

    @validate_arguments
    def get_collections_aliases_with_http_info(self, **kwargs) -> ApiResponse:  # noqa: E501
        """List collections aliases  # noqa: E501

        Get list of all existing collections aliases  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_collections_aliases_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetCollectionAliases200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_collections_aliases" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api-key', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "GetCollectionAliases200Response",
            '4XX': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/aliases', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_shard_snapshot(self, collection_name : Annotated[StrictStr, Field(..., description="Name of the collection")], shard_id : Annotated[StrictInt, Field(..., description="Id of the shard")], snapshot_name : Annotated[StrictStr, Field(..., description="Name of the snapshot to download")], **kwargs) -> bytearray:  # noqa: E501
        """Download collection snapshot  # noqa: E501

        Download specified snapshot of a shard from a collection as a file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_shard_snapshot(collection_name, shard_id, snapshot_name, async_req=True)
        >>> result = thread.get()

        :param collection_name: Name of the collection (required)
        :type collection_name: str
        :param shard_id: Id of the shard (required)
        :type shard_id: int
        :param snapshot_name: Name of the snapshot to download (required)
        :type snapshot_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: bytearray
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_shard_snapshot_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_shard_snapshot_with_http_info(collection_name, shard_id, snapshot_name, **kwargs)  # noqa: E501

    @validate_arguments
    def get_shard_snapshot_with_http_info(self, collection_name : Annotated[StrictStr, Field(..., description="Name of the collection")], shard_id : Annotated[StrictInt, Field(..., description="Id of the shard")], snapshot_name : Annotated[StrictStr, Field(..., description="Name of the snapshot to download")], **kwargs) -> ApiResponse:  # noqa: E501
        """Download collection snapshot  # noqa: E501

        Download specified snapshot of a shard from a collection as a file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_shard_snapshot_with_http_info(collection_name, shard_id, snapshot_name, async_req=True)
        >>> result = thread.get()

        :param collection_name: Name of the collection (required)
        :type collection_name: str
        :param shard_id: Id of the shard (required)
        :type shard_id: int
        :param snapshot_name: Name of the snapshot to download (required)
        :type snapshot_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(bytearray, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'collection_name',
            'shard_id',
            'snapshot_name'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_shard_snapshot" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['collection_name'] is not None:
            _path_params['collection_name'] = _params['collection_name']

        if _params['shard_id'] is not None:
            _path_params['shard_id'] = _params['shard_id']

        if _params['snapshot_name'] is not None:
            _path_params['snapshot_name'] = _params['snapshot_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/octet-stream'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api-key', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "bytearray",
            '4XX': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/collections/{collection_name}/shards/{shard_id}/snapshots/{snapshot_name}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_snapshot(self, collection_name : Annotated[StrictStr, Field(..., description="Name of the collection")], snapshot_name : Annotated[StrictStr, Field(..., description="Name of the snapshot to download")], **kwargs) -> bytearray:  # noqa: E501
        """Download collection snapshot  # noqa: E501

        Download specified snapshot from a collection as a file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_snapshot(collection_name, snapshot_name, async_req=True)
        >>> result = thread.get()

        :param collection_name: Name of the collection (required)
        :type collection_name: str
        :param snapshot_name: Name of the snapshot to download (required)
        :type snapshot_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: bytearray
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_snapshot_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_snapshot_with_http_info(collection_name, snapshot_name, **kwargs)  # noqa: E501

    @validate_arguments
    def get_snapshot_with_http_info(self, collection_name : Annotated[StrictStr, Field(..., description="Name of the collection")], snapshot_name : Annotated[StrictStr, Field(..., description="Name of the snapshot to download")], **kwargs) -> ApiResponse:  # noqa: E501
        """Download collection snapshot  # noqa: E501

        Download specified snapshot from a collection as a file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_snapshot_with_http_info(collection_name, snapshot_name, async_req=True)
        >>> result = thread.get()

        :param collection_name: Name of the collection (required)
        :type collection_name: str
        :param snapshot_name: Name of the snapshot to download (required)
        :type snapshot_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(bytearray, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'collection_name',
            'snapshot_name'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_snapshot" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['collection_name'] is not None:
            _path_params['collection_name'] = _params['collection_name']

        if _params['snapshot_name'] is not None:
            _path_params['snapshot_name'] = _params['snapshot_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/octet-stream'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api-key', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "bytearray",
            '4XX': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/collections/{collection_name}/snapshots/{snapshot_name}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_shard_snapshots(self, collection_name : Annotated[StrictStr, Field(..., description="Name of the collection")], shard_id : Annotated[StrictInt, Field(..., description="Id of the shard")], **kwargs) -> ListSnapshots200Response:  # noqa: E501
        """List shards snapshots for a collection  # noqa: E501

        Get list of snapshots for a shard of a collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_shard_snapshots(collection_name, shard_id, async_req=True)
        >>> result = thread.get()

        :param collection_name: Name of the collection (required)
        :type collection_name: str
        :param shard_id: Id of the shard (required)
        :type shard_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListSnapshots200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the list_shard_snapshots_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.list_shard_snapshots_with_http_info(collection_name, shard_id, **kwargs)  # noqa: E501

    @validate_arguments
    def list_shard_snapshots_with_http_info(self, collection_name : Annotated[StrictStr, Field(..., description="Name of the collection")], shard_id : Annotated[StrictInt, Field(..., description="Id of the shard")], **kwargs) -> ApiResponse:  # noqa: E501
        """List shards snapshots for a collection  # noqa: E501

        Get list of snapshots for a shard of a collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_shard_snapshots_with_http_info(collection_name, shard_id, async_req=True)
        >>> result = thread.get()

        :param collection_name: Name of the collection (required)
        :type collection_name: str
        :param shard_id: Id of the shard (required)
        :type shard_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListSnapshots200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'collection_name',
            'shard_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_shard_snapshots" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['collection_name'] is not None:
            _path_params['collection_name'] = _params['collection_name']

        if _params['shard_id'] is not None:
            _path_params['shard_id'] = _params['shard_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api-key', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "ListSnapshots200Response",
            '4XX': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/collections/{collection_name}/shards/{shard_id}/snapshots', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_snapshots(self, collection_name : Annotated[StrictStr, Field(..., description="Name of the collection")], **kwargs) -> ListSnapshots200Response:  # noqa: E501
        """List collection snapshots  # noqa: E501

        Get list of snapshots for a collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_snapshots(collection_name, async_req=True)
        >>> result = thread.get()

        :param collection_name: Name of the collection (required)
        :type collection_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListSnapshots200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the list_snapshots_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.list_snapshots_with_http_info(collection_name, **kwargs)  # noqa: E501

    @validate_arguments
    def list_snapshots_with_http_info(self, collection_name : Annotated[StrictStr, Field(..., description="Name of the collection")], **kwargs) -> ApiResponse:  # noqa: E501
        """List collection snapshots  # noqa: E501

        Get list of snapshots for a collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_snapshots_with_http_info(collection_name, async_req=True)
        >>> result = thread.get()

        :param collection_name: Name of the collection (required)
        :type collection_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListSnapshots200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'collection_name'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_snapshots" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['collection_name'] is not None:
            _path_params['collection_name'] = _params['collection_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['api-key', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "ListSnapshots200Response",
            '4XX': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/collections/{collection_name}/snapshots', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def recover_from_snapshot(self, collection_name : Annotated[StrictStr, Field(..., description="Name of the collection")], wait : Annotated[Optional[StrictBool], Field(description="If true, wait for changes to actually happen. If false - let changes happen in background. Default is true.")] = None, snapshot_recover : Annotated[Optional[SnapshotRecover], Field(description="Snapshot to recover from")] = None, **kwargs) -> CreateShardKey200Response:  # noqa: E501
        """Recover from a snapshot  # noqa: E501

        Recover local collection data from a snapshot. This will overwrite any data, stored on this node, for the collection. If collection does not exist - it will be created.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.recover_from_snapshot(collection_name, wait, snapshot_recover, async_req=True)
        >>> result = thread.get()

        :param collection_name: Name of the collection (required)
        :type collection_name: str
        :param wait: If true, wait for changes to actually happen. If false - let changes happen in background. Default is true.
        :type wait: bool
        :param snapshot_recover: Snapshot to recover from
        :type snapshot_recover: SnapshotRecover
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateShardKey200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the recover_from_snapshot_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.recover_from_snapshot_with_http_info(collection_name, wait, snapshot_recover, **kwargs)  # noqa: E501

    @validate_arguments
    def recover_from_snapshot_with_http_info(self, collection_name : Annotated[StrictStr, Field(..., description="Name of the collection")], wait : Annotated[Optional[StrictBool], Field(description="If true, wait for changes to actually happen. If false - let changes happen in background. Default is true.")] = None, snapshot_recover : Annotated[Optional[SnapshotRecover], Field(description="Snapshot to recover from")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Recover from a snapshot  # noqa: E501

        Recover local collection data from a snapshot. This will overwrite any data, stored on this node, for the collection. If collection does not exist - it will be created.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.recover_from_snapshot_with_http_info(collection_name, wait, snapshot_recover, async_req=True)
        >>> result = thread.get()

        :param collection_name: Name of the collection (required)
        :type collection_name: str
        :param wait: If true, wait for changes to actually happen. If false - let changes happen in background. Default is true.
        :type wait: bool
        :param snapshot_recover: Snapshot to recover from
        :type snapshot_recover: SnapshotRecover
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateShardKey200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'collection_name',
            'wait',
            'snapshot_recover'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method recover_from_snapshot" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['collection_name'] is not None:
            _path_params['collection_name'] = _params['collection_name']


        # process the query parameters
        _query_params = []
        if _params.get('wait') is not None:  # noqa: E501
            _query_params.append(('wait', _params['wait']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['snapshot_recover'] is not None:
            _body_params = _params['snapshot_recover']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['api-key', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "CreateShardKey200Response",
            '202': "RecoverFromUploadedSnapshot202Response",
            '4XX': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/collections/{collection_name}/snapshots/recover', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def recover_from_uploaded_snapshot(self, collection_name : Annotated[StrictStr, Field(..., description="Name of the collection")], wait : Annotated[Optional[StrictBool], Field(description="If true, wait for changes to actually happen. If false - let changes happen in background. Default is true.")] = None, priority : Annotated[Optional[SnapshotPriority], Field(description="Defines source of truth for snapshot recovery")] = None, snapshot : Optional[Union[StrictBytes, StrictStr]] = None, **kwargs) -> CreateShardKey200Response:  # noqa: E501
        """Recover from an uploaded snapshot  # noqa: E501

        Recover local collection data from an uploaded snapshot. This will overwrite any data, stored on this node, for the collection. If collection does not exist - it will be created.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.recover_from_uploaded_snapshot(collection_name, wait, priority, snapshot, async_req=True)
        >>> result = thread.get()

        :param collection_name: Name of the collection (required)
        :type collection_name: str
        :param wait: If true, wait for changes to actually happen. If false - let changes happen in background. Default is true.
        :type wait: bool
        :param priority: Defines source of truth for snapshot recovery
        :type priority: SnapshotPriority
        :param snapshot:
        :type snapshot: bytearray
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateShardKey200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the recover_from_uploaded_snapshot_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.recover_from_uploaded_snapshot_with_http_info(collection_name, wait, priority, snapshot, **kwargs)  # noqa: E501

    @validate_arguments
    def recover_from_uploaded_snapshot_with_http_info(self, collection_name : Annotated[StrictStr, Field(..., description="Name of the collection")], wait : Annotated[Optional[StrictBool], Field(description="If true, wait for changes to actually happen. If false - let changes happen in background. Default is true.")] = None, priority : Annotated[Optional[SnapshotPriority], Field(description="Defines source of truth for snapshot recovery")] = None, snapshot : Optional[Union[StrictBytes, StrictStr]] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Recover from an uploaded snapshot  # noqa: E501

        Recover local collection data from an uploaded snapshot. This will overwrite any data, stored on this node, for the collection. If collection does not exist - it will be created.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.recover_from_uploaded_snapshot_with_http_info(collection_name, wait, priority, snapshot, async_req=True)
        >>> result = thread.get()

        :param collection_name: Name of the collection (required)
        :type collection_name: str
        :param wait: If true, wait for changes to actually happen. If false - let changes happen in background. Default is true.
        :type wait: bool
        :param priority: Defines source of truth for snapshot recovery
        :type priority: SnapshotPriority
        :param snapshot:
        :type snapshot: bytearray
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateShardKey200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'collection_name',
            'wait',
            'priority',
            'snapshot'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method recover_from_uploaded_snapshot" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['collection_name'] is not None:
            _path_params['collection_name'] = _params['collection_name']


        # process the query parameters
        _query_params = []
        if _params.get('wait') is not None:  # noqa: E501
            _query_params.append(('wait', _params['wait']))

        if _params.get('priority') is not None:  # noqa: E501
            _query_params.append(('priority', _params['priority'].value))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        if _params['snapshot'] is not None:
            _files['snapshot'] = _params['snapshot']

        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['api-key', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "CreateShardKey200Response",
            '202': "RecoverFromUploadedSnapshot202Response",
            '4XX': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/collections/{collection_name}/snapshots/upload', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def recover_shard_from_snapshot(self, collection_name : Annotated[StrictStr, Field(..., description="Name of the collection")], shard_id : Annotated[StrictInt, Field(..., description="Id of the shard to recover")], wait : Annotated[Optional[StrictBool], Field(description="If true, wait for changes to actually happen. If false - let changes happen in background. Default is true.")] = None, shard_snapshot_recover : Annotated[Optional[ShardSnapshotRecover], Field(description="Snapshot to recover from")] = None, **kwargs) -> CreateShardKey200Response:  # noqa: E501
        """Recover from a snapshot  # noqa: E501

        Recover shard of a local collection data from a snapshot. This will overwrite any data, stored in this shard, for the collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.recover_shard_from_snapshot(collection_name, shard_id, wait, shard_snapshot_recover, async_req=True)
        >>> result = thread.get()

        :param collection_name: Name of the collection (required)
        :type collection_name: str
        :param shard_id: Id of the shard to recover (required)
        :type shard_id: int
        :param wait: If true, wait for changes to actually happen. If false - let changes happen in background. Default is true.
        :type wait: bool
        :param shard_snapshot_recover: Snapshot to recover from
        :type shard_snapshot_recover: ShardSnapshotRecover
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateShardKey200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the recover_shard_from_snapshot_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.recover_shard_from_snapshot_with_http_info(collection_name, shard_id, wait, shard_snapshot_recover, **kwargs)  # noqa: E501

    @validate_arguments
    def recover_shard_from_snapshot_with_http_info(self, collection_name : Annotated[StrictStr, Field(..., description="Name of the collection")], shard_id : Annotated[StrictInt, Field(..., description="Id of the shard to recover")], wait : Annotated[Optional[StrictBool], Field(description="If true, wait for changes to actually happen. If false - let changes happen in background. Default is true.")] = None, shard_snapshot_recover : Annotated[Optional[ShardSnapshotRecover], Field(description="Snapshot to recover from")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Recover from a snapshot  # noqa: E501

        Recover shard of a local collection data from a snapshot. This will overwrite any data, stored in this shard, for the collection.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.recover_shard_from_snapshot_with_http_info(collection_name, shard_id, wait, shard_snapshot_recover, async_req=True)
        >>> result = thread.get()

        :param collection_name: Name of the collection (required)
        :type collection_name: str
        :param shard_id: Id of the shard to recover (required)
        :type shard_id: int
        :param wait: If true, wait for changes to actually happen. If false - let changes happen in background. Default is true.
        :type wait: bool
        :param shard_snapshot_recover: Snapshot to recover from
        :type shard_snapshot_recover: ShardSnapshotRecover
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateShardKey200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'collection_name',
            'shard_id',
            'wait',
            'shard_snapshot_recover'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method recover_shard_from_snapshot" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['collection_name'] is not None:
            _path_params['collection_name'] = _params['collection_name']

        if _params['shard_id'] is not None:
            _path_params['shard_id'] = _params['shard_id']


        # process the query parameters
        _query_params = []
        if _params.get('wait') is not None:  # noqa: E501
            _query_params.append(('wait', _params['wait']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['shard_snapshot_recover'] is not None:
            _body_params = _params['shard_snapshot_recover']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['api-key', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "CreateShardKey200Response",
            '202': "RecoverFromUploadedSnapshot202Response",
            '4XX': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/collections/{collection_name}/shards/{shard_id}/snapshots/recover', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def recover_shard_from_uploaded_snapshot(self, collection_name : Annotated[StrictStr, Field(..., description="Name of the collection")], shard_id : Annotated[StrictInt, Field(..., description="Id of the shard to recover")], wait : Annotated[Optional[StrictBool], Field(description="If true, wait for changes to actually happen. If false - let changes happen in background. Default is true.")] = None, priority : Annotated[Optional[SnapshotPriority], Field(description="Defines source of truth for snapshot recovery")] = None, snapshot : Optional[Union[StrictBytes, StrictStr]] = None, **kwargs) -> CreateShardKey200Response:  # noqa: E501
        """Recover shard from an uploaded snapshot  # noqa: E501

        Recover shard of a local collection from an uploaded snapshot. This will overwrite any data, stored on this node, for the collection shard.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.recover_shard_from_uploaded_snapshot(collection_name, shard_id, wait, priority, snapshot, async_req=True)
        >>> result = thread.get()

        :param collection_name: Name of the collection (required)
        :type collection_name: str
        :param shard_id: Id of the shard to recover (required)
        :type shard_id: int
        :param wait: If true, wait for changes to actually happen. If false - let changes happen in background. Default is true.
        :type wait: bool
        :param priority: Defines source of truth for snapshot recovery
        :type priority: SnapshotPriority
        :param snapshot:
        :type snapshot: bytearray
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateShardKey200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the recover_shard_from_uploaded_snapshot_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.recover_shard_from_uploaded_snapshot_with_http_info(collection_name, shard_id, wait, priority, snapshot, **kwargs)  # noqa: E501

    @validate_arguments
    def recover_shard_from_uploaded_snapshot_with_http_info(self, collection_name : Annotated[StrictStr, Field(..., description="Name of the collection")], shard_id : Annotated[StrictInt, Field(..., description="Id of the shard to recover")], wait : Annotated[Optional[StrictBool], Field(description="If true, wait for changes to actually happen. If false - let changes happen in background. Default is true.")] = None, priority : Annotated[Optional[SnapshotPriority], Field(description="Defines source of truth for snapshot recovery")] = None, snapshot : Optional[Union[StrictBytes, StrictStr]] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Recover shard from an uploaded snapshot  # noqa: E501

        Recover shard of a local collection from an uploaded snapshot. This will overwrite any data, stored on this node, for the collection shard.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.recover_shard_from_uploaded_snapshot_with_http_info(collection_name, shard_id, wait, priority, snapshot, async_req=True)
        >>> result = thread.get()

        :param collection_name: Name of the collection (required)
        :type collection_name: str
        :param shard_id: Id of the shard to recover (required)
        :type shard_id: int
        :param wait: If true, wait for changes to actually happen. If false - let changes happen in background. Default is true.
        :type wait: bool
        :param priority: Defines source of truth for snapshot recovery
        :type priority: SnapshotPriority
        :param snapshot:
        :type snapshot: bytearray
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateShardKey200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'collection_name',
            'shard_id',
            'wait',
            'priority',
            'snapshot'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method recover_shard_from_uploaded_snapshot" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['collection_name'] is not None:
            _path_params['collection_name'] = _params['collection_name']

        if _params['shard_id'] is not None:
            _path_params['shard_id'] = _params['shard_id']


        # process the query parameters
        _query_params = []
        if _params.get('wait') is not None:  # noqa: E501
            _query_params.append(('wait', _params['wait']))

        if _params.get('priority') is not None:  # noqa: E501
            _query_params.append(('priority', _params['priority'].value))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        if _params['snapshot'] is not None:
            _files['snapshot'] = _params['snapshot']

        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['api-key', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "CreateShardKey200Response",
            '202': "RecoverFromUploadedSnapshot202Response",
            '4XX': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/collections/{collection_name}/shards/{shard_id}/snapshots/upload', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_aliases(self, timeout : Annotated[Optional[StrictInt], Field(description="Wait for operation commit timeout in seconds.  If timeout is reached - request will return with service error. ")] = None, change_aliases_operation : Annotated[Optional[ChangeAliasesOperation], Field(description="Alias update operations")] = None, **kwargs) -> CreateShardKey200Response:  # noqa: E501
        """Update aliases of the collections  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_aliases(timeout, change_aliases_operation, async_req=True)
        >>> result = thread.get()

        :param timeout: Wait for operation commit timeout in seconds.  If timeout is reached - request will return with service error. 
        :type timeout: int
        :param change_aliases_operation: Alias update operations
        :type change_aliases_operation: ChangeAliasesOperation
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateShardKey200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_aliases_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.update_aliases_with_http_info(timeout, change_aliases_operation, **kwargs)  # noqa: E501

    @validate_arguments
    def update_aliases_with_http_info(self, timeout : Annotated[Optional[StrictInt], Field(description="Wait for operation commit timeout in seconds.  If timeout is reached - request will return with service error. ")] = None, change_aliases_operation : Annotated[Optional[ChangeAliasesOperation], Field(description="Alias update operations")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update aliases of the collections  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_aliases_with_http_info(timeout, change_aliases_operation, async_req=True)
        >>> result = thread.get()

        :param timeout: Wait for operation commit timeout in seconds.  If timeout is reached - request will return with service error. 
        :type timeout: int
        :param change_aliases_operation: Alias update operations
        :type change_aliases_operation: ChangeAliasesOperation
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateShardKey200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'timeout',
            'change_aliases_operation'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_aliases" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('timeout') is not None:  # noqa: E501
            _query_params.append(('timeout', _params['timeout']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['change_aliases_operation'] is not None:
            _body_params = _params['change_aliases_operation']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['api-key', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "CreateShardKey200Response",
            '4XX': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/collections/aliases', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_collection(self, collection_name : Annotated[StrictStr, Field(..., description="Name of the collection to update")], timeout : Annotated[Optional[StrictInt], Field(description="Wait for operation commit timeout in seconds.  If timeout is reached - request will return with service error. ")] = None, update_collection : Annotated[Optional[UpdateCollection], Field(description="New parameters")] = None, **kwargs) -> CreateShardKey200Response:  # noqa: E501
        """Update collection parameters  # noqa: E501

        Update parameters of the existing collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_collection(collection_name, timeout, update_collection, async_req=True)
        >>> result = thread.get()

        :param collection_name: Name of the collection to update (required)
        :type collection_name: str
        :param timeout: Wait for operation commit timeout in seconds.  If timeout is reached - request will return with service error. 
        :type timeout: int
        :param update_collection: New parameters
        :type update_collection: UpdateCollection
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateShardKey200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_collection_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.update_collection_with_http_info(collection_name, timeout, update_collection, **kwargs)  # noqa: E501

    @validate_arguments
    def update_collection_with_http_info(self, collection_name : Annotated[StrictStr, Field(..., description="Name of the collection to update")], timeout : Annotated[Optional[StrictInt], Field(description="Wait for operation commit timeout in seconds.  If timeout is reached - request will return with service error. ")] = None, update_collection : Annotated[Optional[UpdateCollection], Field(description="New parameters")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update collection parameters  # noqa: E501

        Update parameters of the existing collection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_collection_with_http_info(collection_name, timeout, update_collection, async_req=True)
        >>> result = thread.get()

        :param collection_name: Name of the collection to update (required)
        :type collection_name: str
        :param timeout: Wait for operation commit timeout in seconds.  If timeout is reached - request will return with service error. 
        :type timeout: int
        :param update_collection: New parameters
        :type update_collection: UpdateCollection
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateShardKey200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'collection_name',
            'timeout',
            'update_collection'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_collection" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['collection_name'] is not None:
            _path_params['collection_name'] = _params['collection_name']


        # process the query parameters
        _query_params = []
        if _params.get('timeout') is not None:  # noqa: E501
            _query_params.append(('timeout', _params['timeout']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['update_collection'] is not None:
            _body_params = _params['update_collection']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['api-key', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "CreateShardKey200Response",
            '4XX': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/collections/{collection_name}', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_collection_cluster(self, collection_name : Annotated[StrictStr, Field(..., description="Name of the collection on which to to apply the cluster update operation")], timeout : Annotated[Optional[StrictInt], Field(description="Wait for operation commit timeout in seconds.  If timeout is reached - request will return with service error. ")] = None, cluster_operations : Annotated[Optional[ClusterOperations], Field(description="Collection cluster update operations")] = None, **kwargs) -> CreateShardKey200Response:  # noqa: E501
        """Update collection cluster setup  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_collection_cluster(collection_name, timeout, cluster_operations, async_req=True)
        >>> result = thread.get()

        :param collection_name: Name of the collection on which to to apply the cluster update operation (required)
        :type collection_name: str
        :param timeout: Wait for operation commit timeout in seconds.  If timeout is reached - request will return with service error. 
        :type timeout: int
        :param cluster_operations: Collection cluster update operations
        :type cluster_operations: ClusterOperations
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateShardKey200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_collection_cluster_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.update_collection_cluster_with_http_info(collection_name, timeout, cluster_operations, **kwargs)  # noqa: E501

    @validate_arguments
    def update_collection_cluster_with_http_info(self, collection_name : Annotated[StrictStr, Field(..., description="Name of the collection on which to to apply the cluster update operation")], timeout : Annotated[Optional[StrictInt], Field(description="Wait for operation commit timeout in seconds.  If timeout is reached - request will return with service error. ")] = None, cluster_operations : Annotated[Optional[ClusterOperations], Field(description="Collection cluster update operations")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update collection cluster setup  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_collection_cluster_with_http_info(collection_name, timeout, cluster_operations, async_req=True)
        >>> result = thread.get()

        :param collection_name: Name of the collection on which to to apply the cluster update operation (required)
        :type collection_name: str
        :param timeout: Wait for operation commit timeout in seconds.  If timeout is reached - request will return with service error. 
        :type timeout: int
        :param cluster_operations: Collection cluster update operations
        :type cluster_operations: ClusterOperations
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateShardKey200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'collection_name',
            'timeout',
            'cluster_operations'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_collection_cluster" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['collection_name'] is not None:
            _path_params['collection_name'] = _params['collection_name']


        # process the query parameters
        _query_params = []
        if _params.get('timeout') is not None:  # noqa: E501
            _query_params.append(('timeout', _params['timeout']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['cluster_operations'] is not None:
            _body_params = _params['cluster_operations']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['api-key', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "CreateShardKey200Response",
            '4XX': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/collections/{collection_name}/cluster', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
