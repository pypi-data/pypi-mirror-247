# coding: utf-8

"""
    Qdrant API

    API description for Qdrant vector search engine.  This document describes CRUD and search operations on collections of points (vectors with payload).  Qdrant supports any combinations of `should`, `must` and `must_not` conditions, which makes it possible to use in applications when object could not be described solely by vector. It could be location features, availability flags, and other custom properties businesses should take into account. ## Examples This examples cover the most basic use-cases - collection creation and basic vector search. ### Create collection First - let's create a collection with dot-production metric. ``` curl -X PUT 'http://localhost:6333/collections/test_collection' \\   -H 'Content-Type: application/json' \\   --data-raw '{     \"vectors\": {       \"size\": 4,       \"distance\": \"Dot\"     }   }'  ``` Expected response: ``` {     \"result\": true,     \"status\": \"ok\",     \"time\": 0.031095451 } ``` We can ensure that collection was created: ``` curl 'http://localhost:6333/collections/test_collection' ``` Expected response: ``` {   \"result\": {     \"status\": \"green\",     \"vectors_count\": 0,     \"segments_count\": 5,     \"disk_data_size\": 0,     \"ram_data_size\": 0,     \"config\": {       \"params\": {         \"vectors\": {           \"size\": 4,           \"distance\": \"Dot\"         }       },       \"hnsw_config\": {         \"m\": 16,         \"ef_construct\": 100,         \"full_scan_threshold\": 10000       },       \"optimizer_config\": {         \"deleted_threshold\": 0.2,         \"vacuum_min_vector_number\": 1000,         \"max_segment_number\": 5,         \"memmap_threshold\": 50000,         \"indexing_threshold\": 20000,         \"flush_interval_sec\": 1       },       \"wal_config\": {         \"wal_capacity_mb\": 32,         \"wal_segments_ahead\": 0       }     }   },   \"status\": \"ok\",   \"time\": 2.1199e-05 } ```  ### Add points Let's now add vectors with some payload: ``` curl -L -X PUT 'http://localhost:6333/collections/test_collection/points?wait=true' \\ -H 'Content-Type: application/json' \\ --data-raw '{   \"points\": [     {\"id\": 1, \"vector\": [0.05, 0.61, 0.76, 0.74], \"payload\": {\"city\": \"Berlin\"}},     {\"id\": 2, \"vector\": [0.19, 0.81, 0.75, 0.11], \"payload\": {\"city\": [\"Berlin\", \"London\"] }},     {\"id\": 3, \"vector\": [0.36, 0.55, 0.47, 0.94], \"payload\": {\"city\": [\"Berlin\", \"Moscow\"] }},     {\"id\": 4, \"vector\": [0.18, 0.01, 0.85, 0.80], \"payload\": {\"city\": [\"London\", \"Moscow\"] }},     {\"id\": 5, \"vector\": [0.24, 0.18, 0.22, 0.44], \"payload\": {\"count\": [0]}},     {\"id\": 6, \"vector\": [0.35, 0.08, 0.11, 0.44]}   ] }' ``` Expected response: ``` {     \"result\": {         \"operation_id\": 0,         \"status\": \"completed\"     },     \"status\": \"ok\",     \"time\": 0.000206061 } ``` ### Search with filtering Let's start with a basic request: ``` curl -L -X POST 'http://localhost:6333/collections/test_collection/points/search' \\ -H 'Content-Type: application/json' \\ --data-raw '{     \"vector\": [0.2,0.1,0.9,0.7],     \"top\": 3 }' ``` Expected response: ``` {     \"result\": [         { \"id\": 4, \"score\": 1.362, \"payload\": null, \"version\": 0 },         { \"id\": 1, \"score\": 1.273, \"payload\": null, \"version\": 0 },         { \"id\": 3, \"score\": 1.208, \"payload\": null, \"version\": 0 }     ],     \"status\": \"ok\",     \"time\": 0.000055785 } ``` But result is different if we add a filter: ``` curl -L -X POST 'http://localhost:6333/collections/test_collection/points/search' \\ -H 'Content-Type: application/json' \\ --data-raw '{     \"filter\": {         \"should\": [             {                 \"key\": \"city\",                 \"match\": {                     \"value\": \"London\"                 }             }         ]     },     \"vector\": [0.2, 0.1, 0.9, 0.7],     \"top\": 3 }' ``` Expected response: ``` {     \"result\": [         { \"id\": 4, \"score\": 1.362, \"payload\": null, \"version\": 0 },         { \"id\": 2, \"score\": 0.871, \"payload\": null, \"version\": 0 }     ],     \"status\": \"ok\",     \"time\": 0.000093972 } ``` 

    The version of the OpenAPI document: v1.7.x
    Contact: andrey@vasnetsov.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, validator
from qdrant_openapi.models.clear_payload_operation import ClearPayloadOperation
from qdrant_openapi.models.delete_operation import DeleteOperation
from qdrant_openapi.models.delete_payload_operation import DeletePayloadOperation
from qdrant_openapi.models.delete_vectors_operation import DeleteVectorsOperation
from qdrant_openapi.models.overwrite_payload_operation import OverwritePayloadOperation
from qdrant_openapi.models.set_payload_operation import SetPayloadOperation
from qdrant_openapi.models.update_vectors_operation import UpdateVectorsOperation
from qdrant_openapi.models.upsert_operation import UpsertOperation
from typing import Union, Any, List, TYPE_CHECKING
from pydantic import StrictStr, Field

UPDATEOPERATION_ANY_OF_SCHEMAS = ["ClearPayloadOperation", "DeleteOperation", "DeletePayloadOperation", "DeleteVectorsOperation", "OverwritePayloadOperation", "SetPayloadOperation", "UpdateVectorsOperation", "UpsertOperation"]

class UpdateOperation(BaseModel):
    """
    UpdateOperation
    """

    # data type: UpsertOperation
    anyof_schema_1_validator: Optional[UpsertOperation] = None
    # data type: DeleteOperation
    anyof_schema_2_validator: Optional[DeleteOperation] = None
    # data type: SetPayloadOperation
    anyof_schema_3_validator: Optional[SetPayloadOperation] = None
    # data type: OverwritePayloadOperation
    anyof_schema_4_validator: Optional[OverwritePayloadOperation] = None
    # data type: DeletePayloadOperation
    anyof_schema_5_validator: Optional[DeletePayloadOperation] = None
    # data type: ClearPayloadOperation
    anyof_schema_6_validator: Optional[ClearPayloadOperation] = None
    # data type: UpdateVectorsOperation
    anyof_schema_7_validator: Optional[UpdateVectorsOperation] = None
    # data type: DeleteVectorsOperation
    anyof_schema_8_validator: Optional[DeleteVectorsOperation] = None
    if TYPE_CHECKING:
        actual_instance: Union[ClearPayloadOperation, DeleteOperation, DeletePayloadOperation, DeleteVectorsOperation, OverwritePayloadOperation, SetPayloadOperation, UpdateVectorsOperation, UpsertOperation]
    else:
        actual_instance: Any
    any_of_schemas: List[str] = Field(UPDATEOPERATION_ANY_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @validator('actual_instance')
    def actual_instance_must_validate_anyof(cls, v):
        instance = UpdateOperation.construct()
        error_messages = []
        # validate data type: UpsertOperation
        if not isinstance(v, UpsertOperation):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UpsertOperation`")
        else:
            return v

        # validate data type: DeleteOperation
        if not isinstance(v, DeleteOperation):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DeleteOperation`")
        else:
            return v

        # validate data type: SetPayloadOperation
        if not isinstance(v, SetPayloadOperation):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SetPayloadOperation`")
        else:
            return v

        # validate data type: OverwritePayloadOperation
        if not isinstance(v, OverwritePayloadOperation):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OverwritePayloadOperation`")
        else:
            return v

        # validate data type: DeletePayloadOperation
        if not isinstance(v, DeletePayloadOperation):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DeletePayloadOperation`")
        else:
            return v

        # validate data type: ClearPayloadOperation
        if not isinstance(v, ClearPayloadOperation):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ClearPayloadOperation`")
        else:
            return v

        # validate data type: UpdateVectorsOperation
        if not isinstance(v, UpdateVectorsOperation):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UpdateVectorsOperation`")
        else:
            return v

        # validate data type: DeleteVectorsOperation
        if not isinstance(v, DeleteVectorsOperation):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DeleteVectorsOperation`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError("No match found when setting the actual_instance in UpdateOperation with anyOf schemas: ClearPayloadOperation, DeleteOperation, DeletePayloadOperation, DeleteVectorsOperation, OverwritePayloadOperation, SetPayloadOperation, UpdateVectorsOperation, UpsertOperation. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateOperation:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> UpdateOperation:
        """Returns the object represented by the json string"""
        instance = UpdateOperation.construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[UpsertOperation] = None
        try:
            instance.actual_instance = UpsertOperation.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[DeleteOperation] = None
        try:
            instance.actual_instance = DeleteOperation.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[SetPayloadOperation] = None
        try:
            instance.actual_instance = SetPayloadOperation.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_4_validator: Optional[OverwritePayloadOperation] = None
        try:
            instance.actual_instance = OverwritePayloadOperation.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_5_validator: Optional[DeletePayloadOperation] = None
        try:
            instance.actual_instance = DeletePayloadOperation.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_6_validator: Optional[ClearPayloadOperation] = None
        try:
            instance.actual_instance = ClearPayloadOperation.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_7_validator: Optional[UpdateVectorsOperation] = None
        try:
            instance.actual_instance = UpdateVectorsOperation.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_8_validator: Optional[DeleteVectorsOperation] = None
        try:
            instance.actual_instance = DeleteVectorsOperation.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into UpdateOperation with anyOf schemas: ClearPayloadOperation, DeleteOperation, DeletePayloadOperation, DeleteVectorsOperation, OverwritePayloadOperation, SetPayloadOperation, UpdateVectorsOperation, UpsertOperation. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_dict()
        else:
            return json.dumps(self.actual_instance)

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())


