#!/usr/bin/env python3
import importlib
import os
from typing import Tuple

import torch
from torch import nn
from torch.utils.data import DataLoader

import lbd
from lbd.config.defense.config import cfg


def init_data(**kwargs) -> Tuple[DataLoader, DataLoader, DataLoader]:
    ds = lbd.data.get_datasets(
        "CIFAR10",
        "data",
        "gridTrigger",
        "all2one",
        cl_train=True,
        cl_ratio=kwargs.get("cl_ratio", 0.01),
        cl_test=True,
        po_train=False,
        po_test=True,
        po_test_tar=0,
    )
    cl_train = DataLoader(ds["cl_train"], batch_size=128, shuffle=True)
    cl_test = DataLoader(ds["cl_test"], batch_size=128, shuffle=False)
    po_test = DataLoader(ds["po_test"], batch_size=128, shuffle=False)
    return (cl_train, cl_test, po_test)


def init_model(device: torch.device = torch.device("cuda"), **kwargs) -> nn.Module:
    module_name = kwargs.get("module_name", "base")
    net = getattr(
        importlib.import_module(f"lbd.model.{module_name}.cifar.resnet"), "resnet18"
    )(num_classes=10).to(device)
    return net


lbd.util.fix_random(1)
device = torch.device("cuda")


is_find = False
for _ in cfg.keys():
    if os.environ.get(f"TEST_{_.upper()}", None):
        is_find = True
        logdir = str(cfg[_]["defense_module_kwargs"]["outputdir"]) + "/log"  # type: ignore
        logger = lbd.util.set_logger(logdir, _.upper(), "INFO")

        (cl_train, cl_test, po_test) = init_data(cl_ratio=cfg[_]["cl_ratio"])
        net = init_model(module_name=cfg[_]["net_module_name"])
        lbd.load_ckpt(net, f"weight/{cfg[_]['poisoned']}", False)

        acc, asr = lbd.data.accasrtest(net, cl_test, po_test, device)
        logger.info(f"[ {'PO':^5} {' ':^3} ] -- CL: {acc:.4f} -- PO: {asr:.4f}")

        getattr(lbd.defense, cfg[_]["defense_module_name"])(  # type: ignore
            device, logger=logger, **cfg[_]["defense_module_kwargs"]
        ).defense(
            net,
            ds=cl_train,
            cl_test=cl_test,
            po_test=po_test,
            **cfg[_]["defense_func_kwargs"],
        )

        acc, asr = lbd.data.accasrtest(net, cl_test, po_test, device)
        logger.info(f"[ {'FI':^5} {' ':^3} ] -- CL: {acc:.4f} -- PO: {asr:.4f}")

if not is_find:
    print(
        """
Usage
-----
e.g. ``(export TEST_RNP=true; defense)``
    """
    )
