# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetAclUserResult',
    'AwaitableGetAclUserResult',
    'get_acl_user',
    'get_acl_user_output',
]

@pulumi.output_type
class GetAclUserResult:
    """
    A collection of values returned by getAclUser.
    """
    def __init__(__self__, id=None, name=None, role=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if role and not isinstance(role, str):
            raise TypeError("Expected argument 'role' to be a str")
        pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The User's name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        The name of the User's Role.
        """
        return pulumi.get(self, "role")


class AwaitableGetAclUserResult(GetAclUserResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAclUserResult(
            id=self.id,
            name=self.name,
            role=self.role)


def get_acl_user(name: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAclUserResult:
    """
    The User data source allows access to an existing Rule within your Redis Enterprise Cloud Account.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_rediscloud as rediscloud

    example = rediscloud.get_acl_user(name="fast-admin-john")
    pulumi.export("rediscloudAclUser", example.id)
    ```


    :param str name: The name of the User to filter returned subscriptions
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('rediscloud:index/getAclUser:getAclUser', __args__, opts=opts, typ=GetAclUserResult).value

    return AwaitableGetAclUserResult(
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        role=pulumi.get(__ret__, 'role'))


@_utilities.lift_output_func(get_acl_user)
def get_acl_user_output(name: Optional[pulumi.Input[str]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAclUserResult]:
    """
    The User data source allows access to an existing Rule within your Redis Enterprise Cloud Account.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_rediscloud as rediscloud

    example = rediscloud.get_acl_user(name="fast-admin-john")
    pulumi.export("rediscloudAclUser", example.id)
    ```


    :param str name: The name of the User to filter returned subscriptions
    """
    ...
