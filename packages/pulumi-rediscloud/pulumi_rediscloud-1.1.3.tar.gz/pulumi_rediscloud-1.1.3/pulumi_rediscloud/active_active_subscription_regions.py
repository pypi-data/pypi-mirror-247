# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ActiveActiveSubscriptionRegionsArgs', 'ActiveActiveSubscriptionRegions']

@pulumi.input_type
class ActiveActiveSubscriptionRegionsArgs:
    def __init__(__self__, *,
                 regions: pulumi.Input[Sequence[pulumi.Input['ActiveActiveSubscriptionRegionsRegionArgs']]],
                 subscription_id: pulumi.Input[str],
                 delete_regions: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a ActiveActiveSubscriptionRegions resource.
        :param pulumi.Input[Sequence[pulumi.Input['ActiveActiveSubscriptionRegionsRegionArgs']]] regions: Cloud networking details, per region, documented below
        :param pulumi.Input[str] subscription_id: ID of the subscription that the regions belong to. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[bool] delete_regions: Flag required to be set when one or more regions is to be deleted, if the flag is not set an error will be thrown
        """
        pulumi.set(__self__, "regions", regions)
        pulumi.set(__self__, "subscription_id", subscription_id)
        if delete_regions is not None:
            pulumi.set(__self__, "delete_regions", delete_regions)

    @property
    @pulumi.getter
    def regions(self) -> pulumi.Input[Sequence[pulumi.Input['ActiveActiveSubscriptionRegionsRegionArgs']]]:
        """
        Cloud networking details, per region, documented below
        """
        return pulumi.get(self, "regions")

    @regions.setter
    def regions(self, value: pulumi.Input[Sequence[pulumi.Input['ActiveActiveSubscriptionRegionsRegionArgs']]]):
        pulumi.set(self, "regions", value)

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> pulumi.Input[str]:
        """
        ID of the subscription that the regions belong to. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subscription_id", value)

    @property
    @pulumi.getter(name="deleteRegions")
    def delete_regions(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag required to be set when one or more regions is to be deleted, if the flag is not set an error will be thrown
        """
        return pulumi.get(self, "delete_regions")

    @delete_regions.setter
    def delete_regions(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_regions", value)


@pulumi.input_type
class _ActiveActiveSubscriptionRegionsState:
    def __init__(__self__, *,
                 delete_regions: Optional[pulumi.Input[bool]] = None,
                 regions: Optional[pulumi.Input[Sequence[pulumi.Input['ActiveActiveSubscriptionRegionsRegionArgs']]]] = None,
                 subscription_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ActiveActiveSubscriptionRegions resources.
        :param pulumi.Input[bool] delete_regions: Flag required to be set when one or more regions is to be deleted, if the flag is not set an error will be thrown
        :param pulumi.Input[Sequence[pulumi.Input['ActiveActiveSubscriptionRegionsRegionArgs']]] regions: Cloud networking details, per region, documented below
        :param pulumi.Input[str] subscription_id: ID of the subscription that the regions belong to. **Modifying this attribute will force creation of a new resource.**
        """
        if delete_regions is not None:
            pulumi.set(__self__, "delete_regions", delete_regions)
        if regions is not None:
            pulumi.set(__self__, "regions", regions)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)

    @property
    @pulumi.getter(name="deleteRegions")
    def delete_regions(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag required to be set when one or more regions is to be deleted, if the flag is not set an error will be thrown
        """
        return pulumi.get(self, "delete_regions")

    @delete_regions.setter
    def delete_regions(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_regions", value)

    @property
    @pulumi.getter
    def regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ActiveActiveSubscriptionRegionsRegionArgs']]]]:
        """
        Cloud networking details, per region, documented below
        """
        return pulumi.get(self, "regions")

    @regions.setter
    def regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ActiveActiveSubscriptionRegionsRegionArgs']]]]):
        pulumi.set(self, "regions", value)

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the subscription that the regions belong to. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscription_id", value)


class ActiveActiveSubscriptionRegions(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 delete_regions: Optional[pulumi.Input[bool]] = None,
                 regions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActiveActiveSubscriptionRegionsRegionArgs']]]]] = None,
                 subscription_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages regions within your Redis Enterprise Cloud Active-Active subscription.
        This resource is responsible for creating and managing regions within that subscription.
        This allows Redis Enterprise Cloud to efficiently provision your cluster within each defined region in a separate block.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_rediscloud as rediscloud

        regions_resource = rediscloud.ActiveActiveSubscriptionRegions("regions-resource",
            subscription_id=rediscloud_active_active_subscription["subscription-resource"]["id"],
            delete_regions=False,
            regions=[
                rediscloud.ActiveActiveSubscriptionRegionsRegionArgs(
                    region="us-east-1",
                    networking_deployment_cidr="192.168.0.0/24",
                    databases=[rediscloud.ActiveActiveSubscriptionRegionsRegionDatabaseArgs(
                        database_id=rediscloud_active_active_subscription_database["database-resource"]["db_id"],
                        database_name=rediscloud_active_active_subscription_database["database-resource"]["name"],
                        local_write_operations_per_second=1000,
                        local_read_operations_per_second=1000,
                    )],
                ),
                rediscloud.ActiveActiveSubscriptionRegionsRegionArgs(
                    region="us-east-2",
                    networking_deployment_cidr="10.0.1.0/24",
                    databases=[rediscloud.ActiveActiveSubscriptionRegionsRegionDatabaseArgs(
                        database_id=rediscloud_active_active_subscription_database["database-resource"]["db_id"],
                        database_name=rediscloud_active_active_subscription_database["database-resource"]["name"],
                        local_write_operations_per_second=2000,
                        local_read_operations_per_second=4000,
                    )],
                ),
            ])
        ```

        ## Import

        `rediscloud_active_active_regions` can be imported using the ID of the subscription, e.g.

        ```sh
         $ pulumi import rediscloud:index/activeActiveSubscriptionRegions:ActiveActiveSubscriptionRegions regions-resource 12345678
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] delete_regions: Flag required to be set when one or more regions is to be deleted, if the flag is not set an error will be thrown
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActiveActiveSubscriptionRegionsRegionArgs']]]] regions: Cloud networking details, per region, documented below
        :param pulumi.Input[str] subscription_id: ID of the subscription that the regions belong to. **Modifying this attribute will force creation of a new resource.**
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ActiveActiveSubscriptionRegionsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages regions within your Redis Enterprise Cloud Active-Active subscription.
        This resource is responsible for creating and managing regions within that subscription.
        This allows Redis Enterprise Cloud to efficiently provision your cluster within each defined region in a separate block.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_rediscloud as rediscloud

        regions_resource = rediscloud.ActiveActiveSubscriptionRegions("regions-resource",
            subscription_id=rediscloud_active_active_subscription["subscription-resource"]["id"],
            delete_regions=False,
            regions=[
                rediscloud.ActiveActiveSubscriptionRegionsRegionArgs(
                    region="us-east-1",
                    networking_deployment_cidr="192.168.0.0/24",
                    databases=[rediscloud.ActiveActiveSubscriptionRegionsRegionDatabaseArgs(
                        database_id=rediscloud_active_active_subscription_database["database-resource"]["db_id"],
                        database_name=rediscloud_active_active_subscription_database["database-resource"]["name"],
                        local_write_operations_per_second=1000,
                        local_read_operations_per_second=1000,
                    )],
                ),
                rediscloud.ActiveActiveSubscriptionRegionsRegionArgs(
                    region="us-east-2",
                    networking_deployment_cidr="10.0.1.0/24",
                    databases=[rediscloud.ActiveActiveSubscriptionRegionsRegionDatabaseArgs(
                        database_id=rediscloud_active_active_subscription_database["database-resource"]["db_id"],
                        database_name=rediscloud_active_active_subscription_database["database-resource"]["name"],
                        local_write_operations_per_second=2000,
                        local_read_operations_per_second=4000,
                    )],
                ),
            ])
        ```

        ## Import

        `rediscloud_active_active_regions` can be imported using the ID of the subscription, e.g.

        ```sh
         $ pulumi import rediscloud:index/activeActiveSubscriptionRegions:ActiveActiveSubscriptionRegions regions-resource 12345678
        ```

        :param str resource_name: The name of the resource.
        :param ActiveActiveSubscriptionRegionsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ActiveActiveSubscriptionRegionsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 delete_regions: Optional[pulumi.Input[bool]] = None,
                 regions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActiveActiveSubscriptionRegionsRegionArgs']]]]] = None,
                 subscription_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ActiveActiveSubscriptionRegionsArgs.__new__(ActiveActiveSubscriptionRegionsArgs)

            __props__.__dict__["delete_regions"] = delete_regions
            if regions is None and not opts.urn:
                raise TypeError("Missing required property 'regions'")
            __props__.__dict__["regions"] = regions
            if subscription_id is None and not opts.urn:
                raise TypeError("Missing required property 'subscription_id'")
            __props__.__dict__["subscription_id"] = subscription_id
        super(ActiveActiveSubscriptionRegions, __self__).__init__(
            'rediscloud:index/activeActiveSubscriptionRegions:ActiveActiveSubscriptionRegions',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            delete_regions: Optional[pulumi.Input[bool]] = None,
            regions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActiveActiveSubscriptionRegionsRegionArgs']]]]] = None,
            subscription_id: Optional[pulumi.Input[str]] = None) -> 'ActiveActiveSubscriptionRegions':
        """
        Get an existing ActiveActiveSubscriptionRegions resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] delete_regions: Flag required to be set when one or more regions is to be deleted, if the flag is not set an error will be thrown
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActiveActiveSubscriptionRegionsRegionArgs']]]] regions: Cloud networking details, per region, documented below
        :param pulumi.Input[str] subscription_id: ID of the subscription that the regions belong to. **Modifying this attribute will force creation of a new resource.**
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ActiveActiveSubscriptionRegionsState.__new__(_ActiveActiveSubscriptionRegionsState)

        __props__.__dict__["delete_regions"] = delete_regions
        __props__.__dict__["regions"] = regions
        __props__.__dict__["subscription_id"] = subscription_id
        return ActiveActiveSubscriptionRegions(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="deleteRegions")
    def delete_regions(self) -> pulumi.Output[Optional[bool]]:
        """
        Flag required to be set when one or more regions is to be deleted, if the flag is not set an error will be thrown
        """
        return pulumi.get(self, "delete_regions")

    @property
    @pulumi.getter
    def regions(self) -> pulumi.Output[Sequence['outputs.ActiveActiveSubscriptionRegionsRegion']]:
        """
        Cloud networking details, per region, documented below
        """
        return pulumi.get(self, "regions")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> pulumi.Output[str]:
        """
        ID of the subscription that the regions belong to. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "subscription_id")

