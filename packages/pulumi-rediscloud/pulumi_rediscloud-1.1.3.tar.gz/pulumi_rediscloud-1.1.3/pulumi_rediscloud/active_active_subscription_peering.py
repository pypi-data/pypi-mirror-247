# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ActiveActiveSubscriptionPeeringArgs', 'ActiveActiveSubscriptionPeering']

@pulumi.input_type
class ActiveActiveSubscriptionPeeringArgs:
    def __init__(__self__, *,
                 subscription_id: pulumi.Input[str],
                 aws_account_id: Optional[pulumi.Input[str]] = None,
                 destination_region: Optional[pulumi.Input[str]] = None,
                 gcp_network_name: Optional[pulumi.Input[str]] = None,
                 gcp_project_id: Optional[pulumi.Input[str]] = None,
                 provider_name: Optional[pulumi.Input[str]] = None,
                 source_region: Optional[pulumi.Input[str]] = None,
                 vpc_cidr: Optional[pulumi.Input[str]] = None,
                 vpc_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ActiveActiveSubscriptionPeering resource.
        :param pulumi.Input[str] subscription_id: A valid Active-Active subscription predefined in the current account. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[str] aws_account_id: AWS account ID that the VPC to be peered lives in. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[str] destination_region: Name of the region to create the VPC peering to. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[str] gcp_network_name: The name of the network to be peered. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[str] gcp_project_id: GCP project ID that the VPC to be peered lives in. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[str] provider_name: The cloud provider to use with the vpc peering, (either `AWS` or `GCP`). Default: ‘AWS’. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[str] source_region: Name of the region to create the VPC peering from. **Modifying this attribute will force creation of a new resource.**
               
               
               **AWS ONLY:**
        :param pulumi.Input[str] vpc_cidr: CIDR range of the VPC to be peered. Either this or `vpc_cidrs` must be specified. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vpc_cidrs: CIDR ranges of the VPC to be peered. Either this or `vpc_cidr` must be specified. **Modifying this attribute will force creation of a new resource.**
               
               **GCP ONLY:**
        :param pulumi.Input[str] vpc_id: Identifier of the VPC to be peered. **Modifying this attribute will force creation of a new resource.**
        """
        pulumi.set(__self__, "subscription_id", subscription_id)
        if aws_account_id is not None:
            pulumi.set(__self__, "aws_account_id", aws_account_id)
        if destination_region is not None:
            pulumi.set(__self__, "destination_region", destination_region)
        if gcp_network_name is not None:
            pulumi.set(__self__, "gcp_network_name", gcp_network_name)
        if gcp_project_id is not None:
            pulumi.set(__self__, "gcp_project_id", gcp_project_id)
        if provider_name is not None:
            pulumi.set(__self__, "provider_name", provider_name)
        if source_region is not None:
            pulumi.set(__self__, "source_region", source_region)
        if vpc_cidr is not None:
            pulumi.set(__self__, "vpc_cidr", vpc_cidr)
        if vpc_cidrs is not None:
            pulumi.set(__self__, "vpc_cidrs", vpc_cidrs)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> pulumi.Input[str]:
        """
        A valid Active-Active subscription predefined in the current account. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subscription_id", value)

    @property
    @pulumi.getter(name="awsAccountId")
    def aws_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        AWS account ID that the VPC to be peered lives in. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "aws_account_id")

    @aws_account_id.setter
    def aws_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_account_id", value)

    @property
    @pulumi.getter(name="destinationRegion")
    def destination_region(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the region to create the VPC peering to. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "destination_region")

    @destination_region.setter
    def destination_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_region", value)

    @property
    @pulumi.getter(name="gcpNetworkName")
    def gcp_network_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the network to be peered. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "gcp_network_name")

    @gcp_network_name.setter
    def gcp_network_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gcp_network_name", value)

    @property
    @pulumi.getter(name="gcpProjectId")
    def gcp_project_id(self) -> Optional[pulumi.Input[str]]:
        """
        GCP project ID that the VPC to be peered lives in. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "gcp_project_id")

    @gcp_project_id.setter
    def gcp_project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gcp_project_id", value)

    @property
    @pulumi.getter(name="providerName")
    def provider_name(self) -> Optional[pulumi.Input[str]]:
        """
        The cloud provider to use with the vpc peering, (either `AWS` or `GCP`). Default: ‘AWS’. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "provider_name")

    @provider_name.setter
    def provider_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider_name", value)

    @property
    @pulumi.getter(name="sourceRegion")
    def source_region(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the region to create the VPC peering from. **Modifying this attribute will force creation of a new resource.**


        **AWS ONLY:**
        """
        return pulumi.get(self, "source_region")

    @source_region.setter
    def source_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_region", value)

    @property
    @pulumi.getter(name="vpcCidr")
    def vpc_cidr(self) -> Optional[pulumi.Input[str]]:
        """
        CIDR range of the VPC to be peered. Either this or `vpc_cidrs` must be specified. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "vpc_cidr")

    @vpc_cidr.setter
    def vpc_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_cidr", value)

    @property
    @pulumi.getter(name="vpcCidrs")
    def vpc_cidrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        CIDR ranges of the VPC to be peered. Either this or `vpc_cidr` must be specified. **Modifying this attribute will force creation of a new resource.**

        **GCP ONLY:**
        """
        return pulumi.get(self, "vpc_cidrs")

    @vpc_cidrs.setter
    def vpc_cidrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "vpc_cidrs", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier of the VPC to be peered. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.input_type
class _ActiveActiveSubscriptionPeeringState:
    def __init__(__self__, *,
                 aws_account_id: Optional[pulumi.Input[str]] = None,
                 aws_peering_id: Optional[pulumi.Input[str]] = None,
                 destination_region: Optional[pulumi.Input[str]] = None,
                 gcp_network_name: Optional[pulumi.Input[str]] = None,
                 gcp_peering_id: Optional[pulumi.Input[str]] = None,
                 gcp_project_id: Optional[pulumi.Input[str]] = None,
                 gcp_redis_network_name: Optional[pulumi.Input[str]] = None,
                 gcp_redis_project_id: Optional[pulumi.Input[str]] = None,
                 provider_name: Optional[pulumi.Input[str]] = None,
                 source_region: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 subscription_id: Optional[pulumi.Input[str]] = None,
                 vpc_cidr: Optional[pulumi.Input[str]] = None,
                 vpc_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ActiveActiveSubscriptionPeering resources.
        :param pulumi.Input[str] aws_account_id: AWS account ID that the VPC to be peered lives in. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[str] aws_peering_id: Identifier of the AWS cloud peering
        :param pulumi.Input[str] destination_region: Name of the region to create the VPC peering to. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[str] gcp_network_name: The name of the network to be peered. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[str] gcp_peering_id: Identifier of the cloud peering
        :param pulumi.Input[str] gcp_project_id: GCP project ID that the VPC to be peered lives in. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[str] gcp_redis_network_name: The name of the Redis Enterprise Cloud network to be peered
        :param pulumi.Input[str] gcp_redis_project_id: Identifier of the Redis Enterprise Cloud GCP project to be peered
        :param pulumi.Input[str] provider_name: The cloud provider to use with the vpc peering, (either `AWS` or `GCP`). Default: ‘AWS’. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[str] source_region: Name of the region to create the VPC peering from. **Modifying this attribute will force creation of a new resource.**
               
               
               **AWS ONLY:**
        :param pulumi.Input[str] status: is set to the current status of the peering - `initiating-request`, `pending-acceptance`, `active`, `inactive` or `failed`.
        :param pulumi.Input[str] subscription_id: A valid Active-Active subscription predefined in the current account. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[str] vpc_cidr: CIDR range of the VPC to be peered. Either this or `vpc_cidrs` must be specified. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vpc_cidrs: CIDR ranges of the VPC to be peered. Either this or `vpc_cidr` must be specified. **Modifying this attribute will force creation of a new resource.**
               
               **GCP ONLY:**
        :param pulumi.Input[str] vpc_id: Identifier of the VPC to be peered. **Modifying this attribute will force creation of a new resource.**
        """
        if aws_account_id is not None:
            pulumi.set(__self__, "aws_account_id", aws_account_id)
        if aws_peering_id is not None:
            pulumi.set(__self__, "aws_peering_id", aws_peering_id)
        if destination_region is not None:
            pulumi.set(__self__, "destination_region", destination_region)
        if gcp_network_name is not None:
            pulumi.set(__self__, "gcp_network_name", gcp_network_name)
        if gcp_peering_id is not None:
            pulumi.set(__self__, "gcp_peering_id", gcp_peering_id)
        if gcp_project_id is not None:
            pulumi.set(__self__, "gcp_project_id", gcp_project_id)
        if gcp_redis_network_name is not None:
            pulumi.set(__self__, "gcp_redis_network_name", gcp_redis_network_name)
        if gcp_redis_project_id is not None:
            pulumi.set(__self__, "gcp_redis_project_id", gcp_redis_project_id)
        if provider_name is not None:
            pulumi.set(__self__, "provider_name", provider_name)
        if source_region is not None:
            pulumi.set(__self__, "source_region", source_region)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)
        if vpc_cidr is not None:
            pulumi.set(__self__, "vpc_cidr", vpc_cidr)
        if vpc_cidrs is not None:
            pulumi.set(__self__, "vpc_cidrs", vpc_cidrs)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="awsAccountId")
    def aws_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        AWS account ID that the VPC to be peered lives in. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "aws_account_id")

    @aws_account_id.setter
    def aws_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_account_id", value)

    @property
    @pulumi.getter(name="awsPeeringId")
    def aws_peering_id(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier of the AWS cloud peering
        """
        return pulumi.get(self, "aws_peering_id")

    @aws_peering_id.setter
    def aws_peering_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_peering_id", value)

    @property
    @pulumi.getter(name="destinationRegion")
    def destination_region(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the region to create the VPC peering to. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "destination_region")

    @destination_region.setter
    def destination_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_region", value)

    @property
    @pulumi.getter(name="gcpNetworkName")
    def gcp_network_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the network to be peered. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "gcp_network_name")

    @gcp_network_name.setter
    def gcp_network_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gcp_network_name", value)

    @property
    @pulumi.getter(name="gcpPeeringId")
    def gcp_peering_id(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier of the cloud peering
        """
        return pulumi.get(self, "gcp_peering_id")

    @gcp_peering_id.setter
    def gcp_peering_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gcp_peering_id", value)

    @property
    @pulumi.getter(name="gcpProjectId")
    def gcp_project_id(self) -> Optional[pulumi.Input[str]]:
        """
        GCP project ID that the VPC to be peered lives in. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "gcp_project_id")

    @gcp_project_id.setter
    def gcp_project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gcp_project_id", value)

    @property
    @pulumi.getter(name="gcpRedisNetworkName")
    def gcp_redis_network_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Redis Enterprise Cloud network to be peered
        """
        return pulumi.get(self, "gcp_redis_network_name")

    @gcp_redis_network_name.setter
    def gcp_redis_network_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gcp_redis_network_name", value)

    @property
    @pulumi.getter(name="gcpRedisProjectId")
    def gcp_redis_project_id(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier of the Redis Enterprise Cloud GCP project to be peered
        """
        return pulumi.get(self, "gcp_redis_project_id")

    @gcp_redis_project_id.setter
    def gcp_redis_project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gcp_redis_project_id", value)

    @property
    @pulumi.getter(name="providerName")
    def provider_name(self) -> Optional[pulumi.Input[str]]:
        """
        The cloud provider to use with the vpc peering, (either `AWS` or `GCP`). Default: ‘AWS’. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "provider_name")

    @provider_name.setter
    def provider_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider_name", value)

    @property
    @pulumi.getter(name="sourceRegion")
    def source_region(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the region to create the VPC peering from. **Modifying this attribute will force creation of a new resource.**


        **AWS ONLY:**
        """
        return pulumi.get(self, "source_region")

    @source_region.setter
    def source_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_region", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        is set to the current status of the peering - `initiating-request`, `pending-acceptance`, `active`, `inactive` or `failed`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[pulumi.Input[str]]:
        """
        A valid Active-Active subscription predefined in the current account. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscription_id", value)

    @property
    @pulumi.getter(name="vpcCidr")
    def vpc_cidr(self) -> Optional[pulumi.Input[str]]:
        """
        CIDR range of the VPC to be peered. Either this or `vpc_cidrs` must be specified. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "vpc_cidr")

    @vpc_cidr.setter
    def vpc_cidr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_cidr", value)

    @property
    @pulumi.getter(name="vpcCidrs")
    def vpc_cidrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        CIDR ranges of the VPC to be peered. Either this or `vpc_cidr` must be specified. **Modifying this attribute will force creation of a new resource.**

        **GCP ONLY:**
        """
        return pulumi.get(self, "vpc_cidrs")

    @vpc_cidrs.setter
    def vpc_cidrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "vpc_cidrs", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier of the VPC to be peered. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


class ActiveActiveSubscriptionPeering(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aws_account_id: Optional[pulumi.Input[str]] = None,
                 destination_region: Optional[pulumi.Input[str]] = None,
                 gcp_network_name: Optional[pulumi.Input[str]] = None,
                 gcp_project_id: Optional[pulumi.Input[str]] = None,
                 provider_name: Optional[pulumi.Input[str]] = None,
                 source_region: Optional[pulumi.Input[str]] = None,
                 subscription_id: Optional[pulumi.Input[str]] = None,
                 vpc_cidr: Optional[pulumi.Input[str]] = None,
                 vpc_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Creates an AWS or GCP VPC peering for an existing Redis Enterprise Cloud Active-Active Subscription, allowing access to your subscription databases as if they were on the same network.

        For AWS, peering should be accepted by the other side.
        For GCP, the opposite peering request should be submitted.

        ## Example Usage
        ### AWS

        The following example shows how an Active-Active subscription can be peered with an AWS VPC using the rediscloud and AWS providers.

        ```python
        import pulumi
        import pulumi_aws as aws
        import pulumi_rediscloud as rediscloud

        subscription_resource = rediscloud.ActiveActiveSubscription("subscription-resource")
        # ...
        peering_resource = rediscloud.ActiveActiveSubscriptionPeering("peering-resource",
            subscription_id=subscription_resource.id,
            source_region="us-east-1",
            destination_region="eu-west-2",
            aws_account_id="123456789012",
            vpc_id="vpc-01234567890",
            vpc_cidr="10.0.10.0/24")
        aws_peering_resource = aws.ec2.VpcPeeringConnectionAccepter("aws-peering-resource",
            vpc_peering_connection_id=peering_resource.aws_peering_id,
            auto_accept=True)
        ```
        ### GCP

        The following example shows how an Active-Active subscription can be peered with a GCP project network using the rediscloud and google providers.
        The example HCL locates the network details and creates/accepts the vpc peering connection through the Google provider.

        ```python
        import pulumi
        import pulumi_gcp as gcp
        import pulumi_rediscloud as rediscloud

        subscription_resource = rediscloud.ActiveActiveSubscription("subscription-resource")
        # ...
        network = gcp.compute.get_network(project="my-gcp-project",
            name="my-gcp-vpc")
        peering_resource = rediscloud.ActiveActiveSubscriptionPeering("peering-resource",
            subscription_id=subscription_resource.id,
            source_region="us-central1",
            provider_name="GCP",
            gcp_project_id=network.project,
            gcp_network_name=network.name)
        gcp_peering_resource = gcp.compute.NetworkPeering("gcp-peering-resource",
            network=network.self_link,
            peer_network=peering_resource.gcp_redis_project_id.apply(lambda gcp_redis_project_id: f"https://www.googleapis.com/compute/v1/projects/{gcp_redis_project_id}/global/networks/{rediscloud_active_active_subscription_peering['example']['gcp_redis_network_name']}"))
        ```

        ## Import

        `rediscloud_active_active_subscription_peering` can be imported using the ID of the Active-Active subscription and the ID of the peering connection, e.g.

        ```sh
         $ pulumi import rediscloud:index/activeActiveSubscriptionPeering:ActiveActiveSubscriptionPeering peering-resource 12345678/1234
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] aws_account_id: AWS account ID that the VPC to be peered lives in. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[str] destination_region: Name of the region to create the VPC peering to. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[str] gcp_network_name: The name of the network to be peered. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[str] gcp_project_id: GCP project ID that the VPC to be peered lives in. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[str] provider_name: The cloud provider to use with the vpc peering, (either `AWS` or `GCP`). Default: ‘AWS’. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[str] source_region: Name of the region to create the VPC peering from. **Modifying this attribute will force creation of a new resource.**
               
               
               **AWS ONLY:**
        :param pulumi.Input[str] subscription_id: A valid Active-Active subscription predefined in the current account. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[str] vpc_cidr: CIDR range of the VPC to be peered. Either this or `vpc_cidrs` must be specified. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vpc_cidrs: CIDR ranges of the VPC to be peered. Either this or `vpc_cidr` must be specified. **Modifying this attribute will force creation of a new resource.**
               
               **GCP ONLY:**
        :param pulumi.Input[str] vpc_id: Identifier of the VPC to be peered. **Modifying this attribute will force creation of a new resource.**
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ActiveActiveSubscriptionPeeringArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates an AWS or GCP VPC peering for an existing Redis Enterprise Cloud Active-Active Subscription, allowing access to your subscription databases as if they were on the same network.

        For AWS, peering should be accepted by the other side.
        For GCP, the opposite peering request should be submitted.

        ## Example Usage
        ### AWS

        The following example shows how an Active-Active subscription can be peered with an AWS VPC using the rediscloud and AWS providers.

        ```python
        import pulumi
        import pulumi_aws as aws
        import pulumi_rediscloud as rediscloud

        subscription_resource = rediscloud.ActiveActiveSubscription("subscription-resource")
        # ...
        peering_resource = rediscloud.ActiveActiveSubscriptionPeering("peering-resource",
            subscription_id=subscription_resource.id,
            source_region="us-east-1",
            destination_region="eu-west-2",
            aws_account_id="123456789012",
            vpc_id="vpc-01234567890",
            vpc_cidr="10.0.10.0/24")
        aws_peering_resource = aws.ec2.VpcPeeringConnectionAccepter("aws-peering-resource",
            vpc_peering_connection_id=peering_resource.aws_peering_id,
            auto_accept=True)
        ```
        ### GCP

        The following example shows how an Active-Active subscription can be peered with a GCP project network using the rediscloud and google providers.
        The example HCL locates the network details and creates/accepts the vpc peering connection through the Google provider.

        ```python
        import pulumi
        import pulumi_gcp as gcp
        import pulumi_rediscloud as rediscloud

        subscription_resource = rediscloud.ActiveActiveSubscription("subscription-resource")
        # ...
        network = gcp.compute.get_network(project="my-gcp-project",
            name="my-gcp-vpc")
        peering_resource = rediscloud.ActiveActiveSubscriptionPeering("peering-resource",
            subscription_id=subscription_resource.id,
            source_region="us-central1",
            provider_name="GCP",
            gcp_project_id=network.project,
            gcp_network_name=network.name)
        gcp_peering_resource = gcp.compute.NetworkPeering("gcp-peering-resource",
            network=network.self_link,
            peer_network=peering_resource.gcp_redis_project_id.apply(lambda gcp_redis_project_id: f"https://www.googleapis.com/compute/v1/projects/{gcp_redis_project_id}/global/networks/{rediscloud_active_active_subscription_peering['example']['gcp_redis_network_name']}"))
        ```

        ## Import

        `rediscloud_active_active_subscription_peering` can be imported using the ID of the Active-Active subscription and the ID of the peering connection, e.g.

        ```sh
         $ pulumi import rediscloud:index/activeActiveSubscriptionPeering:ActiveActiveSubscriptionPeering peering-resource 12345678/1234
        ```

        :param str resource_name: The name of the resource.
        :param ActiveActiveSubscriptionPeeringArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ActiveActiveSubscriptionPeeringArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aws_account_id: Optional[pulumi.Input[str]] = None,
                 destination_region: Optional[pulumi.Input[str]] = None,
                 gcp_network_name: Optional[pulumi.Input[str]] = None,
                 gcp_project_id: Optional[pulumi.Input[str]] = None,
                 provider_name: Optional[pulumi.Input[str]] = None,
                 source_region: Optional[pulumi.Input[str]] = None,
                 subscription_id: Optional[pulumi.Input[str]] = None,
                 vpc_cidr: Optional[pulumi.Input[str]] = None,
                 vpc_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ActiveActiveSubscriptionPeeringArgs.__new__(ActiveActiveSubscriptionPeeringArgs)

            __props__.__dict__["aws_account_id"] = aws_account_id
            __props__.__dict__["destination_region"] = destination_region
            __props__.__dict__["gcp_network_name"] = gcp_network_name
            __props__.__dict__["gcp_project_id"] = gcp_project_id
            __props__.__dict__["provider_name"] = provider_name
            __props__.__dict__["source_region"] = source_region
            if subscription_id is None and not opts.urn:
                raise TypeError("Missing required property 'subscription_id'")
            __props__.__dict__["subscription_id"] = subscription_id
            __props__.__dict__["vpc_cidr"] = vpc_cidr
            __props__.__dict__["vpc_cidrs"] = vpc_cidrs
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["aws_peering_id"] = None
            __props__.__dict__["gcp_peering_id"] = None
            __props__.__dict__["gcp_redis_network_name"] = None
            __props__.__dict__["gcp_redis_project_id"] = None
            __props__.__dict__["status"] = None
        super(ActiveActiveSubscriptionPeering, __self__).__init__(
            'rediscloud:index/activeActiveSubscriptionPeering:ActiveActiveSubscriptionPeering',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            aws_account_id: Optional[pulumi.Input[str]] = None,
            aws_peering_id: Optional[pulumi.Input[str]] = None,
            destination_region: Optional[pulumi.Input[str]] = None,
            gcp_network_name: Optional[pulumi.Input[str]] = None,
            gcp_peering_id: Optional[pulumi.Input[str]] = None,
            gcp_project_id: Optional[pulumi.Input[str]] = None,
            gcp_redis_network_name: Optional[pulumi.Input[str]] = None,
            gcp_redis_project_id: Optional[pulumi.Input[str]] = None,
            provider_name: Optional[pulumi.Input[str]] = None,
            source_region: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            subscription_id: Optional[pulumi.Input[str]] = None,
            vpc_cidr: Optional[pulumi.Input[str]] = None,
            vpc_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            vpc_id: Optional[pulumi.Input[str]] = None) -> 'ActiveActiveSubscriptionPeering':
        """
        Get an existing ActiveActiveSubscriptionPeering resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] aws_account_id: AWS account ID that the VPC to be peered lives in. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[str] aws_peering_id: Identifier of the AWS cloud peering
        :param pulumi.Input[str] destination_region: Name of the region to create the VPC peering to. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[str] gcp_network_name: The name of the network to be peered. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[str] gcp_peering_id: Identifier of the cloud peering
        :param pulumi.Input[str] gcp_project_id: GCP project ID that the VPC to be peered lives in. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[str] gcp_redis_network_name: The name of the Redis Enterprise Cloud network to be peered
        :param pulumi.Input[str] gcp_redis_project_id: Identifier of the Redis Enterprise Cloud GCP project to be peered
        :param pulumi.Input[str] provider_name: The cloud provider to use with the vpc peering, (either `AWS` or `GCP`). Default: ‘AWS’. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[str] source_region: Name of the region to create the VPC peering from. **Modifying this attribute will force creation of a new resource.**
               
               
               **AWS ONLY:**
        :param pulumi.Input[str] status: is set to the current status of the peering - `initiating-request`, `pending-acceptance`, `active`, `inactive` or `failed`.
        :param pulumi.Input[str] subscription_id: A valid Active-Active subscription predefined in the current account. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[str] vpc_cidr: CIDR range of the VPC to be peered. Either this or `vpc_cidrs` must be specified. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vpc_cidrs: CIDR ranges of the VPC to be peered. Either this or `vpc_cidr` must be specified. **Modifying this attribute will force creation of a new resource.**
               
               **GCP ONLY:**
        :param pulumi.Input[str] vpc_id: Identifier of the VPC to be peered. **Modifying this attribute will force creation of a new resource.**
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ActiveActiveSubscriptionPeeringState.__new__(_ActiveActiveSubscriptionPeeringState)

        __props__.__dict__["aws_account_id"] = aws_account_id
        __props__.__dict__["aws_peering_id"] = aws_peering_id
        __props__.__dict__["destination_region"] = destination_region
        __props__.__dict__["gcp_network_name"] = gcp_network_name
        __props__.__dict__["gcp_peering_id"] = gcp_peering_id
        __props__.__dict__["gcp_project_id"] = gcp_project_id
        __props__.__dict__["gcp_redis_network_name"] = gcp_redis_network_name
        __props__.__dict__["gcp_redis_project_id"] = gcp_redis_project_id
        __props__.__dict__["provider_name"] = provider_name
        __props__.__dict__["source_region"] = source_region
        __props__.__dict__["status"] = status
        __props__.__dict__["subscription_id"] = subscription_id
        __props__.__dict__["vpc_cidr"] = vpc_cidr
        __props__.__dict__["vpc_cidrs"] = vpc_cidrs
        __props__.__dict__["vpc_id"] = vpc_id
        return ActiveActiveSubscriptionPeering(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="awsAccountId")
    def aws_account_id(self) -> pulumi.Output[str]:
        """
        AWS account ID that the VPC to be peered lives in. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "aws_account_id")

    @property
    @pulumi.getter(name="awsPeeringId")
    def aws_peering_id(self) -> pulumi.Output[str]:
        """
        Identifier of the AWS cloud peering
        """
        return pulumi.get(self, "aws_peering_id")

    @property
    @pulumi.getter(name="destinationRegion")
    def destination_region(self) -> pulumi.Output[str]:
        """
        Name of the region to create the VPC peering to. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "destination_region")

    @property
    @pulumi.getter(name="gcpNetworkName")
    def gcp_network_name(self) -> pulumi.Output[str]:
        """
        The name of the network to be peered. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "gcp_network_name")

    @property
    @pulumi.getter(name="gcpPeeringId")
    def gcp_peering_id(self) -> pulumi.Output[str]:
        """
        Identifier of the cloud peering
        """
        return pulumi.get(self, "gcp_peering_id")

    @property
    @pulumi.getter(name="gcpProjectId")
    def gcp_project_id(self) -> pulumi.Output[str]:
        """
        GCP project ID that the VPC to be peered lives in. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "gcp_project_id")

    @property
    @pulumi.getter(name="gcpRedisNetworkName")
    def gcp_redis_network_name(self) -> pulumi.Output[str]:
        """
        The name of the Redis Enterprise Cloud network to be peered
        """
        return pulumi.get(self, "gcp_redis_network_name")

    @property
    @pulumi.getter(name="gcpRedisProjectId")
    def gcp_redis_project_id(self) -> pulumi.Output[str]:
        """
        Identifier of the Redis Enterprise Cloud GCP project to be peered
        """
        return pulumi.get(self, "gcp_redis_project_id")

    @property
    @pulumi.getter(name="providerName")
    def provider_name(self) -> pulumi.Output[Optional[str]]:
        """
        The cloud provider to use with the vpc peering, (either `AWS` or `GCP`). Default: ‘AWS’. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "provider_name")

    @property
    @pulumi.getter(name="sourceRegion")
    def source_region(self) -> pulumi.Output[str]:
        """
        Name of the region to create the VPC peering from. **Modifying this attribute will force creation of a new resource.**


        **AWS ONLY:**
        """
        return pulumi.get(self, "source_region")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        is set to the current status of the peering - `initiating-request`, `pending-acceptance`, `active`, `inactive` or `failed`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> pulumi.Output[str]:
        """
        A valid Active-Active subscription predefined in the current account. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "subscription_id")

    @property
    @pulumi.getter(name="vpcCidr")
    def vpc_cidr(self) -> pulumi.Output[str]:
        """
        CIDR range of the VPC to be peered. Either this or `vpc_cidrs` must be specified. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "vpc_cidr")

    @property
    @pulumi.getter(name="vpcCidrs")
    def vpc_cidrs(self) -> pulumi.Output[Sequence[str]]:
        """
        CIDR ranges of the VPC to be peered. Either this or `vpc_cidr` must be specified. **Modifying this attribute will force creation of a new resource.**

        **GCP ONLY:**
        """
        return pulumi.get(self, "vpc_cidrs")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[str]:
        """
        Identifier of the VPC to be peered. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "vpc_id")

