# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ActiveActiveSubscriptionDatabaseArgs', 'ActiveActiveSubscriptionDatabase']

@pulumi.input_type
class ActiveActiveSubscriptionDatabaseArgs:
    def __init__(__self__, *,
                 memory_limit_in_gb: pulumi.Input[float],
                 subscription_id: pulumi.Input[str],
                 client_ssl_certificate: Optional[pulumi.Input[str]] = None,
                 data_eviction: Optional[pulumi.Input[str]] = None,
                 enable_tls: Optional[pulumi.Input[bool]] = None,
                 external_endpoint_for_oss_cluster_api: Optional[pulumi.Input[bool]] = None,
                 global_alerts: Optional[pulumi.Input[Sequence[pulumi.Input['ActiveActiveSubscriptionDatabaseGlobalAlertArgs']]]] = None,
                 global_data_persistence: Optional[pulumi.Input[str]] = None,
                 global_password: Optional[pulumi.Input[str]] = None,
                 global_source_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 override_regions: Optional[pulumi.Input[Sequence[pulumi.Input['ActiveActiveSubscriptionDatabaseOverrideRegionArgs']]]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 support_oss_cluster_api: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a ActiveActiveSubscriptionDatabase resource.
        :param pulumi.Input[float] memory_limit_in_gb: Maximum memory usage for this specific database, including replication and other overhead
        :param pulumi.Input[str] subscription_id: The ID of the Active-Active subscription to create the database in. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[str] client_ssl_certificate: SSL certificate to authenticate user connections.
        :param pulumi.Input[str] data_eviction: The data items eviction policy (either: 'allkeys-lru', 'allkeys-lfu', 'allkeys-random', 'volatile-lru', 'volatile-lfu', 'volatile-random', 'volatile-ttl' or 'noeviction'. Default: 'volatile-lru')
        :param pulumi.Input[bool] enable_tls: Use TLS for authentication. Default: ‘false’
        :param pulumi.Input[bool] external_endpoint_for_oss_cluster_api: Should use the external endpoint for open-source (OSS) Cluster API.
               Can only be enabled if OSS Cluster API support is enabled. Default: 'false'
        :param pulumi.Input[Sequence[pulumi.Input['ActiveActiveSubscriptionDatabaseGlobalAlertArgs']]] global_alerts: A block defining Redis database alert of regions that don't override global settings, documented below, can be specified multiple times. (either: 'dataset-size', 'datasets-size', 'throughput-higher-than', 'throughput-lower-than', 'latency', 'syncsource-error', 'syncsource-lag' or 'connections-limit')
        :param pulumi.Input[str] global_data_persistence: Global rate of database data persistence (in persistent storage) of regions that dont override global settings. Default: 'none'
        :param pulumi.Input[str] global_password: Password to access the database of regions that don't override global settings. If left empty, the password will be generated automatically
        :param pulumi.Input[Sequence[pulumi.Input[str]]] global_source_ips: List of source IP addresses or subnet masks of regions that don't override global settings. If specified, Redis clients will be able to connect to this database only from within the specified source IP addresses ranges (example: ['192.168.10.0/32', '192.168.12.0/24'])
        :param pulumi.Input[str] name: A meaningful name to identify the database. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[Sequence[pulumi.Input['ActiveActiveSubscriptionDatabaseOverrideRegionArgs']]] override_regions: Override region specific configuration, documented below
        :param pulumi.Input[int] port: TCP port on which the database is available - must be between 10000 and 19999. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[bool] support_oss_cluster_api: Support Redis open-source (OSS) Cluster API. Default: ‘false’
        """
        pulumi.set(__self__, "memory_limit_in_gb", memory_limit_in_gb)
        pulumi.set(__self__, "subscription_id", subscription_id)
        if client_ssl_certificate is not None:
            pulumi.set(__self__, "client_ssl_certificate", client_ssl_certificate)
        if data_eviction is not None:
            pulumi.set(__self__, "data_eviction", data_eviction)
        if enable_tls is not None:
            pulumi.set(__self__, "enable_tls", enable_tls)
        if external_endpoint_for_oss_cluster_api is not None:
            pulumi.set(__self__, "external_endpoint_for_oss_cluster_api", external_endpoint_for_oss_cluster_api)
        if global_alerts is not None:
            pulumi.set(__self__, "global_alerts", global_alerts)
        if global_data_persistence is not None:
            pulumi.set(__self__, "global_data_persistence", global_data_persistence)
        if global_password is not None:
            pulumi.set(__self__, "global_password", global_password)
        if global_source_ips is not None:
            pulumi.set(__self__, "global_source_ips", global_source_ips)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if override_regions is not None:
            pulumi.set(__self__, "override_regions", override_regions)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if support_oss_cluster_api is not None:
            pulumi.set(__self__, "support_oss_cluster_api", support_oss_cluster_api)

    @property
    @pulumi.getter(name="memoryLimitInGb")
    def memory_limit_in_gb(self) -> pulumi.Input[float]:
        """
        Maximum memory usage for this specific database, including replication and other overhead
        """
        return pulumi.get(self, "memory_limit_in_gb")

    @memory_limit_in_gb.setter
    def memory_limit_in_gb(self, value: pulumi.Input[float]):
        pulumi.set(self, "memory_limit_in_gb", value)

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> pulumi.Input[str]:
        """
        The ID of the Active-Active subscription to create the database in. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subscription_id", value)

    @property
    @pulumi.getter(name="clientSslCertificate")
    def client_ssl_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        SSL certificate to authenticate user connections.
        """
        return pulumi.get(self, "client_ssl_certificate")

    @client_ssl_certificate.setter
    def client_ssl_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_ssl_certificate", value)

    @property
    @pulumi.getter(name="dataEviction")
    def data_eviction(self) -> Optional[pulumi.Input[str]]:
        """
        The data items eviction policy (either: 'allkeys-lru', 'allkeys-lfu', 'allkeys-random', 'volatile-lru', 'volatile-lfu', 'volatile-random', 'volatile-ttl' or 'noeviction'. Default: 'volatile-lru')
        """
        return pulumi.get(self, "data_eviction")

    @data_eviction.setter
    def data_eviction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_eviction", value)

    @property
    @pulumi.getter(name="enableTls")
    def enable_tls(self) -> Optional[pulumi.Input[bool]]:
        """
        Use TLS for authentication. Default: ‘false’
        """
        return pulumi.get(self, "enable_tls")

    @enable_tls.setter
    def enable_tls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_tls", value)

    @property
    @pulumi.getter(name="externalEndpointForOssClusterApi")
    def external_endpoint_for_oss_cluster_api(self) -> Optional[pulumi.Input[bool]]:
        """
        Should use the external endpoint for open-source (OSS) Cluster API.
        Can only be enabled if OSS Cluster API support is enabled. Default: 'false'
        """
        return pulumi.get(self, "external_endpoint_for_oss_cluster_api")

    @external_endpoint_for_oss_cluster_api.setter
    def external_endpoint_for_oss_cluster_api(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "external_endpoint_for_oss_cluster_api", value)

    @property
    @pulumi.getter(name="globalAlerts")
    def global_alerts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ActiveActiveSubscriptionDatabaseGlobalAlertArgs']]]]:
        """
        A block defining Redis database alert of regions that don't override global settings, documented below, can be specified multiple times. (either: 'dataset-size', 'datasets-size', 'throughput-higher-than', 'throughput-lower-than', 'latency', 'syncsource-error', 'syncsource-lag' or 'connections-limit')
        """
        return pulumi.get(self, "global_alerts")

    @global_alerts.setter
    def global_alerts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ActiveActiveSubscriptionDatabaseGlobalAlertArgs']]]]):
        pulumi.set(self, "global_alerts", value)

    @property
    @pulumi.getter(name="globalDataPersistence")
    def global_data_persistence(self) -> Optional[pulumi.Input[str]]:
        """
        Global rate of database data persistence (in persistent storage) of regions that dont override global settings. Default: 'none'
        """
        return pulumi.get(self, "global_data_persistence")

    @global_data_persistence.setter
    def global_data_persistence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "global_data_persistence", value)

    @property
    @pulumi.getter(name="globalPassword")
    def global_password(self) -> Optional[pulumi.Input[str]]:
        """
        Password to access the database of regions that don't override global settings. If left empty, the password will be generated automatically
        """
        return pulumi.get(self, "global_password")

    @global_password.setter
    def global_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "global_password", value)

    @property
    @pulumi.getter(name="globalSourceIps")
    def global_source_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of source IP addresses or subnet masks of regions that don't override global settings. If specified, Redis clients will be able to connect to this database only from within the specified source IP addresses ranges (example: ['192.168.10.0/32', '192.168.12.0/24'])
        """
        return pulumi.get(self, "global_source_ips")

    @global_source_ips.setter
    def global_source_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "global_source_ips", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A meaningful name to identify the database. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="overrideRegions")
    def override_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ActiveActiveSubscriptionDatabaseOverrideRegionArgs']]]]:
        """
        Override region specific configuration, documented below
        """
        return pulumi.get(self, "override_regions")

    @override_regions.setter
    def override_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ActiveActiveSubscriptionDatabaseOverrideRegionArgs']]]]):
        pulumi.set(self, "override_regions", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        TCP port on which the database is available - must be between 10000 and 19999. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="supportOssClusterApi")
    def support_oss_cluster_api(self) -> Optional[pulumi.Input[bool]]:
        """
        Support Redis open-source (OSS) Cluster API. Default: ‘false’
        """
        return pulumi.get(self, "support_oss_cluster_api")

    @support_oss_cluster_api.setter
    def support_oss_cluster_api(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "support_oss_cluster_api", value)


@pulumi.input_type
class _ActiveActiveSubscriptionDatabaseState:
    def __init__(__self__, *,
                 client_ssl_certificate: Optional[pulumi.Input[str]] = None,
                 data_eviction: Optional[pulumi.Input[str]] = None,
                 db_id: Optional[pulumi.Input[int]] = None,
                 enable_tls: Optional[pulumi.Input[bool]] = None,
                 external_endpoint_for_oss_cluster_api: Optional[pulumi.Input[bool]] = None,
                 global_alerts: Optional[pulumi.Input[Sequence[pulumi.Input['ActiveActiveSubscriptionDatabaseGlobalAlertArgs']]]] = None,
                 global_data_persistence: Optional[pulumi.Input[str]] = None,
                 global_password: Optional[pulumi.Input[str]] = None,
                 global_source_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 memory_limit_in_gb: Optional[pulumi.Input[float]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 override_regions: Optional[pulumi.Input[Sequence[pulumi.Input['ActiveActiveSubscriptionDatabaseOverrideRegionArgs']]]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 private_endpoint: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 public_endpoint: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 subscription_id: Optional[pulumi.Input[str]] = None,
                 support_oss_cluster_api: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering ActiveActiveSubscriptionDatabase resources.
        :param pulumi.Input[str] client_ssl_certificate: SSL certificate to authenticate user connections.
        :param pulumi.Input[str] data_eviction: The data items eviction policy (either: 'allkeys-lru', 'allkeys-lfu', 'allkeys-random', 'volatile-lru', 'volatile-lfu', 'volatile-random', 'volatile-ttl' or 'noeviction'. Default: 'volatile-lru')
        :param pulumi.Input[int] db_id: Identifier of the database created
        :param pulumi.Input[bool] enable_tls: Use TLS for authentication. Default: ‘false’
        :param pulumi.Input[bool] external_endpoint_for_oss_cluster_api: Should use the external endpoint for open-source (OSS) Cluster API.
               Can only be enabled if OSS Cluster API support is enabled. Default: 'false'
        :param pulumi.Input[Sequence[pulumi.Input['ActiveActiveSubscriptionDatabaseGlobalAlertArgs']]] global_alerts: A block defining Redis database alert of regions that don't override global settings, documented below, can be specified multiple times. (either: 'dataset-size', 'datasets-size', 'throughput-higher-than', 'throughput-lower-than', 'latency', 'syncsource-error', 'syncsource-lag' or 'connections-limit')
        :param pulumi.Input[str] global_data_persistence: Global rate of database data persistence (in persistent storage) of regions that dont override global settings. Default: 'none'
        :param pulumi.Input[str] global_password: Password to access the database of regions that don't override global settings. If left empty, the password will be generated automatically
        :param pulumi.Input[Sequence[pulumi.Input[str]]] global_source_ips: List of source IP addresses or subnet masks of regions that don't override global settings. If specified, Redis clients will be able to connect to this database only from within the specified source IP addresses ranges (example: ['192.168.10.0/32', '192.168.12.0/24'])
        :param pulumi.Input[float] memory_limit_in_gb: Maximum memory usage for this specific database, including replication and other overhead
        :param pulumi.Input[str] name: A meaningful name to identify the database. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[Sequence[pulumi.Input['ActiveActiveSubscriptionDatabaseOverrideRegionArgs']]] override_regions: Override region specific configuration, documented below
        :param pulumi.Input[int] port: TCP port on which the database is available - must be between 10000 and 19999. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] private_endpoint: A map of which private endpoints can to access the database per region, uses region name as key.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] public_endpoint: A map of which public endpoints can to access the database per region, uses region name as key.
        :param pulumi.Input[str] subscription_id: The ID of the Active-Active subscription to create the database in. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[bool] support_oss_cluster_api: Support Redis open-source (OSS) Cluster API. Default: ‘false’
        """
        if client_ssl_certificate is not None:
            pulumi.set(__self__, "client_ssl_certificate", client_ssl_certificate)
        if data_eviction is not None:
            pulumi.set(__self__, "data_eviction", data_eviction)
        if db_id is not None:
            pulumi.set(__self__, "db_id", db_id)
        if enable_tls is not None:
            pulumi.set(__self__, "enable_tls", enable_tls)
        if external_endpoint_for_oss_cluster_api is not None:
            pulumi.set(__self__, "external_endpoint_for_oss_cluster_api", external_endpoint_for_oss_cluster_api)
        if global_alerts is not None:
            pulumi.set(__self__, "global_alerts", global_alerts)
        if global_data_persistence is not None:
            pulumi.set(__self__, "global_data_persistence", global_data_persistence)
        if global_password is not None:
            pulumi.set(__self__, "global_password", global_password)
        if global_source_ips is not None:
            pulumi.set(__self__, "global_source_ips", global_source_ips)
        if memory_limit_in_gb is not None:
            pulumi.set(__self__, "memory_limit_in_gb", memory_limit_in_gb)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if override_regions is not None:
            pulumi.set(__self__, "override_regions", override_regions)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if private_endpoint is not None:
            pulumi.set(__self__, "private_endpoint", private_endpoint)
        if public_endpoint is not None:
            pulumi.set(__self__, "public_endpoint", public_endpoint)
        if subscription_id is not None:
            pulumi.set(__self__, "subscription_id", subscription_id)
        if support_oss_cluster_api is not None:
            pulumi.set(__self__, "support_oss_cluster_api", support_oss_cluster_api)

    @property
    @pulumi.getter(name="clientSslCertificate")
    def client_ssl_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        SSL certificate to authenticate user connections.
        """
        return pulumi.get(self, "client_ssl_certificate")

    @client_ssl_certificate.setter
    def client_ssl_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_ssl_certificate", value)

    @property
    @pulumi.getter(name="dataEviction")
    def data_eviction(self) -> Optional[pulumi.Input[str]]:
        """
        The data items eviction policy (either: 'allkeys-lru', 'allkeys-lfu', 'allkeys-random', 'volatile-lru', 'volatile-lfu', 'volatile-random', 'volatile-ttl' or 'noeviction'. Default: 'volatile-lru')
        """
        return pulumi.get(self, "data_eviction")

    @data_eviction.setter
    def data_eviction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_eviction", value)

    @property
    @pulumi.getter(name="dbId")
    def db_id(self) -> Optional[pulumi.Input[int]]:
        """
        Identifier of the database created
        """
        return pulumi.get(self, "db_id")

    @db_id.setter
    def db_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "db_id", value)

    @property
    @pulumi.getter(name="enableTls")
    def enable_tls(self) -> Optional[pulumi.Input[bool]]:
        """
        Use TLS for authentication. Default: ‘false’
        """
        return pulumi.get(self, "enable_tls")

    @enable_tls.setter
    def enable_tls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_tls", value)

    @property
    @pulumi.getter(name="externalEndpointForOssClusterApi")
    def external_endpoint_for_oss_cluster_api(self) -> Optional[pulumi.Input[bool]]:
        """
        Should use the external endpoint for open-source (OSS) Cluster API.
        Can only be enabled if OSS Cluster API support is enabled. Default: 'false'
        """
        return pulumi.get(self, "external_endpoint_for_oss_cluster_api")

    @external_endpoint_for_oss_cluster_api.setter
    def external_endpoint_for_oss_cluster_api(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "external_endpoint_for_oss_cluster_api", value)

    @property
    @pulumi.getter(name="globalAlerts")
    def global_alerts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ActiveActiveSubscriptionDatabaseGlobalAlertArgs']]]]:
        """
        A block defining Redis database alert of regions that don't override global settings, documented below, can be specified multiple times. (either: 'dataset-size', 'datasets-size', 'throughput-higher-than', 'throughput-lower-than', 'latency', 'syncsource-error', 'syncsource-lag' or 'connections-limit')
        """
        return pulumi.get(self, "global_alerts")

    @global_alerts.setter
    def global_alerts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ActiveActiveSubscriptionDatabaseGlobalAlertArgs']]]]):
        pulumi.set(self, "global_alerts", value)

    @property
    @pulumi.getter(name="globalDataPersistence")
    def global_data_persistence(self) -> Optional[pulumi.Input[str]]:
        """
        Global rate of database data persistence (in persistent storage) of regions that dont override global settings. Default: 'none'
        """
        return pulumi.get(self, "global_data_persistence")

    @global_data_persistence.setter
    def global_data_persistence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "global_data_persistence", value)

    @property
    @pulumi.getter(name="globalPassword")
    def global_password(self) -> Optional[pulumi.Input[str]]:
        """
        Password to access the database of regions that don't override global settings. If left empty, the password will be generated automatically
        """
        return pulumi.get(self, "global_password")

    @global_password.setter
    def global_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "global_password", value)

    @property
    @pulumi.getter(name="globalSourceIps")
    def global_source_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of source IP addresses or subnet masks of regions that don't override global settings. If specified, Redis clients will be able to connect to this database only from within the specified source IP addresses ranges (example: ['192.168.10.0/32', '192.168.12.0/24'])
        """
        return pulumi.get(self, "global_source_ips")

    @global_source_ips.setter
    def global_source_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "global_source_ips", value)

    @property
    @pulumi.getter(name="memoryLimitInGb")
    def memory_limit_in_gb(self) -> Optional[pulumi.Input[float]]:
        """
        Maximum memory usage for this specific database, including replication and other overhead
        """
        return pulumi.get(self, "memory_limit_in_gb")

    @memory_limit_in_gb.setter
    def memory_limit_in_gb(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "memory_limit_in_gb", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A meaningful name to identify the database. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="overrideRegions")
    def override_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ActiveActiveSubscriptionDatabaseOverrideRegionArgs']]]]:
        """
        Override region specific configuration, documented below
        """
        return pulumi.get(self, "override_regions")

    @override_regions.setter
    def override_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ActiveActiveSubscriptionDatabaseOverrideRegionArgs']]]]):
        pulumi.set(self, "override_regions", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        TCP port on which the database is available - must be between 10000 and 19999. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="privateEndpoint")
    def private_endpoint(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of which private endpoints can to access the database per region, uses region name as key.
        """
        return pulumi.get(self, "private_endpoint")

    @private_endpoint.setter
    def private_endpoint(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "private_endpoint", value)

    @property
    @pulumi.getter(name="publicEndpoint")
    def public_endpoint(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of which public endpoints can to access the database per region, uses region name as key.
        """
        return pulumi.get(self, "public_endpoint")

    @public_endpoint.setter
    def public_endpoint(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "public_endpoint", value)

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the Active-Active subscription to create the database in. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscription_id", value)

    @property
    @pulumi.getter(name="supportOssClusterApi")
    def support_oss_cluster_api(self) -> Optional[pulumi.Input[bool]]:
        """
        Support Redis open-source (OSS) Cluster API. Default: ‘false’
        """
        return pulumi.get(self, "support_oss_cluster_api")

    @support_oss_cluster_api.setter
    def support_oss_cluster_api(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "support_oss_cluster_api", value)


class ActiveActiveSubscriptionDatabase(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 client_ssl_certificate: Optional[pulumi.Input[str]] = None,
                 data_eviction: Optional[pulumi.Input[str]] = None,
                 enable_tls: Optional[pulumi.Input[bool]] = None,
                 external_endpoint_for_oss_cluster_api: Optional[pulumi.Input[bool]] = None,
                 global_alerts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActiveActiveSubscriptionDatabaseGlobalAlertArgs']]]]] = None,
                 global_data_persistence: Optional[pulumi.Input[str]] = None,
                 global_password: Optional[pulumi.Input[str]] = None,
                 global_source_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 memory_limit_in_gb: Optional[pulumi.Input[float]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 override_regions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActiveActiveSubscriptionDatabaseOverrideRegionArgs']]]]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 subscription_id: Optional[pulumi.Input[str]] = None,
                 support_oss_cluster_api: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Creates a Database within a specified Active-Active Subscription in your Redis Enterprise Cloud Account.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_rediscloud as rediscloud

        card = rediscloud.get_payment_method(card_type="Visa")
        subscription_resource = rediscloud.ActiveActiveSubscription("subscription-resource",
            payment_method_id=card.id,
            cloud_provider="AWS",
            creation_plan=rediscloud.ActiveActiveSubscriptionCreationPlanArgs(
                memory_limit_in_gb=1,
                quantity=1,
                regions=[
                    rediscloud.ActiveActiveSubscriptionCreationPlanRegionArgs(
                        region="us-east-1",
                        networking_deployment_cidr="192.168.0.0/24",
                        write_operations_per_second=1000,
                        read_operations_per_second=1000,
                    ),
                    rediscloud.ActiveActiveSubscriptionCreationPlanRegionArgs(
                        region="us-east-2",
                        networking_deployment_cidr="10.0.1.0/24",
                        write_operations_per_second=1000,
                        read_operations_per_second=2000,
                    ),
                ],
            ))
        database_resource = rediscloud.ActiveActiveSubscriptionDatabase("database-resource",
            subscription_id=subscription_resource.id,
            memory_limit_in_gb=1,
            global_data_persistence="aof-every-1-second",
            global_password="some-random-pass-2",
            global_source_ips=["192.168.0.0/16"],
            global_alerts=[rediscloud.ActiveActiveSubscriptionDatabaseGlobalAlertArgs(
                name="dataset-size",
                value=40,
            )],
            override_regions=[
                rediscloud.ActiveActiveSubscriptionDatabaseOverrideRegionArgs(
                    name="us-east-2",
                    override_global_source_ips=["192.10.0.0/16"],
                ),
                rediscloud.ActiveActiveSubscriptionDatabaseOverrideRegionArgs(
                    name="us-east-1",
                    override_global_data_persistence="none",
                    override_global_password="region-specific-password",
                    override_global_alerts=[rediscloud.ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertArgs(
                        name="dataset-size",
                        value=60,
                    )],
                ),
            ])
        pulumi.export("us-east-1-public-endpoints", database_resource.public_endpoint["us-east-1"])
        pulumi.export("us-east-2-private-endpoints", database_resource.private_endpoint["us-east-1"])
        ```

        ## Import

        `rediscloud_active_active_subscription_database` can be imported using the ID of the Active-Active subscription and the ID of the database in the format {subscription ID}/{database ID}, e.g.

        ```sh
         $ pulumi import rediscloud:index/activeActiveSubscriptionDatabase:ActiveActiveSubscriptionDatabase database-resource 123456/12345678
        ```
         NoteDue to constraints in the Redis Cloud API, the import process will not import global attributes or override region attributes. If you wish to use these attributes in your Terraform configuration, you will need to manually add them to your Terraform configuration and run `pulumi up` to update the database.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] client_ssl_certificate: SSL certificate to authenticate user connections.
        :param pulumi.Input[str] data_eviction: The data items eviction policy (either: 'allkeys-lru', 'allkeys-lfu', 'allkeys-random', 'volatile-lru', 'volatile-lfu', 'volatile-random', 'volatile-ttl' or 'noeviction'. Default: 'volatile-lru')
        :param pulumi.Input[bool] enable_tls: Use TLS for authentication. Default: ‘false’
        :param pulumi.Input[bool] external_endpoint_for_oss_cluster_api: Should use the external endpoint for open-source (OSS) Cluster API.
               Can only be enabled if OSS Cluster API support is enabled. Default: 'false'
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActiveActiveSubscriptionDatabaseGlobalAlertArgs']]]] global_alerts: A block defining Redis database alert of regions that don't override global settings, documented below, can be specified multiple times. (either: 'dataset-size', 'datasets-size', 'throughput-higher-than', 'throughput-lower-than', 'latency', 'syncsource-error', 'syncsource-lag' or 'connections-limit')
        :param pulumi.Input[str] global_data_persistence: Global rate of database data persistence (in persistent storage) of regions that dont override global settings. Default: 'none'
        :param pulumi.Input[str] global_password: Password to access the database of regions that don't override global settings. If left empty, the password will be generated automatically
        :param pulumi.Input[Sequence[pulumi.Input[str]]] global_source_ips: List of source IP addresses or subnet masks of regions that don't override global settings. If specified, Redis clients will be able to connect to this database only from within the specified source IP addresses ranges (example: ['192.168.10.0/32', '192.168.12.0/24'])
        :param pulumi.Input[float] memory_limit_in_gb: Maximum memory usage for this specific database, including replication and other overhead
        :param pulumi.Input[str] name: A meaningful name to identify the database. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActiveActiveSubscriptionDatabaseOverrideRegionArgs']]]] override_regions: Override region specific configuration, documented below
        :param pulumi.Input[int] port: TCP port on which the database is available - must be between 10000 and 19999. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[str] subscription_id: The ID of the Active-Active subscription to create the database in. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[bool] support_oss_cluster_api: Support Redis open-source (OSS) Cluster API. Default: ‘false’
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ActiveActiveSubscriptionDatabaseArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a Database within a specified Active-Active Subscription in your Redis Enterprise Cloud Account.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_rediscloud as rediscloud

        card = rediscloud.get_payment_method(card_type="Visa")
        subscription_resource = rediscloud.ActiveActiveSubscription("subscription-resource",
            payment_method_id=card.id,
            cloud_provider="AWS",
            creation_plan=rediscloud.ActiveActiveSubscriptionCreationPlanArgs(
                memory_limit_in_gb=1,
                quantity=1,
                regions=[
                    rediscloud.ActiveActiveSubscriptionCreationPlanRegionArgs(
                        region="us-east-1",
                        networking_deployment_cidr="192.168.0.0/24",
                        write_operations_per_second=1000,
                        read_operations_per_second=1000,
                    ),
                    rediscloud.ActiveActiveSubscriptionCreationPlanRegionArgs(
                        region="us-east-2",
                        networking_deployment_cidr="10.0.1.0/24",
                        write_operations_per_second=1000,
                        read_operations_per_second=2000,
                    ),
                ],
            ))
        database_resource = rediscloud.ActiveActiveSubscriptionDatabase("database-resource",
            subscription_id=subscription_resource.id,
            memory_limit_in_gb=1,
            global_data_persistence="aof-every-1-second",
            global_password="some-random-pass-2",
            global_source_ips=["192.168.0.0/16"],
            global_alerts=[rediscloud.ActiveActiveSubscriptionDatabaseGlobalAlertArgs(
                name="dataset-size",
                value=40,
            )],
            override_regions=[
                rediscloud.ActiveActiveSubscriptionDatabaseOverrideRegionArgs(
                    name="us-east-2",
                    override_global_source_ips=["192.10.0.0/16"],
                ),
                rediscloud.ActiveActiveSubscriptionDatabaseOverrideRegionArgs(
                    name="us-east-1",
                    override_global_data_persistence="none",
                    override_global_password="region-specific-password",
                    override_global_alerts=[rediscloud.ActiveActiveSubscriptionDatabaseOverrideRegionOverrideGlobalAlertArgs(
                        name="dataset-size",
                        value=60,
                    )],
                ),
            ])
        pulumi.export("us-east-1-public-endpoints", database_resource.public_endpoint["us-east-1"])
        pulumi.export("us-east-2-private-endpoints", database_resource.private_endpoint["us-east-1"])
        ```

        ## Import

        `rediscloud_active_active_subscription_database` can be imported using the ID of the Active-Active subscription and the ID of the database in the format {subscription ID}/{database ID}, e.g.

        ```sh
         $ pulumi import rediscloud:index/activeActiveSubscriptionDatabase:ActiveActiveSubscriptionDatabase database-resource 123456/12345678
        ```
         NoteDue to constraints in the Redis Cloud API, the import process will not import global attributes or override region attributes. If you wish to use these attributes in your Terraform configuration, you will need to manually add them to your Terraform configuration and run `pulumi up` to update the database.

        :param str resource_name: The name of the resource.
        :param ActiveActiveSubscriptionDatabaseArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ActiveActiveSubscriptionDatabaseArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 client_ssl_certificate: Optional[pulumi.Input[str]] = None,
                 data_eviction: Optional[pulumi.Input[str]] = None,
                 enable_tls: Optional[pulumi.Input[bool]] = None,
                 external_endpoint_for_oss_cluster_api: Optional[pulumi.Input[bool]] = None,
                 global_alerts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActiveActiveSubscriptionDatabaseGlobalAlertArgs']]]]] = None,
                 global_data_persistence: Optional[pulumi.Input[str]] = None,
                 global_password: Optional[pulumi.Input[str]] = None,
                 global_source_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 memory_limit_in_gb: Optional[pulumi.Input[float]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 override_regions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActiveActiveSubscriptionDatabaseOverrideRegionArgs']]]]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 subscription_id: Optional[pulumi.Input[str]] = None,
                 support_oss_cluster_api: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ActiveActiveSubscriptionDatabaseArgs.__new__(ActiveActiveSubscriptionDatabaseArgs)

            __props__.__dict__["client_ssl_certificate"] = client_ssl_certificate
            __props__.__dict__["data_eviction"] = data_eviction
            __props__.__dict__["enable_tls"] = enable_tls
            __props__.__dict__["external_endpoint_for_oss_cluster_api"] = external_endpoint_for_oss_cluster_api
            __props__.__dict__["global_alerts"] = global_alerts
            __props__.__dict__["global_data_persistence"] = global_data_persistence
            __props__.__dict__["global_password"] = None if global_password is None else pulumi.Output.secret(global_password)
            __props__.__dict__["global_source_ips"] = global_source_ips
            if memory_limit_in_gb is None and not opts.urn:
                raise TypeError("Missing required property 'memory_limit_in_gb'")
            __props__.__dict__["memory_limit_in_gb"] = memory_limit_in_gb
            __props__.__dict__["name"] = name
            __props__.__dict__["override_regions"] = override_regions
            __props__.__dict__["port"] = port
            if subscription_id is None and not opts.urn:
                raise TypeError("Missing required property 'subscription_id'")
            __props__.__dict__["subscription_id"] = subscription_id
            __props__.__dict__["support_oss_cluster_api"] = support_oss_cluster_api
            __props__.__dict__["db_id"] = None
            __props__.__dict__["private_endpoint"] = None
            __props__.__dict__["public_endpoint"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["globalPassword"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(ActiveActiveSubscriptionDatabase, __self__).__init__(
            'rediscloud:index/activeActiveSubscriptionDatabase:ActiveActiveSubscriptionDatabase',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            client_ssl_certificate: Optional[pulumi.Input[str]] = None,
            data_eviction: Optional[pulumi.Input[str]] = None,
            db_id: Optional[pulumi.Input[int]] = None,
            enable_tls: Optional[pulumi.Input[bool]] = None,
            external_endpoint_for_oss_cluster_api: Optional[pulumi.Input[bool]] = None,
            global_alerts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActiveActiveSubscriptionDatabaseGlobalAlertArgs']]]]] = None,
            global_data_persistence: Optional[pulumi.Input[str]] = None,
            global_password: Optional[pulumi.Input[str]] = None,
            global_source_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            memory_limit_in_gb: Optional[pulumi.Input[float]] = None,
            name: Optional[pulumi.Input[str]] = None,
            override_regions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActiveActiveSubscriptionDatabaseOverrideRegionArgs']]]]] = None,
            port: Optional[pulumi.Input[int]] = None,
            private_endpoint: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            public_endpoint: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            subscription_id: Optional[pulumi.Input[str]] = None,
            support_oss_cluster_api: Optional[pulumi.Input[bool]] = None) -> 'ActiveActiveSubscriptionDatabase':
        """
        Get an existing ActiveActiveSubscriptionDatabase resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] client_ssl_certificate: SSL certificate to authenticate user connections.
        :param pulumi.Input[str] data_eviction: The data items eviction policy (either: 'allkeys-lru', 'allkeys-lfu', 'allkeys-random', 'volatile-lru', 'volatile-lfu', 'volatile-random', 'volatile-ttl' or 'noeviction'. Default: 'volatile-lru')
        :param pulumi.Input[int] db_id: Identifier of the database created
        :param pulumi.Input[bool] enable_tls: Use TLS for authentication. Default: ‘false’
        :param pulumi.Input[bool] external_endpoint_for_oss_cluster_api: Should use the external endpoint for open-source (OSS) Cluster API.
               Can only be enabled if OSS Cluster API support is enabled. Default: 'false'
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActiveActiveSubscriptionDatabaseGlobalAlertArgs']]]] global_alerts: A block defining Redis database alert of regions that don't override global settings, documented below, can be specified multiple times. (either: 'dataset-size', 'datasets-size', 'throughput-higher-than', 'throughput-lower-than', 'latency', 'syncsource-error', 'syncsource-lag' or 'connections-limit')
        :param pulumi.Input[str] global_data_persistence: Global rate of database data persistence (in persistent storage) of regions that dont override global settings. Default: 'none'
        :param pulumi.Input[str] global_password: Password to access the database of regions that don't override global settings. If left empty, the password will be generated automatically
        :param pulumi.Input[Sequence[pulumi.Input[str]]] global_source_ips: List of source IP addresses or subnet masks of regions that don't override global settings. If specified, Redis clients will be able to connect to this database only from within the specified source IP addresses ranges (example: ['192.168.10.0/32', '192.168.12.0/24'])
        :param pulumi.Input[float] memory_limit_in_gb: Maximum memory usage for this specific database, including replication and other overhead
        :param pulumi.Input[str] name: A meaningful name to identify the database. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ActiveActiveSubscriptionDatabaseOverrideRegionArgs']]]] override_regions: Override region specific configuration, documented below
        :param pulumi.Input[int] port: TCP port on which the database is available - must be between 10000 and 19999. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] private_endpoint: A map of which private endpoints can to access the database per region, uses region name as key.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] public_endpoint: A map of which public endpoints can to access the database per region, uses region name as key.
        :param pulumi.Input[str] subscription_id: The ID of the Active-Active subscription to create the database in. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[bool] support_oss_cluster_api: Support Redis open-source (OSS) Cluster API. Default: ‘false’
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ActiveActiveSubscriptionDatabaseState.__new__(_ActiveActiveSubscriptionDatabaseState)

        __props__.__dict__["client_ssl_certificate"] = client_ssl_certificate
        __props__.__dict__["data_eviction"] = data_eviction
        __props__.__dict__["db_id"] = db_id
        __props__.__dict__["enable_tls"] = enable_tls
        __props__.__dict__["external_endpoint_for_oss_cluster_api"] = external_endpoint_for_oss_cluster_api
        __props__.__dict__["global_alerts"] = global_alerts
        __props__.__dict__["global_data_persistence"] = global_data_persistence
        __props__.__dict__["global_password"] = global_password
        __props__.__dict__["global_source_ips"] = global_source_ips
        __props__.__dict__["memory_limit_in_gb"] = memory_limit_in_gb
        __props__.__dict__["name"] = name
        __props__.__dict__["override_regions"] = override_regions
        __props__.__dict__["port"] = port
        __props__.__dict__["private_endpoint"] = private_endpoint
        __props__.__dict__["public_endpoint"] = public_endpoint
        __props__.__dict__["subscription_id"] = subscription_id
        __props__.__dict__["support_oss_cluster_api"] = support_oss_cluster_api
        return ActiveActiveSubscriptionDatabase(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clientSslCertificate")
    def client_ssl_certificate(self) -> pulumi.Output[Optional[str]]:
        """
        SSL certificate to authenticate user connections.
        """
        return pulumi.get(self, "client_ssl_certificate")

    @property
    @pulumi.getter(name="dataEviction")
    def data_eviction(self) -> pulumi.Output[Optional[str]]:
        """
        The data items eviction policy (either: 'allkeys-lru', 'allkeys-lfu', 'allkeys-random', 'volatile-lru', 'volatile-lfu', 'volatile-random', 'volatile-ttl' or 'noeviction'. Default: 'volatile-lru')
        """
        return pulumi.get(self, "data_eviction")

    @property
    @pulumi.getter(name="dbId")
    def db_id(self) -> pulumi.Output[int]:
        """
        Identifier of the database created
        """
        return pulumi.get(self, "db_id")

    @property
    @pulumi.getter(name="enableTls")
    def enable_tls(self) -> pulumi.Output[Optional[bool]]:
        """
        Use TLS for authentication. Default: ‘false’
        """
        return pulumi.get(self, "enable_tls")

    @property
    @pulumi.getter(name="externalEndpointForOssClusterApi")
    def external_endpoint_for_oss_cluster_api(self) -> pulumi.Output[Optional[bool]]:
        """
        Should use the external endpoint for open-source (OSS) Cluster API.
        Can only be enabled if OSS Cluster API support is enabled. Default: 'false'
        """
        return pulumi.get(self, "external_endpoint_for_oss_cluster_api")

    @property
    @pulumi.getter(name="globalAlerts")
    def global_alerts(self) -> pulumi.Output[Optional[Sequence['outputs.ActiveActiveSubscriptionDatabaseGlobalAlert']]]:
        """
        A block defining Redis database alert of regions that don't override global settings, documented below, can be specified multiple times. (either: 'dataset-size', 'datasets-size', 'throughput-higher-than', 'throughput-lower-than', 'latency', 'syncsource-error', 'syncsource-lag' or 'connections-limit')
        """
        return pulumi.get(self, "global_alerts")

    @property
    @pulumi.getter(name="globalDataPersistence")
    def global_data_persistence(self) -> pulumi.Output[Optional[str]]:
        """
        Global rate of database data persistence (in persistent storage) of regions that dont override global settings. Default: 'none'
        """
        return pulumi.get(self, "global_data_persistence")

    @property
    @pulumi.getter(name="globalPassword")
    def global_password(self) -> pulumi.Output[str]:
        """
        Password to access the database of regions that don't override global settings. If left empty, the password will be generated automatically
        """
        return pulumi.get(self, "global_password")

    @property
    @pulumi.getter(name="globalSourceIps")
    def global_source_ips(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of source IP addresses or subnet masks of regions that don't override global settings. If specified, Redis clients will be able to connect to this database only from within the specified source IP addresses ranges (example: ['192.168.10.0/32', '192.168.12.0/24'])
        """
        return pulumi.get(self, "global_source_ips")

    @property
    @pulumi.getter(name="memoryLimitInGb")
    def memory_limit_in_gb(self) -> pulumi.Output[float]:
        """
        Maximum memory usage for this specific database, including replication and other overhead
        """
        return pulumi.get(self, "memory_limit_in_gb")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        A meaningful name to identify the database. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="overrideRegions")
    def override_regions(self) -> pulumi.Output[Optional[Sequence['outputs.ActiveActiveSubscriptionDatabaseOverrideRegion']]]:
        """
        Override region specific configuration, documented below
        """
        return pulumi.get(self, "override_regions")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[Optional[int]]:
        """
        TCP port on which the database is available - must be between 10000 and 19999. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="privateEndpoint")
    def private_endpoint(self) -> pulumi.Output[Mapping[str, str]]:
        """
        A map of which private endpoints can to access the database per region, uses region name as key.
        """
        return pulumi.get(self, "private_endpoint")

    @property
    @pulumi.getter(name="publicEndpoint")
    def public_endpoint(self) -> pulumi.Output[Mapping[str, str]]:
        """
        A map of which public endpoints can to access the database per region, uses region name as key.
        """
        return pulumi.get(self, "public_endpoint")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> pulumi.Output[str]:
        """
        The ID of the Active-Active subscription to create the database in. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "subscription_id")

    @property
    @pulumi.getter(name="supportOssClusterApi")
    def support_oss_cluster_api(self) -> pulumi.Output[Optional[bool]]:
        """
        Support Redis open-source (OSS) Cluster API. Default: ‘false’
        """
        return pulumi.get(self, "support_oss_cluster_api")

