# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AclRoleArgs', 'AclRole']

@pulumi.input_type
class AclRoleArgs:
    def __init__(__self__, *,
                 rules: pulumi.Input[Sequence[pulumi.Input['AclRoleRuleArgs']]],
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AclRole resource.
        :param pulumi.Input[Sequence[pulumi.Input['AclRoleRuleArgs']]] rules: A set of rule association objects, documented below.
        :param pulumi.Input[str] name: A meaningful name for the role. Must be unique.
        """
        pulumi.set(__self__, "rules", rules)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Input[Sequence[pulumi.Input['AclRoleRuleArgs']]]:
        """
        A set of rule association objects, documented below.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input[Sequence[pulumi.Input['AclRoleRuleArgs']]]):
        pulumi.set(self, "rules", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A meaningful name for the role. Must be unique.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _AclRoleState:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['AclRoleRuleArgs']]]] = None):
        """
        Input properties used for looking up and filtering AclRole resources.
        :param pulumi.Input[str] name: A meaningful name for the role. Must be unique.
        :param pulumi.Input[Sequence[pulumi.Input['AclRoleRuleArgs']]] rules: A set of rule association objects, documented below.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A meaningful name for the role. Must be unique.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AclRoleRuleArgs']]]]:
        """
        A set of rule association objects, documented below.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AclRoleRuleArgs']]]]):
        pulumi.set(self, "rules", value)


class AclRole(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AclRoleRuleArgs']]]]] = None,
                 __props__=None):
        """
        Creates a Role in your Redis Enterprise Cloud Account.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_rediscloud as rediscloud

        rule_resource = rediscloud.AclRule("rule-resource", rule="+@read ~cache:*")
        role_resource = rediscloud.AclRole("role-resource", rules=[rediscloud.AclRoleRuleArgs(
            name=rule_resource.name,
            databases=[rediscloud.AclRoleRuleDatabaseArgs(
                subscription=rediscloud_subscription["subscription-resource"]["id"],
                database=rediscloud_subscription_database["database-resource"]["db_id"],
            )],
        )])
        ```

        ## Import

        `rediscloud_acl_role` can be imported using the Identifier of the Role, e.g.

        ```sh
         $ pulumi import rediscloud:index/aclRole:AclRole role-resource 123456
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: A meaningful name for the role. Must be unique.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AclRoleRuleArgs']]]] rules: A set of rule association objects, documented below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AclRoleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a Role in your Redis Enterprise Cloud Account.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_rediscloud as rediscloud

        rule_resource = rediscloud.AclRule("rule-resource", rule="+@read ~cache:*")
        role_resource = rediscloud.AclRole("role-resource", rules=[rediscloud.AclRoleRuleArgs(
            name=rule_resource.name,
            databases=[rediscloud.AclRoleRuleDatabaseArgs(
                subscription=rediscloud_subscription["subscription-resource"]["id"],
                database=rediscloud_subscription_database["database-resource"]["db_id"],
            )],
        )])
        ```

        ## Import

        `rediscloud_acl_role` can be imported using the Identifier of the Role, e.g.

        ```sh
         $ pulumi import rediscloud:index/aclRole:AclRole role-resource 123456
        ```

        :param str resource_name: The name of the resource.
        :param AclRoleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AclRoleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AclRoleRuleArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AclRoleArgs.__new__(AclRoleArgs)

            __props__.__dict__["name"] = name
            if rules is None and not opts.urn:
                raise TypeError("Missing required property 'rules'")
            __props__.__dict__["rules"] = rules
        super(AclRole, __self__).__init__(
            'rediscloud:index/aclRole:AclRole',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            name: Optional[pulumi.Input[str]] = None,
            rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AclRoleRuleArgs']]]]] = None) -> 'AclRole':
        """
        Get an existing AclRole resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: A meaningful name for the role. Must be unique.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AclRoleRuleArgs']]]] rules: A set of rule association objects, documented below.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AclRoleState.__new__(_AclRoleState)

        __props__.__dict__["name"] = name
        __props__.__dict__["rules"] = rules
        return AclRole(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        A meaningful name for the role. Must be unique.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Output[Sequence['outputs.AclRoleRule']]:
        """
        A set of rule association objects, documented below.
        """
        return pulumi.get(self, "rules")

