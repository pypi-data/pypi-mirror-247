# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetAclRuleResult',
    'AwaitableGetAclRuleResult',
    'get_acl_rule',
    'get_acl_rule_output',
]

@pulumi.output_type
class GetAclRuleResult:
    """
    A collection of values returned by getAclRule.
    """
    def __init__(__self__, id=None, name=None, rule=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if rule and not isinstance(rule, str):
            raise TypeError("Expected argument 'rule' to be a str")
        pulumi.set(__self__, "rule", rule)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The Rule's name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def rule(self) -> str:
        """
        The ACL Rule itself.
        """
        return pulumi.get(self, "rule")


class AwaitableGetAclRuleResult(GetAclRuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAclRuleResult(
            id=self.id,
            name=self.name,
            rule=self.rule)


def get_acl_rule(name: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAclRuleResult:
    """
    The Rule (a.k.a Redis Rule, Redis ACL) data source allows access to an existing Rule within your Redis Enterprise Cloud
    Account.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_rediscloud as rediscloud

    example = rediscloud.get_acl_rule(name="cache-reader-rule")
    pulumi.export("rediscloudAclRule", example.id)
    ```


    :param str name: The name of the Rule to filter returned subscriptions
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('rediscloud:index/getAclRule:getAclRule', __args__, opts=opts, typ=GetAclRuleResult).value

    return AwaitableGetAclRuleResult(
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        rule=pulumi.get(__ret__, 'rule'))


@_utilities.lift_output_func(get_acl_rule)
def get_acl_rule_output(name: Optional[pulumi.Input[str]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAclRuleResult]:
    """
    The Rule (a.k.a Redis Rule, Redis ACL) data source allows access to an existing Rule within your Redis Enterprise Cloud
    Account.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_rediscloud as rediscloud

    example = rediscloud.get_acl_rule(name="cache-reader-rule")
    pulumi.export("rediscloudAclRule", example.id)
    ```


    :param str name: The name of the Rule to filter returned subscriptions
    """
    ...
