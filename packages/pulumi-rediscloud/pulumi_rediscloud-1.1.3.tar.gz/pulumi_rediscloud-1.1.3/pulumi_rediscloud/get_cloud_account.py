# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetCloudAccountResult',
    'AwaitableGetCloudAccountResult',
    'get_cloud_account',
    'get_cloud_account_output',
]

@pulumi.output_type
class GetCloudAccountResult:
    """
    A collection of values returned by getCloudAccount.
    """
    def __init__(__self__, access_key_id=None, exclude_internal_account=None, id=None, name=None, provider_type=None):
        if access_key_id and not isinstance(access_key_id, str):
            raise TypeError("Expected argument 'access_key_id' to be a str")
        pulumi.set(__self__, "access_key_id", access_key_id)
        if exclude_internal_account and not isinstance(exclude_internal_account, bool):
            raise TypeError("Expected argument 'exclude_internal_account' to be a bool")
        pulumi.set(__self__, "exclude_internal_account", exclude_internal_account)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provider_type and not isinstance(provider_type, str):
            raise TypeError("Expected argument 'provider_type' to be a str")
        pulumi.set(__self__, "provider_type", provider_type)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> str:
        """
        The access key ID associated with the cloud account
        """
        return pulumi.get(self, "access_key_id")

    @property
    @pulumi.getter(name="excludeInternalAccount")
    def exclude_internal_account(self) -> Optional[bool]:
        return pulumi.get(self, "exclude_internal_account")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="providerType")
    def provider_type(self) -> str:
        return pulumi.get(self, "provider_type")


class AwaitableGetCloudAccountResult(GetCloudAccountResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCloudAccountResult(
            access_key_id=self.access_key_id,
            exclude_internal_account=self.exclude_internal_account,
            id=self.id,
            name=self.name,
            provider_type=self.provider_type)


def get_cloud_account(exclude_internal_account: Optional[bool] = None,
                      name: Optional[str] = None,
                      provider_type: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCloudAccountResult:
    """
    The Cloud Account data source allows access to the ID of a Cloud Account configuration.  This ID can be
    used when creating Subscription resources.

    ## Example Usage

    The following example excludes the Redis Labs internal cloud account and returns only AWS related accounts.
    This example assumes there is only a single AWS cloud account defined.

    ```python
    import pulumi
    import pulumi_rediscloud as rediscloud

    example = rediscloud.get_cloud_account(exclude_internal_account=True,
        provider_type="AWS")
    ```

    If there is more than one AWS cloud account then the name attribute can be used to further filter the ID returned.
    This example looks for a cloud account named `test` and returns the cloud account ID and access key ID.

    ```python
    import pulumi
    import pulumi_rediscloud as rediscloud

    example = rediscloud.get_cloud_account(exclude_internal_account=True,
        provider_type="AWS",
        name="test")
    pulumi.export("cloudAccountId", example.id)
    pulumi.export("cloudAccountAccessKeyId", example.access_key_id)
    ```


    :param bool exclude_internal_account: Whether to exclude the Redis Labs internal cloud account.
    :param str name: A meaningful name to identify the cloud account
    :param str provider_type: The cloud provider of the cloud account, (either `AWS` or `GCP`)
    """
    __args__ = dict()
    __args__['excludeInternalAccount'] = exclude_internal_account
    __args__['name'] = name
    __args__['providerType'] = provider_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('rediscloud:index/getCloudAccount:getCloudAccount', __args__, opts=opts, typ=GetCloudAccountResult).value

    return AwaitableGetCloudAccountResult(
        access_key_id=pulumi.get(__ret__, 'access_key_id'),
        exclude_internal_account=pulumi.get(__ret__, 'exclude_internal_account'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        provider_type=pulumi.get(__ret__, 'provider_type'))


@_utilities.lift_output_func(get_cloud_account)
def get_cloud_account_output(exclude_internal_account: Optional[pulumi.Input[Optional[bool]]] = None,
                             name: Optional[pulumi.Input[Optional[str]]] = None,
                             provider_type: Optional[pulumi.Input[Optional[str]]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCloudAccountResult]:
    """
    The Cloud Account data source allows access to the ID of a Cloud Account configuration.  This ID can be
    used when creating Subscription resources.

    ## Example Usage

    The following example excludes the Redis Labs internal cloud account and returns only AWS related accounts.
    This example assumes there is only a single AWS cloud account defined.

    ```python
    import pulumi
    import pulumi_rediscloud as rediscloud

    example = rediscloud.get_cloud_account(exclude_internal_account=True,
        provider_type="AWS")
    ```

    If there is more than one AWS cloud account then the name attribute can be used to further filter the ID returned.
    This example looks for a cloud account named `test` and returns the cloud account ID and access key ID.

    ```python
    import pulumi
    import pulumi_rediscloud as rediscloud

    example = rediscloud.get_cloud_account(exclude_internal_account=True,
        provider_type="AWS",
        name="test")
    pulumi.export("cloudAccountId", example.id)
    pulumi.export("cloudAccountAccessKeyId", example.access_key_id)
    ```


    :param bool exclude_internal_account: Whether to exclude the Redis Labs internal cloud account.
    :param str name: A meaningful name to identify the cloud account
    :param str provider_type: The cloud provider of the cloud account, (either `AWS` or `GCP`)
    """
    ...
