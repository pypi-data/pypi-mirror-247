# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['AclUserArgs', 'AclUser']

@pulumi.input_type
class AclUserArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 role: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AclUser resource.
        :param pulumi.Input[str] password: The password for this ACL User. Must contain a lower-case letter, a
               upper-case letter, a
               number and a special character.
        :param pulumi.Input[str] role: The name of the Role held by the User.
        :param pulumi.Input[str] name: A meaningful name for the User. Must be unique.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "role", role)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        The password for this ACL User. Must contain a lower-case letter, a
        upper-case letter, a
        number and a special character.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def role(self) -> pulumi.Input[str]:
        """
        The name of the Role held by the User.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: pulumi.Input[str]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A meaningful name for the User. Must be unique.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _AclUserState:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering AclUser resources.
        :param pulumi.Input[str] name: A meaningful name for the User. Must be unique.
        :param pulumi.Input[str] password: The password for this ACL User. Must contain a lower-case letter, a
               upper-case letter, a
               number and a special character.
        :param pulumi.Input[str] role: The name of the Role held by the User.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A meaningful name for the User. Must be unique.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The password for this ACL User. Must contain a lower-case letter, a
        upper-case letter, a
        number and a special character.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Role held by the User.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)


class AclUser(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Creates a User in your Redis Enterprise Cloud Account.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_rediscloud as rediscloud

        user_resource = rediscloud.AclUser("user-resource",
            role=rediscloud_acl_role["role-resource"]["name"],
            password="mY.passw0rd")
        ```

        ## Import

        `rediscloud_acl_user` can be imported using the Identifier of the User, e.g.

        ```sh
         $ pulumi import rediscloud:index/aclUser:AclUser user-resource 123456
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: A meaningful name for the User. Must be unique.
        :param pulumi.Input[str] password: The password for this ACL User. Must contain a lower-case letter, a
               upper-case letter, a
               number and a special character.
        :param pulumi.Input[str] role: The name of the Role held by the User.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AclUserArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a User in your Redis Enterprise Cloud Account.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_rediscloud as rediscloud

        user_resource = rediscloud.AclUser("user-resource",
            role=rediscloud_acl_role["role-resource"]["name"],
            password="mY.passw0rd")
        ```

        ## Import

        `rediscloud_acl_user` can be imported using the Identifier of the User, e.g.

        ```sh
         $ pulumi import rediscloud:index/aclUser:AclUser user-resource 123456
        ```

        :param str resource_name: The name of the resource.
        :param AclUserArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AclUserArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AclUserArgs.__new__(AclUserArgs)

            __props__.__dict__["name"] = name
            if password is None and not opts.urn:
                raise TypeError("Missing required property 'password'")
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            if role is None and not opts.urn:
                raise TypeError("Missing required property 'role'")
            __props__.__dict__["role"] = role
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(AclUser, __self__).__init__(
            'rediscloud:index/aclUser:AclUser',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            name: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            role: Optional[pulumi.Input[str]] = None) -> 'AclUser':
        """
        Get an existing AclUser resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: A meaningful name for the User. Must be unique.
        :param pulumi.Input[str] password: The password for this ACL User. Must contain a lower-case letter, a
               upper-case letter, a
               number and a special character.
        :param pulumi.Input[str] role: The name of the Role held by the User.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AclUserState.__new__(_AclUserState)

        __props__.__dict__["name"] = name
        __props__.__dict__["password"] = password
        __props__.__dict__["role"] = role
        return AclUser(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        A meaningful name for the User. Must be unique.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[str]:
        """
        The password for this ACL User. Must contain a lower-case letter, a
        upper-case letter, a
        number and a special character.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def role(self) -> pulumi.Output[str]:
        """
        The name of the Role held by the User.
        """
        return pulumi.get(self, "role")

