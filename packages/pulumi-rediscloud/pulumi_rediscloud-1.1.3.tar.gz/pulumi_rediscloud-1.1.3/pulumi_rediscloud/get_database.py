# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetDatabaseResult',
    'AwaitableGetDatabaseResult',
    'get_database',
    'get_database_output',
]

@pulumi.output_type
class GetDatabaseResult:
    """
    A collection of values returned by getDatabase.
    """
    def __init__(__self__, alerts=None, data_eviction=None, data_persistence=None, hashing_policies=None, id=None, memory_limit_in_gb=None, modules=None, name=None, password=None, private_endpoint=None, protocol=None, public_endpoint=None, region=None, replica_ofs=None, replication=None, subscription_id=None, support_oss_cluster_api=None, throughput_measurement_by=None, throughput_measurement_value=None):
        if alerts and not isinstance(alerts, list):
            raise TypeError("Expected argument 'alerts' to be a list")
        pulumi.set(__self__, "alerts", alerts)
        if data_eviction and not isinstance(data_eviction, str):
            raise TypeError("Expected argument 'data_eviction' to be a str")
        pulumi.set(__self__, "data_eviction", data_eviction)
        if data_persistence and not isinstance(data_persistence, str):
            raise TypeError("Expected argument 'data_persistence' to be a str")
        pulumi.set(__self__, "data_persistence", data_persistence)
        if hashing_policies and not isinstance(hashing_policies, list):
            raise TypeError("Expected argument 'hashing_policies' to be a list")
        pulumi.set(__self__, "hashing_policies", hashing_policies)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if memory_limit_in_gb and not isinstance(memory_limit_in_gb, float):
            raise TypeError("Expected argument 'memory_limit_in_gb' to be a float")
        pulumi.set(__self__, "memory_limit_in_gb", memory_limit_in_gb)
        if modules and not isinstance(modules, list):
            raise TypeError("Expected argument 'modules' to be a list")
        pulumi.set(__self__, "modules", modules)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if password and not isinstance(password, str):
            raise TypeError("Expected argument 'password' to be a str")
        pulumi.set(__self__, "password", password)
        if private_endpoint and not isinstance(private_endpoint, str):
            raise TypeError("Expected argument 'private_endpoint' to be a str")
        pulumi.set(__self__, "private_endpoint", private_endpoint)
        if protocol and not isinstance(protocol, str):
            raise TypeError("Expected argument 'protocol' to be a str")
        pulumi.set(__self__, "protocol", protocol)
        if public_endpoint and not isinstance(public_endpoint, str):
            raise TypeError("Expected argument 'public_endpoint' to be a str")
        pulumi.set(__self__, "public_endpoint", public_endpoint)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if replica_ofs and not isinstance(replica_ofs, list):
            raise TypeError("Expected argument 'replica_ofs' to be a list")
        pulumi.set(__self__, "replica_ofs", replica_ofs)
        if replication and not isinstance(replication, bool):
            raise TypeError("Expected argument 'replication' to be a bool")
        pulumi.set(__self__, "replication", replication)
        if subscription_id and not isinstance(subscription_id, str):
            raise TypeError("Expected argument 'subscription_id' to be a str")
        pulumi.set(__self__, "subscription_id", subscription_id)
        if support_oss_cluster_api and not isinstance(support_oss_cluster_api, bool):
            raise TypeError("Expected argument 'support_oss_cluster_api' to be a bool")
        pulumi.set(__self__, "support_oss_cluster_api", support_oss_cluster_api)
        if throughput_measurement_by and not isinstance(throughput_measurement_by, str):
            raise TypeError("Expected argument 'throughput_measurement_by' to be a str")
        pulumi.set(__self__, "throughput_measurement_by", throughput_measurement_by)
        if throughput_measurement_value and not isinstance(throughput_measurement_value, int):
            raise TypeError("Expected argument 'throughput_measurement_value' to be a int")
        pulumi.set(__self__, "throughput_measurement_value", throughput_measurement_value)

    @property
    @pulumi.getter
    def alerts(self) -> Sequence['outputs.GetDatabaseAlertResult']:
        """
        Set of alerts to enable on the database, documented below.
        """
        return pulumi.get(self, "alerts")

    @property
    @pulumi.getter(name="dataEviction")
    def data_eviction(self) -> str:
        """
        The data items eviction policy.
        """
        return pulumi.get(self, "data_eviction")

    @property
    @pulumi.getter(name="dataPersistence")
    def data_persistence(self) -> str:
        """
        The rate of database data persistence (in persistent storage).
        """
        return pulumi.get(self, "data_persistence")

    @property
    @pulumi.getter(name="hashingPolicies")
    def hashing_policies(self) -> Sequence[str]:
        """
        The list of regular expression rules the database is sharded by. See
        [the documentation on clustering](https://docs.redislabs.com/latest/rc/concepts/clustering/) for more information on the
        hashing policy.
        """
        return pulumi.get(self, "hashing_policies")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="memoryLimitInGb")
    def memory_limit_in_gb(self) -> float:
        """
        The maximum memory usage for the database.
        """
        return pulumi.get(self, "memory_limit_in_gb")

    @property
    @pulumi.getter
    def modules(self) -> Sequence['outputs.GetDatabaseModuleResult']:
        return pulumi.get(self, "modules")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The alert name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The password used to access the database - not present on `memcached` protocol databases.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="privateEndpoint")
    def private_endpoint(self) -> str:
        """
        Private endpoint to access the database
        """
        return pulumi.get(self, "private_endpoint")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        The protocol of the database.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="publicEndpoint")
    def public_endpoint(self) -> str:
        """
        Public endpoint to access the database
        """
        return pulumi.get(self, "public_endpoint")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="replicaOfs")
    def replica_ofs(self) -> Sequence[str]:
        """
        The set of Redis database URIs, in the format `redis://user:password@host:port`, that this
        database will be a replica of.
        """
        return pulumi.get(self, "replica_ofs")

    @property
    @pulumi.getter
    def replication(self) -> bool:
        """
        Database replication.
        """
        return pulumi.get(self, "replication")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> str:
        return pulumi.get(self, "subscription_id")

    @property
    @pulumi.getter(name="supportOssClusterApi")
    def support_oss_cluster_api(self) -> bool:
        """
        Supports the Redis open-source (OSS) Cluster API.
        """
        return pulumi.get(self, "support_oss_cluster_api")

    @property
    @pulumi.getter(name="throughputMeasurementBy")
    def throughput_measurement_by(self) -> str:
        """
        The throughput measurement method.
        """
        return pulumi.get(self, "throughput_measurement_by")

    @property
    @pulumi.getter(name="throughputMeasurementValue")
    def throughput_measurement_value(self) -> int:
        """
        The throughput value.
        """
        return pulumi.get(self, "throughput_measurement_value")


class AwaitableGetDatabaseResult(GetDatabaseResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDatabaseResult(
            alerts=self.alerts,
            data_eviction=self.data_eviction,
            data_persistence=self.data_persistence,
            hashing_policies=self.hashing_policies,
            id=self.id,
            memory_limit_in_gb=self.memory_limit_in_gb,
            modules=self.modules,
            name=self.name,
            password=self.password,
            private_endpoint=self.private_endpoint,
            protocol=self.protocol,
            public_endpoint=self.public_endpoint,
            region=self.region,
            replica_ofs=self.replica_ofs,
            replication=self.replication,
            subscription_id=self.subscription_id,
            support_oss_cluster_api=self.support_oss_cluster_api,
            throughput_measurement_by=self.throughput_measurement_by,
            throughput_measurement_value=self.throughput_measurement_value)


def get_database(name: Optional[str] = None,
                 protocol: Optional[str] = None,
                 region: Optional[str] = None,
                 subscription_id: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDatabaseResult:
    """
    The Database data source allows access to the details of an existing database within your Redis Enterprise Cloud account.

    ## Example Usage

    The following example shows how to locate a single database within a Subscription.  This example assumes the subscription only contains a single database.

    ```python
    import pulumi
    import pulumi_rediscloud as rediscloud

    example = rediscloud.get_database(subscription_id="1234")
    ```

    The following example shows how to use the name to locate a single database within a subscription that has multiple databases.

    ```python
    import pulumi
    import pulumi_rediscloud as rediscloud

    example = rediscloud.get_database(name="first-database",
        subscription_id="1234")
    ```


    :param str name: The name of the database to filter returned databases
    :param str protocol: The protocol of the database to filter returned databases
    :param str region: The region of the database to filter returned databases
    :param str subscription_id: ID of the subscription that the database belongs to
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['protocol'] = protocol
    __args__['region'] = region
    __args__['subscriptionId'] = subscription_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('rediscloud:index/getDatabase:getDatabase', __args__, opts=opts, typ=GetDatabaseResult).value

    return AwaitableGetDatabaseResult(
        alerts=pulumi.get(__ret__, 'alerts'),
        data_eviction=pulumi.get(__ret__, 'data_eviction'),
        data_persistence=pulumi.get(__ret__, 'data_persistence'),
        hashing_policies=pulumi.get(__ret__, 'hashing_policies'),
        id=pulumi.get(__ret__, 'id'),
        memory_limit_in_gb=pulumi.get(__ret__, 'memory_limit_in_gb'),
        modules=pulumi.get(__ret__, 'modules'),
        name=pulumi.get(__ret__, 'name'),
        password=pulumi.get(__ret__, 'password'),
        private_endpoint=pulumi.get(__ret__, 'private_endpoint'),
        protocol=pulumi.get(__ret__, 'protocol'),
        public_endpoint=pulumi.get(__ret__, 'public_endpoint'),
        region=pulumi.get(__ret__, 'region'),
        replica_ofs=pulumi.get(__ret__, 'replica_ofs'),
        replication=pulumi.get(__ret__, 'replication'),
        subscription_id=pulumi.get(__ret__, 'subscription_id'),
        support_oss_cluster_api=pulumi.get(__ret__, 'support_oss_cluster_api'),
        throughput_measurement_by=pulumi.get(__ret__, 'throughput_measurement_by'),
        throughput_measurement_value=pulumi.get(__ret__, 'throughput_measurement_value'))


@_utilities.lift_output_func(get_database)
def get_database_output(name: Optional[pulumi.Input[Optional[str]]] = None,
                        protocol: Optional[pulumi.Input[Optional[str]]] = None,
                        region: Optional[pulumi.Input[Optional[str]]] = None,
                        subscription_id: Optional[pulumi.Input[str]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDatabaseResult]:
    """
    The Database data source allows access to the details of an existing database within your Redis Enterprise Cloud account.

    ## Example Usage

    The following example shows how to locate a single database within a Subscription.  This example assumes the subscription only contains a single database.

    ```python
    import pulumi
    import pulumi_rediscloud as rediscloud

    example = rediscloud.get_database(subscription_id="1234")
    ```

    The following example shows how to use the name to locate a single database within a subscription that has multiple databases.

    ```python
    import pulumi
    import pulumi_rediscloud as rediscloud

    example = rediscloud.get_database(name="first-database",
        subscription_id="1234")
    ```


    :param str name: The name of the database to filter returned databases
    :param str protocol: The protocol of the database to filter returned databases
    :param str region: The region of the database to filter returned databases
    :param str subscription_id: ID of the subscription that the database belongs to
    """
    ...
