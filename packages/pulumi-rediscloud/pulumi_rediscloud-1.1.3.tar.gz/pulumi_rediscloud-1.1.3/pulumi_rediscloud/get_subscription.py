# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetSubscriptionResult',
    'AwaitableGetSubscriptionResult',
    'get_subscription',
    'get_subscription_output',
]

@pulumi.output_type
class GetSubscriptionResult:
    """
    A collection of values returned by getSubscription.
    """
    def __init__(__self__, cloud_providers=None, id=None, memory_storage=None, name=None, number_of_databases=None, payment_method=None, payment_method_id=None, status=None):
        if cloud_providers and not isinstance(cloud_providers, list):
            raise TypeError("Expected argument 'cloud_providers' to be a list")
        pulumi.set(__self__, "cloud_providers", cloud_providers)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if memory_storage and not isinstance(memory_storage, str):
            raise TypeError("Expected argument 'memory_storage' to be a str")
        pulumi.set(__self__, "memory_storage", memory_storage)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if number_of_databases and not isinstance(number_of_databases, int):
            raise TypeError("Expected argument 'number_of_databases' to be a int")
        pulumi.set(__self__, "number_of_databases", number_of_databases)
        if payment_method and not isinstance(payment_method, str):
            raise TypeError("Expected argument 'payment_method' to be a str")
        pulumi.set(__self__, "payment_method", payment_method)
        if payment_method_id and not isinstance(payment_method_id, str):
            raise TypeError("Expected argument 'payment_method_id' to be a str")
        pulumi.set(__self__, "payment_method_id", payment_method_id)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="cloudProviders")
    def cloud_providers(self) -> Sequence['outputs.GetSubscriptionCloudProviderResult']:
        """
        A cloud provider object, documented below
        """
        return pulumi.get(self, "cloud_providers")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="memoryStorage")
    def memory_storage(self) -> str:
        """
        Memory storage preference: either ‘ram’ or a combination of 'ram-and-flash’
        """
        return pulumi.get(self, "memory_storage")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="numberOfDatabases")
    def number_of_databases(self) -> int:
        """
        The number of databases that are linked to this subscription.
        """
        return pulumi.get(self, "number_of_databases")

    @property
    @pulumi.getter(name="paymentMethod")
    def payment_method(self) -> str:
        return pulumi.get(self, "payment_method")

    @property
    @pulumi.getter(name="paymentMethodId")
    def payment_method_id(self) -> str:
        """
        A valid payment method pre-defined in the current account
        """
        return pulumi.get(self, "payment_method_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Current status of the subscription
        """
        return pulumi.get(self, "status")


class AwaitableGetSubscriptionResult(GetSubscriptionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSubscriptionResult(
            cloud_providers=self.cloud_providers,
            id=self.id,
            memory_storage=self.memory_storage,
            name=self.name,
            number_of_databases=self.number_of_databases,
            payment_method=self.payment_method,
            payment_method_id=self.payment_method_id,
            status=self.status)


def get_subscription(name: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSubscriptionResult:
    """
    The Subscription data source allows access to the details of an existing subscription within your Redis Enterprise Cloud account.

    ## Example Usage

    The following example shows how to use the name attribute to locate a subscription within your Redis Enterprise Cloud account.

    ```python
    import pulumi
    import pulumi_rediscloud as rediscloud

    example = rediscloud.get_subscription(name="My Example Subscription")
    pulumi.export("rediscloudSubscription", example.id)
    ```


    :param str name: The name of the subscription to filter returned subscriptions
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('rediscloud:index/getSubscription:getSubscription', __args__, opts=opts, typ=GetSubscriptionResult).value

    return AwaitableGetSubscriptionResult(
        cloud_providers=pulumi.get(__ret__, 'cloud_providers'),
        id=pulumi.get(__ret__, 'id'),
        memory_storage=pulumi.get(__ret__, 'memory_storage'),
        name=pulumi.get(__ret__, 'name'),
        number_of_databases=pulumi.get(__ret__, 'number_of_databases'),
        payment_method=pulumi.get(__ret__, 'payment_method'),
        payment_method_id=pulumi.get(__ret__, 'payment_method_id'),
        status=pulumi.get(__ret__, 'status'))


@_utilities.lift_output_func(get_subscription)
def get_subscription_output(name: Optional[pulumi.Input[Optional[str]]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSubscriptionResult]:
    """
    The Subscription data source allows access to the details of an existing subscription within your Redis Enterprise Cloud account.

    ## Example Usage

    The following example shows how to use the name attribute to locate a subscription within your Redis Enterprise Cloud account.

    ```python
    import pulumi
    import pulumi_rediscloud as rediscloud

    example = rediscloud.get_subscription(name="My Example Subscription")
    pulumi.export("rediscloudSubscription", example.id)
    ```


    :param str name: The name of the subscription to filter returned subscriptions
    """
    ...
