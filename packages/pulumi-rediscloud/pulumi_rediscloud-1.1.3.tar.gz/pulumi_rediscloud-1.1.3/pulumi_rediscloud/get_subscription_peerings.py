# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetSubscriptionPeeringsResult',
    'AwaitableGetSubscriptionPeeringsResult',
    'get_subscription_peerings',
    'get_subscription_peerings_output',
]

@pulumi.output_type
class GetSubscriptionPeeringsResult:
    """
    A collection of values returned by getSubscriptionPeerings.
    """
    def __init__(__self__, id=None, peerings=None, status=None, subscription_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if peerings and not isinstance(peerings, list):
            raise TypeError("Expected argument 'peerings' to be a list")
        pulumi.set(__self__, "peerings", peerings)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if subscription_id and not isinstance(subscription_id, str):
            raise TypeError("Expected argument 'subscription_id' to be a str")
        pulumi.set(__self__, "subscription_id", subscription_id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def peerings(self) -> Sequence['outputs.GetSubscriptionPeeringsPeeringResult']:
        """
        A list of subscription peerings.
        """
        return pulumi.get(self, "peerings")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        Current status of the peering - `initiating-request`, `pending-acceptance`, `active`, `inactive` or `failed`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> str:
        return pulumi.get(self, "subscription_id")


class AwaitableGetSubscriptionPeeringsResult(GetSubscriptionPeeringsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSubscriptionPeeringsResult(
            id=self.id,
            peerings=self.peerings,
            status=self.status,
            subscription_id=self.subscription_id)


def get_subscription_peerings(status: Optional[str] = None,
                              subscription_id: Optional[str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSubscriptionPeeringsResult:
    """
    The Subscription Peerings data source allows access to a list of VPC peerings for a particular subscription.

    ## Example Usage

    The following example returns a list of all VPC peering within a Subscription.

    ```python
    import pulumi
    import pulumi_rediscloud as rediscloud

    example = rediscloud.get_subscription_peerings(subscription_id="1234")
    pulumi.export("rediscloudSubscriptionPeerings", example.peerings)
    ```


    :param str status: Current status of the peering - `initiating-request`, `pending-acceptance`, `active`, `inactive` or `failed`.
    :param str subscription_id: ID of the subscription that the peerings belongs to
    """
    __args__ = dict()
    __args__['status'] = status
    __args__['subscriptionId'] = subscription_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('rediscloud:index/getSubscriptionPeerings:getSubscriptionPeerings', __args__, opts=opts, typ=GetSubscriptionPeeringsResult).value

    return AwaitableGetSubscriptionPeeringsResult(
        id=pulumi.get(__ret__, 'id'),
        peerings=pulumi.get(__ret__, 'peerings'),
        status=pulumi.get(__ret__, 'status'),
        subscription_id=pulumi.get(__ret__, 'subscription_id'))


@_utilities.lift_output_func(get_subscription_peerings)
def get_subscription_peerings_output(status: Optional[pulumi.Input[Optional[str]]] = None,
                                     subscription_id: Optional[pulumi.Input[str]] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSubscriptionPeeringsResult]:
    """
    The Subscription Peerings data source allows access to a list of VPC peerings for a particular subscription.

    ## Example Usage

    The following example returns a list of all VPC peering within a Subscription.

    ```python
    import pulumi
    import pulumi_rediscloud as rediscloud

    example = rediscloud.get_subscription_peerings(subscription_id="1234")
    pulumi.export("rediscloudSubscriptionPeerings", example.peerings)
    ```


    :param str status: Current status of the peering - `initiating-request`, `pending-acceptance`, `active`, `inactive` or `failed`.
    :param str subscription_id: ID of the subscription that the peerings belongs to
    """
    ...
