# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SubscriptionArgs', 'Subscription']

@pulumi.input_type
class SubscriptionArgs:
    def __init__(__self__, *,
                 cloud_provider: pulumi.Input['SubscriptionCloudProviderArgs'],
                 allowlist: Optional[pulumi.Input['SubscriptionAllowlistArgs']] = None,
                 creation_plan: Optional[pulumi.Input['SubscriptionCreationPlanArgs']] = None,
                 memory_storage: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 payment_method: Optional[pulumi.Input[str]] = None,
                 payment_method_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Subscription resource.
        :param pulumi.Input['SubscriptionCloudProviderArgs'] cloud_provider: A cloud provider object, documented below. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input['SubscriptionAllowlistArgs'] allowlist: An allowlist object, documented below
        :param pulumi.Input['SubscriptionCreationPlanArgs'] creation_plan: A creation plan object, documented below
        :param pulumi.Input[str] memory_storage: Memory storage preference: either ‘ram’ or a combination of ‘ram-and-flash’. Default: ‘ram’. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[str] name: A meaningful name to identify the subscription
        :param pulumi.Input[str] payment_method: The payment method for the requested subscription, (either `credit-card` or `marketplace`). If `credit-card` is specified, `payment_method_id` must be defined. Default: 'credit-card'. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[str] payment_method_id: A valid payment method pre-defined in the current account. This value is __Optional__ for AWS/GCP Marketplace accounts, but __Required__ for all other account types
        """
        pulumi.set(__self__, "cloud_provider", cloud_provider)
        if allowlist is not None:
            pulumi.set(__self__, "allowlist", allowlist)
        if creation_plan is not None:
            pulumi.set(__self__, "creation_plan", creation_plan)
        if memory_storage is not None:
            pulumi.set(__self__, "memory_storage", memory_storage)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if payment_method is not None:
            pulumi.set(__self__, "payment_method", payment_method)
        if payment_method_id is not None:
            pulumi.set(__self__, "payment_method_id", payment_method_id)

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> pulumi.Input['SubscriptionCloudProviderArgs']:
        """
        A cloud provider object, documented below. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "cloud_provider")

    @cloud_provider.setter
    def cloud_provider(self, value: pulumi.Input['SubscriptionCloudProviderArgs']):
        pulumi.set(self, "cloud_provider", value)

    @property
    @pulumi.getter
    def allowlist(self) -> Optional[pulumi.Input['SubscriptionAllowlistArgs']]:
        """
        An allowlist object, documented below
        """
        return pulumi.get(self, "allowlist")

    @allowlist.setter
    def allowlist(self, value: Optional[pulumi.Input['SubscriptionAllowlistArgs']]):
        pulumi.set(self, "allowlist", value)

    @property
    @pulumi.getter(name="creationPlan")
    def creation_plan(self) -> Optional[pulumi.Input['SubscriptionCreationPlanArgs']]:
        """
        A creation plan object, documented below
        """
        return pulumi.get(self, "creation_plan")

    @creation_plan.setter
    def creation_plan(self, value: Optional[pulumi.Input['SubscriptionCreationPlanArgs']]):
        pulumi.set(self, "creation_plan", value)

    @property
    @pulumi.getter(name="memoryStorage")
    def memory_storage(self) -> Optional[pulumi.Input[str]]:
        """
        Memory storage preference: either ‘ram’ or a combination of ‘ram-and-flash’. Default: ‘ram’. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "memory_storage")

    @memory_storage.setter
    def memory_storage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory_storage", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A meaningful name to identify the subscription
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="paymentMethod")
    def payment_method(self) -> Optional[pulumi.Input[str]]:
        """
        The payment method for the requested subscription, (either `credit-card` or `marketplace`). If `credit-card` is specified, `payment_method_id` must be defined. Default: 'credit-card'. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "payment_method")

    @payment_method.setter
    def payment_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "payment_method", value)

    @property
    @pulumi.getter(name="paymentMethodId")
    def payment_method_id(self) -> Optional[pulumi.Input[str]]:
        """
        A valid payment method pre-defined in the current account. This value is __Optional__ for AWS/GCP Marketplace accounts, but __Required__ for all other account types
        """
        return pulumi.get(self, "payment_method_id")

    @payment_method_id.setter
    def payment_method_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "payment_method_id", value)


@pulumi.input_type
class _SubscriptionState:
    def __init__(__self__, *,
                 allowlist: Optional[pulumi.Input['SubscriptionAllowlistArgs']] = None,
                 cloud_provider: Optional[pulumi.Input['SubscriptionCloudProviderArgs']] = None,
                 creation_plan: Optional[pulumi.Input['SubscriptionCreationPlanArgs']] = None,
                 memory_storage: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 payment_method: Optional[pulumi.Input[str]] = None,
                 payment_method_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Subscription resources.
        :param pulumi.Input['SubscriptionAllowlistArgs'] allowlist: An allowlist object, documented below
        :param pulumi.Input['SubscriptionCloudProviderArgs'] cloud_provider: A cloud provider object, documented below. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input['SubscriptionCreationPlanArgs'] creation_plan: A creation plan object, documented below
        :param pulumi.Input[str] memory_storage: Memory storage preference: either ‘ram’ or a combination of ‘ram-and-flash’. Default: ‘ram’. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[str] name: A meaningful name to identify the subscription
        :param pulumi.Input[str] payment_method: The payment method for the requested subscription, (either `credit-card` or `marketplace`). If `credit-card` is specified, `payment_method_id` must be defined. Default: 'credit-card'. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[str] payment_method_id: A valid payment method pre-defined in the current account. This value is __Optional__ for AWS/GCP Marketplace accounts, but __Required__ for all other account types
        """
        if allowlist is not None:
            pulumi.set(__self__, "allowlist", allowlist)
        if cloud_provider is not None:
            pulumi.set(__self__, "cloud_provider", cloud_provider)
        if creation_plan is not None:
            pulumi.set(__self__, "creation_plan", creation_plan)
        if memory_storage is not None:
            pulumi.set(__self__, "memory_storage", memory_storage)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if payment_method is not None:
            pulumi.set(__self__, "payment_method", payment_method)
        if payment_method_id is not None:
            pulumi.set(__self__, "payment_method_id", payment_method_id)

    @property
    @pulumi.getter
    def allowlist(self) -> Optional[pulumi.Input['SubscriptionAllowlistArgs']]:
        """
        An allowlist object, documented below
        """
        return pulumi.get(self, "allowlist")

    @allowlist.setter
    def allowlist(self, value: Optional[pulumi.Input['SubscriptionAllowlistArgs']]):
        pulumi.set(self, "allowlist", value)

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> Optional[pulumi.Input['SubscriptionCloudProviderArgs']]:
        """
        A cloud provider object, documented below. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "cloud_provider")

    @cloud_provider.setter
    def cloud_provider(self, value: Optional[pulumi.Input['SubscriptionCloudProviderArgs']]):
        pulumi.set(self, "cloud_provider", value)

    @property
    @pulumi.getter(name="creationPlan")
    def creation_plan(self) -> Optional[pulumi.Input['SubscriptionCreationPlanArgs']]:
        """
        A creation plan object, documented below
        """
        return pulumi.get(self, "creation_plan")

    @creation_plan.setter
    def creation_plan(self, value: Optional[pulumi.Input['SubscriptionCreationPlanArgs']]):
        pulumi.set(self, "creation_plan", value)

    @property
    @pulumi.getter(name="memoryStorage")
    def memory_storage(self) -> Optional[pulumi.Input[str]]:
        """
        Memory storage preference: either ‘ram’ or a combination of ‘ram-and-flash’. Default: ‘ram’. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "memory_storage")

    @memory_storage.setter
    def memory_storage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory_storage", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A meaningful name to identify the subscription
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="paymentMethod")
    def payment_method(self) -> Optional[pulumi.Input[str]]:
        """
        The payment method for the requested subscription, (either `credit-card` or `marketplace`). If `credit-card` is specified, `payment_method_id` must be defined. Default: 'credit-card'. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "payment_method")

    @payment_method.setter
    def payment_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "payment_method", value)

    @property
    @pulumi.getter(name="paymentMethodId")
    def payment_method_id(self) -> Optional[pulumi.Input[str]]:
        """
        A valid payment method pre-defined in the current account. This value is __Optional__ for AWS/GCP Marketplace accounts, but __Required__ for all other account types
        """
        return pulumi.get(self, "payment_method_id")

    @payment_method_id.setter
    def payment_method_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "payment_method_id", value)


class Subscription(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allowlist: Optional[pulumi.Input[pulumi.InputType['SubscriptionAllowlistArgs']]] = None,
                 cloud_provider: Optional[pulumi.Input[pulumi.InputType['SubscriptionCloudProviderArgs']]] = None,
                 creation_plan: Optional[pulumi.Input[pulumi.InputType['SubscriptionCreationPlanArgs']]] = None,
                 memory_storage: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 payment_method: Optional[pulumi.Input[str]] = None,
                 payment_method_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_rediscloud as rediscloud

        card = rediscloud.get_payment_method(card_type="Visa")
        subscription_resource = rediscloud.Subscription("subscription-resource",
            payment_method="credit-card",
            payment_method_id=card.id,
            memory_storage="ram",
            cloud_provider=rediscloud.SubscriptionCloudProviderArgs(
                provider=data["rediscloud_cloud_account"]["account"]["provider_type"],
                regions=[rediscloud.SubscriptionCloudProviderRegionArgs(
                    region="eu-west-1",
                    multiple_availability_zones=True,
                    networking_deployment_cidr="10.0.0.0/24",
                    preferred_availability_zones=["euw1-az1, euw1-az2, euw1-az3"],
                )],
            ),
            creation_plan=rediscloud.SubscriptionCreationPlanArgs(
                memory_limit_in_gb=15,
                quantity=1,
                replication=True,
                throughput_measurement_by="operations-per-second",
                throughput_measurement_value=20000,
                modules=["RedisJSON"],
            ))
        ```

        ## Import

        `rediscloud_subscription` can be imported using the ID of the subscription, e.g.

        ```sh
         $ pulumi import rediscloud:index/subscription:Subscription subscription-resource 12345678
        ```
         ~> __Note:__ the creation_plan block will be ignored during imports.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['SubscriptionAllowlistArgs']] allowlist: An allowlist object, documented below
        :param pulumi.Input[pulumi.InputType['SubscriptionCloudProviderArgs']] cloud_provider: A cloud provider object, documented below. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[pulumi.InputType['SubscriptionCreationPlanArgs']] creation_plan: A creation plan object, documented below
        :param pulumi.Input[str] memory_storage: Memory storage preference: either ‘ram’ or a combination of ‘ram-and-flash’. Default: ‘ram’. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[str] name: A meaningful name to identify the subscription
        :param pulumi.Input[str] payment_method: The payment method for the requested subscription, (either `credit-card` or `marketplace`). If `credit-card` is specified, `payment_method_id` must be defined. Default: 'credit-card'. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[str] payment_method_id: A valid payment method pre-defined in the current account. This value is __Optional__ for AWS/GCP Marketplace accounts, but __Required__ for all other account types
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SubscriptionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ```python
        import pulumi
        import pulumi_rediscloud as rediscloud

        card = rediscloud.get_payment_method(card_type="Visa")
        subscription_resource = rediscloud.Subscription("subscription-resource",
            payment_method="credit-card",
            payment_method_id=card.id,
            memory_storage="ram",
            cloud_provider=rediscloud.SubscriptionCloudProviderArgs(
                provider=data["rediscloud_cloud_account"]["account"]["provider_type"],
                regions=[rediscloud.SubscriptionCloudProviderRegionArgs(
                    region="eu-west-1",
                    multiple_availability_zones=True,
                    networking_deployment_cidr="10.0.0.0/24",
                    preferred_availability_zones=["euw1-az1, euw1-az2, euw1-az3"],
                )],
            ),
            creation_plan=rediscloud.SubscriptionCreationPlanArgs(
                memory_limit_in_gb=15,
                quantity=1,
                replication=True,
                throughput_measurement_by="operations-per-second",
                throughput_measurement_value=20000,
                modules=["RedisJSON"],
            ))
        ```

        ## Import

        `rediscloud_subscription` can be imported using the ID of the subscription, e.g.

        ```sh
         $ pulumi import rediscloud:index/subscription:Subscription subscription-resource 12345678
        ```
         ~> __Note:__ the creation_plan block will be ignored during imports.

        :param str resource_name: The name of the resource.
        :param SubscriptionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SubscriptionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allowlist: Optional[pulumi.Input[pulumi.InputType['SubscriptionAllowlistArgs']]] = None,
                 cloud_provider: Optional[pulumi.Input[pulumi.InputType['SubscriptionCloudProviderArgs']]] = None,
                 creation_plan: Optional[pulumi.Input[pulumi.InputType['SubscriptionCreationPlanArgs']]] = None,
                 memory_storage: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 payment_method: Optional[pulumi.Input[str]] = None,
                 payment_method_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SubscriptionArgs.__new__(SubscriptionArgs)

            __props__.__dict__["allowlist"] = allowlist
            if cloud_provider is None and not opts.urn:
                raise TypeError("Missing required property 'cloud_provider'")
            __props__.__dict__["cloud_provider"] = cloud_provider
            __props__.__dict__["creation_plan"] = creation_plan
            __props__.__dict__["memory_storage"] = memory_storage
            __props__.__dict__["name"] = name
            __props__.__dict__["payment_method"] = payment_method
            __props__.__dict__["payment_method_id"] = payment_method_id
        super(Subscription, __self__).__init__(
            'rediscloud:index/subscription:Subscription',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allowlist: Optional[pulumi.Input[pulumi.InputType['SubscriptionAllowlistArgs']]] = None,
            cloud_provider: Optional[pulumi.Input[pulumi.InputType['SubscriptionCloudProviderArgs']]] = None,
            creation_plan: Optional[pulumi.Input[pulumi.InputType['SubscriptionCreationPlanArgs']]] = None,
            memory_storage: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            payment_method: Optional[pulumi.Input[str]] = None,
            payment_method_id: Optional[pulumi.Input[str]] = None) -> 'Subscription':
        """
        Get an existing Subscription resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['SubscriptionAllowlistArgs']] allowlist: An allowlist object, documented below
        :param pulumi.Input[pulumi.InputType['SubscriptionCloudProviderArgs']] cloud_provider: A cloud provider object, documented below. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[pulumi.InputType['SubscriptionCreationPlanArgs']] creation_plan: A creation plan object, documented below
        :param pulumi.Input[str] memory_storage: Memory storage preference: either ‘ram’ or a combination of ‘ram-and-flash’. Default: ‘ram’. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[str] name: A meaningful name to identify the subscription
        :param pulumi.Input[str] payment_method: The payment method for the requested subscription, (either `credit-card` or `marketplace`). If `credit-card` is specified, `payment_method_id` must be defined. Default: 'credit-card'. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[str] payment_method_id: A valid payment method pre-defined in the current account. This value is __Optional__ for AWS/GCP Marketplace accounts, but __Required__ for all other account types
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SubscriptionState.__new__(_SubscriptionState)

        __props__.__dict__["allowlist"] = allowlist
        __props__.__dict__["cloud_provider"] = cloud_provider
        __props__.__dict__["creation_plan"] = creation_plan
        __props__.__dict__["memory_storage"] = memory_storage
        __props__.__dict__["name"] = name
        __props__.__dict__["payment_method"] = payment_method
        __props__.__dict__["payment_method_id"] = payment_method_id
        return Subscription(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def allowlist(self) -> pulumi.Output[Optional['outputs.SubscriptionAllowlist']]:
        """
        An allowlist object, documented below
        """
        return pulumi.get(self, "allowlist")

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> pulumi.Output['outputs.SubscriptionCloudProvider']:
        """
        A cloud provider object, documented below. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "cloud_provider")

    @property
    @pulumi.getter(name="creationPlan")
    def creation_plan(self) -> pulumi.Output[Optional['outputs.SubscriptionCreationPlan']]:
        """
        A creation plan object, documented below
        """
        return pulumi.get(self, "creation_plan")

    @property
    @pulumi.getter(name="memoryStorage")
    def memory_storage(self) -> pulumi.Output[Optional[str]]:
        """
        Memory storage preference: either ‘ram’ or a combination of ‘ram-and-flash’. Default: ‘ram’. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "memory_storage")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        A meaningful name to identify the subscription
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="paymentMethod")
    def payment_method(self) -> pulumi.Output[Optional[str]]:
        """
        The payment method for the requested subscription, (either `credit-card` or `marketplace`). If `credit-card` is specified, `payment_method_id` must be defined. Default: 'credit-card'. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "payment_method")

    @property
    @pulumi.getter(name="paymentMethodId")
    def payment_method_id(self) -> pulumi.Output[str]:
        """
        A valid payment method pre-defined in the current account. This value is __Optional__ for AWS/GCP Marketplace accounts, but __Required__ for all other account types
        """
        return pulumi.get(self, "payment_method_id")

