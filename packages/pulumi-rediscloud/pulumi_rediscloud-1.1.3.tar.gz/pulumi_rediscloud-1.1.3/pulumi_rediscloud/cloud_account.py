# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['CloudAccountArgs', 'CloudAccount']

@pulumi.input_type
class CloudAccountArgs:
    def __init__(__self__, *,
                 access_key_id: pulumi.Input[str],
                 access_secret_key: pulumi.Input[str],
                 console_password: pulumi.Input[str],
                 console_username: pulumi.Input[str],
                 provider_type: pulumi.Input[str],
                 sign_in_login_url: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a CloudAccount resource.
        :param pulumi.Input[str] access_key_id: Cloud provider access key.
        :param pulumi.Input[str] access_secret_key: Cloud provider secret key.
               Note that drift cannot currently be detected for this.
        :param pulumi.Input[str] console_password: Cloud provider management console password.
               Note that drift cannot currently be detected for this.
        :param pulumi.Input[str] console_username: Cloud provider management console username.
               Note that drift cannot currently be detected for this.
        :param pulumi.Input[str] provider_type: Cloud provider type - either `AWS` or `GCP`.
               Note that drift cannot currently be detected for this. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[str] sign_in_login_url: Cloud provider management console login URL.
               Note that drift cannot currently be detected for this.
        :param pulumi.Input[str] name: Display name of the account.
        """
        pulumi.set(__self__, "access_key_id", access_key_id)
        pulumi.set(__self__, "access_secret_key", access_secret_key)
        pulumi.set(__self__, "console_password", console_password)
        pulumi.set(__self__, "console_username", console_username)
        pulumi.set(__self__, "provider_type", provider_type)
        pulumi.set(__self__, "sign_in_login_url", sign_in_login_url)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> pulumi.Input[str]:
        """
        Cloud provider access key.
        """
        return pulumi.get(self, "access_key_id")

    @access_key_id.setter
    def access_key_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_key_id", value)

    @property
    @pulumi.getter(name="accessSecretKey")
    def access_secret_key(self) -> pulumi.Input[str]:
        """
        Cloud provider secret key.
        Note that drift cannot currently be detected for this.
        """
        return pulumi.get(self, "access_secret_key")

    @access_secret_key.setter
    def access_secret_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_secret_key", value)

    @property
    @pulumi.getter(name="consolePassword")
    def console_password(self) -> pulumi.Input[str]:
        """
        Cloud provider management console password.
        Note that drift cannot currently be detected for this.
        """
        return pulumi.get(self, "console_password")

    @console_password.setter
    def console_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "console_password", value)

    @property
    @pulumi.getter(name="consoleUsername")
    def console_username(self) -> pulumi.Input[str]:
        """
        Cloud provider management console username.
        Note that drift cannot currently be detected for this.
        """
        return pulumi.get(self, "console_username")

    @console_username.setter
    def console_username(self, value: pulumi.Input[str]):
        pulumi.set(self, "console_username", value)

    @property
    @pulumi.getter(name="providerType")
    def provider_type(self) -> pulumi.Input[str]:
        """
        Cloud provider type - either `AWS` or `GCP`.
        Note that drift cannot currently be detected for this. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "provider_type")

    @provider_type.setter
    def provider_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "provider_type", value)

    @property
    @pulumi.getter(name="signInLoginUrl")
    def sign_in_login_url(self) -> pulumi.Input[str]:
        """
        Cloud provider management console login URL.
        Note that drift cannot currently be detected for this.
        """
        return pulumi.get(self, "sign_in_login_url")

    @sign_in_login_url.setter
    def sign_in_login_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "sign_in_login_url", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Display name of the account.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _CloudAccountState:
    def __init__(__self__, *,
                 access_key_id: Optional[pulumi.Input[str]] = None,
                 access_secret_key: Optional[pulumi.Input[str]] = None,
                 console_password: Optional[pulumi.Input[str]] = None,
                 console_username: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 provider_type: Optional[pulumi.Input[str]] = None,
                 sign_in_login_url: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering CloudAccount resources.
        :param pulumi.Input[str] access_key_id: Cloud provider access key.
        :param pulumi.Input[str] access_secret_key: Cloud provider secret key.
               Note that drift cannot currently be detected for this.
        :param pulumi.Input[str] console_password: Cloud provider management console password.
               Note that drift cannot currently be detected for this.
        :param pulumi.Input[str] console_username: Cloud provider management console username.
               Note that drift cannot currently be detected for this.
        :param pulumi.Input[str] name: Display name of the account.
        :param pulumi.Input[str] provider_type: Cloud provider type - either `AWS` or `GCP`.
               Note that drift cannot currently be detected for this. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[str] sign_in_login_url: Cloud provider management console login URL.
               Note that drift cannot currently be detected for this.
        :param pulumi.Input[str] status: The current status of the account - `draft`, `pending` or `active`
        """
        if access_key_id is not None:
            pulumi.set(__self__, "access_key_id", access_key_id)
        if access_secret_key is not None:
            pulumi.set(__self__, "access_secret_key", access_secret_key)
        if console_password is not None:
            pulumi.set(__self__, "console_password", console_password)
        if console_username is not None:
            pulumi.set(__self__, "console_username", console_username)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if provider_type is not None:
            pulumi.set(__self__, "provider_type", provider_type)
        if sign_in_login_url is not None:
            pulumi.set(__self__, "sign_in_login_url", sign_in_login_url)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        Cloud provider access key.
        """
        return pulumi.get(self, "access_key_id")

    @access_key_id.setter
    def access_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key_id", value)

    @property
    @pulumi.getter(name="accessSecretKey")
    def access_secret_key(self) -> Optional[pulumi.Input[str]]:
        """
        Cloud provider secret key.
        Note that drift cannot currently be detected for this.
        """
        return pulumi.get(self, "access_secret_key")

    @access_secret_key.setter
    def access_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_secret_key", value)

    @property
    @pulumi.getter(name="consolePassword")
    def console_password(self) -> Optional[pulumi.Input[str]]:
        """
        Cloud provider management console password.
        Note that drift cannot currently be detected for this.
        """
        return pulumi.get(self, "console_password")

    @console_password.setter
    def console_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "console_password", value)

    @property
    @pulumi.getter(name="consoleUsername")
    def console_username(self) -> Optional[pulumi.Input[str]]:
        """
        Cloud provider management console username.
        Note that drift cannot currently be detected for this.
        """
        return pulumi.get(self, "console_username")

    @console_username.setter
    def console_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "console_username", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Display name of the account.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="providerType")
    def provider_type(self) -> Optional[pulumi.Input[str]]:
        """
        Cloud provider type - either `AWS` or `GCP`.
        Note that drift cannot currently be detected for this. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "provider_type")

    @provider_type.setter
    def provider_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider_type", value)

    @property
    @pulumi.getter(name="signInLoginUrl")
    def sign_in_login_url(self) -> Optional[pulumi.Input[str]]:
        """
        Cloud provider management console login URL.
        Note that drift cannot currently be detected for this.
        """
        return pulumi.get(self, "sign_in_login_url")

    @sign_in_login_url.setter
    def sign_in_login_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sign_in_login_url", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The current status of the account - `draft`, `pending` or `active`
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


class CloudAccount(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_key_id: Optional[pulumi.Input[str]] = None,
                 access_secret_key: Optional[pulumi.Input[str]] = None,
                 console_password: Optional[pulumi.Input[str]] = None,
                 console_username: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 provider_type: Optional[pulumi.Input[str]] = None,
                 sign_in_login_url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Creates a Cloud Account resource representing the access credentials to a cloud provider account, (`AWS`).
        Redis Enterprise Cloud uses these credentials to provision databases within your infrastructure.

        ## Example Usage

        The following example defines a new AWS Cloud Account that is then used with a Subscription.

        ```python
        import pulumi
        import pulumi_rediscloud as rediscloud

        example_cloud_account = rediscloud.CloudAccount("exampleCloudAccount",
            access_key_id="abcdefg",
            access_secret_key="9876543",
            console_username="username",
            console_password="password",
            provider_type="AWS",
            sign_in_login_url="https://1234567890.signin.aws.amazon.com/console")
        example_subscription = rediscloud.Subscription("exampleSubscription",
            payment_method_id=data["rediscloud_payment_method"]["card"]["id"],
            memory_storage="ram",
            cloud_provider=rediscloud.SubscriptionCloudProviderArgs(
                provider=example_cloud_account.provider_type,
                cloud_account_id=example_cloud_account.id,
            ))
        # ...
        ```

        ## Import

        `rediscloud_cloud_account` can be imported using the ID of the Cloud Account, e.g.

        ```sh
         $ pulumi import rediscloud:index/cloudAccount:CloudAccount example 12345678
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_key_id: Cloud provider access key.
        :param pulumi.Input[str] access_secret_key: Cloud provider secret key.
               Note that drift cannot currently be detected for this.
        :param pulumi.Input[str] console_password: Cloud provider management console password.
               Note that drift cannot currently be detected for this.
        :param pulumi.Input[str] console_username: Cloud provider management console username.
               Note that drift cannot currently be detected for this.
        :param pulumi.Input[str] name: Display name of the account.
        :param pulumi.Input[str] provider_type: Cloud provider type - either `AWS` or `GCP`.
               Note that drift cannot currently be detected for this. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[str] sign_in_login_url: Cloud provider management console login URL.
               Note that drift cannot currently be detected for this.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CloudAccountArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a Cloud Account resource representing the access credentials to a cloud provider account, (`AWS`).
        Redis Enterprise Cloud uses these credentials to provision databases within your infrastructure.

        ## Example Usage

        The following example defines a new AWS Cloud Account that is then used with a Subscription.

        ```python
        import pulumi
        import pulumi_rediscloud as rediscloud

        example_cloud_account = rediscloud.CloudAccount("exampleCloudAccount",
            access_key_id="abcdefg",
            access_secret_key="9876543",
            console_username="username",
            console_password="password",
            provider_type="AWS",
            sign_in_login_url="https://1234567890.signin.aws.amazon.com/console")
        example_subscription = rediscloud.Subscription("exampleSubscription",
            payment_method_id=data["rediscloud_payment_method"]["card"]["id"],
            memory_storage="ram",
            cloud_provider=rediscloud.SubscriptionCloudProviderArgs(
                provider=example_cloud_account.provider_type,
                cloud_account_id=example_cloud_account.id,
            ))
        # ...
        ```

        ## Import

        `rediscloud_cloud_account` can be imported using the ID of the Cloud Account, e.g.

        ```sh
         $ pulumi import rediscloud:index/cloudAccount:CloudAccount example 12345678
        ```

        :param str resource_name: The name of the resource.
        :param CloudAccountArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CloudAccountArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_key_id: Optional[pulumi.Input[str]] = None,
                 access_secret_key: Optional[pulumi.Input[str]] = None,
                 console_password: Optional[pulumi.Input[str]] = None,
                 console_username: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 provider_type: Optional[pulumi.Input[str]] = None,
                 sign_in_login_url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CloudAccountArgs.__new__(CloudAccountArgs)

            if access_key_id is None and not opts.urn:
                raise TypeError("Missing required property 'access_key_id'")
            __props__.__dict__["access_key_id"] = access_key_id
            if access_secret_key is None and not opts.urn:
                raise TypeError("Missing required property 'access_secret_key'")
            __props__.__dict__["access_secret_key"] = None if access_secret_key is None else pulumi.Output.secret(access_secret_key)
            if console_password is None and not opts.urn:
                raise TypeError("Missing required property 'console_password'")
            __props__.__dict__["console_password"] = None if console_password is None else pulumi.Output.secret(console_password)
            if console_username is None and not opts.urn:
                raise TypeError("Missing required property 'console_username'")
            __props__.__dict__["console_username"] = console_username
            __props__.__dict__["name"] = name
            if provider_type is None and not opts.urn:
                raise TypeError("Missing required property 'provider_type'")
            __props__.__dict__["provider_type"] = provider_type
            if sign_in_login_url is None and not opts.urn:
                raise TypeError("Missing required property 'sign_in_login_url'")
            __props__.__dict__["sign_in_login_url"] = sign_in_login_url
            __props__.__dict__["status"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["accessSecretKey", "consolePassword"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(CloudAccount, __self__).__init__(
            'rediscloud:index/cloudAccount:CloudAccount',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_key_id: Optional[pulumi.Input[str]] = None,
            access_secret_key: Optional[pulumi.Input[str]] = None,
            console_password: Optional[pulumi.Input[str]] = None,
            console_username: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            provider_type: Optional[pulumi.Input[str]] = None,
            sign_in_login_url: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None) -> 'CloudAccount':
        """
        Get an existing CloudAccount resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_key_id: Cloud provider access key.
        :param pulumi.Input[str] access_secret_key: Cloud provider secret key.
               Note that drift cannot currently be detected for this.
        :param pulumi.Input[str] console_password: Cloud provider management console password.
               Note that drift cannot currently be detected for this.
        :param pulumi.Input[str] console_username: Cloud provider management console username.
               Note that drift cannot currently be detected for this.
        :param pulumi.Input[str] name: Display name of the account.
        :param pulumi.Input[str] provider_type: Cloud provider type - either `AWS` or `GCP`.
               Note that drift cannot currently be detected for this. **Modifying this attribute will force creation of a new resource.**
        :param pulumi.Input[str] sign_in_login_url: Cloud provider management console login URL.
               Note that drift cannot currently be detected for this.
        :param pulumi.Input[str] status: The current status of the account - `draft`, `pending` or `active`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CloudAccountState.__new__(_CloudAccountState)

        __props__.__dict__["access_key_id"] = access_key_id
        __props__.__dict__["access_secret_key"] = access_secret_key
        __props__.__dict__["console_password"] = console_password
        __props__.__dict__["console_username"] = console_username
        __props__.__dict__["name"] = name
        __props__.__dict__["provider_type"] = provider_type
        __props__.__dict__["sign_in_login_url"] = sign_in_login_url
        __props__.__dict__["status"] = status
        return CloudAccount(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> pulumi.Output[str]:
        """
        Cloud provider access key.
        """
        return pulumi.get(self, "access_key_id")

    @property
    @pulumi.getter(name="accessSecretKey")
    def access_secret_key(self) -> pulumi.Output[str]:
        """
        Cloud provider secret key.
        Note that drift cannot currently be detected for this.
        """
        return pulumi.get(self, "access_secret_key")

    @property
    @pulumi.getter(name="consolePassword")
    def console_password(self) -> pulumi.Output[str]:
        """
        Cloud provider management console password.
        Note that drift cannot currently be detected for this.
        """
        return pulumi.get(self, "console_password")

    @property
    @pulumi.getter(name="consoleUsername")
    def console_username(self) -> pulumi.Output[str]:
        """
        Cloud provider management console username.
        Note that drift cannot currently be detected for this.
        """
        return pulumi.get(self, "console_username")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Display name of the account.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="providerType")
    def provider_type(self) -> pulumi.Output[str]:
        """
        Cloud provider type - either `AWS` or `GCP`.
        Note that drift cannot currently be detected for this. **Modifying this attribute will force creation of a new resource.**
        """
        return pulumi.get(self, "provider_type")

    @property
    @pulumi.getter(name="signInLoginUrl")
    def sign_in_login_url(self) -> pulumi.Output[str]:
        """
        Cloud provider management console login URL.
        Note that drift cannot currently be detected for this.
        """
        return pulumi.get(self, "sign_in_login_url")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The current status of the account - `draft`, `pending` or `active`
        """
        return pulumi.get(self, "status")

