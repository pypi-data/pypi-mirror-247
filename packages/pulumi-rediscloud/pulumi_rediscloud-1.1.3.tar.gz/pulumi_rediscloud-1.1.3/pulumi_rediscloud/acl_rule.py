# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['AclRuleArgs', 'AclRule']

@pulumi.input_type
class AclRuleArgs:
    def __init__(__self__, *,
                 rule: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AclRule resource.
        :param pulumi.Input[str] rule: The ACL rule itself, built up as permissions/restrictions written in
               the [ACL Syntax](https://docs.redis.com/latest/rc/security/access-control/data-access-control/configure-acls/#define-permissions-with-acl-syntax).
        :param pulumi.Input[str] name: A meaningful name for the rule. Must be unique.
        """
        pulumi.set(__self__, "rule", rule)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def rule(self) -> pulumi.Input[str]:
        """
        The ACL rule itself, built up as permissions/restrictions written in
        the [ACL Syntax](https://docs.redis.com/latest/rc/security/access-control/data-access-control/configure-acls/#define-permissions-with-acl-syntax).
        """
        return pulumi.get(self, "rule")

    @rule.setter
    def rule(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A meaningful name for the rule. Must be unique.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _AclRuleState:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 rule: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering AclRule resources.
        :param pulumi.Input[str] name: A meaningful name for the rule. Must be unique.
        :param pulumi.Input[str] rule: The ACL rule itself, built up as permissions/restrictions written in
               the [ACL Syntax](https://docs.redis.com/latest/rc/security/access-control/data-access-control/configure-acls/#define-permissions-with-acl-syntax).
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rule is not None:
            pulumi.set(__self__, "rule", rule)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A meaningful name for the rule. Must be unique.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def rule(self) -> Optional[pulumi.Input[str]]:
        """
        The ACL rule itself, built up as permissions/restrictions written in
        the [ACL Syntax](https://docs.redis.com/latest/rc/security/access-control/data-access-control/configure-acls/#define-permissions-with-acl-syntax).
        """
        return pulumi.get(self, "rule")

    @rule.setter
    def rule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rule", value)


class AclRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 rule: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Creates a Rule (a.k.a Redis Rule, Redis ACL) in your Redis Enterprise Cloud Account.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_rediscloud as rediscloud

        rule_resource = rediscloud.AclRule("rule-resource", rule="+@read ~cache:*")
        ```

        ## Import

        `rediscloud_acl_rule` can be imported using the Identifier of the Rule, e.g.

        ```sh
         $ pulumi import rediscloud:index/aclRule:AclRule rule-resource 123456
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: A meaningful name for the rule. Must be unique.
        :param pulumi.Input[str] rule: The ACL rule itself, built up as permissions/restrictions written in
               the [ACL Syntax](https://docs.redis.com/latest/rc/security/access-control/data-access-control/configure-acls/#define-permissions-with-acl-syntax).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AclRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a Rule (a.k.a Redis Rule, Redis ACL) in your Redis Enterprise Cloud Account.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_rediscloud as rediscloud

        rule_resource = rediscloud.AclRule("rule-resource", rule="+@read ~cache:*")
        ```

        ## Import

        `rediscloud_acl_rule` can be imported using the Identifier of the Rule, e.g.

        ```sh
         $ pulumi import rediscloud:index/aclRule:AclRule rule-resource 123456
        ```

        :param str resource_name: The name of the resource.
        :param AclRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AclRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 rule: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AclRuleArgs.__new__(AclRuleArgs)

            __props__.__dict__["name"] = name
            if rule is None and not opts.urn:
                raise TypeError("Missing required property 'rule'")
            __props__.__dict__["rule"] = rule
        super(AclRule, __self__).__init__(
            'rediscloud:index/aclRule:AclRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            name: Optional[pulumi.Input[str]] = None,
            rule: Optional[pulumi.Input[str]] = None) -> 'AclRule':
        """
        Get an existing AclRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: A meaningful name for the rule. Must be unique.
        :param pulumi.Input[str] rule: The ACL rule itself, built up as permissions/restrictions written in
               the [ACL Syntax](https://docs.redis.com/latest/rc/security/access-control/data-access-control/configure-acls/#define-permissions-with-acl-syntax).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AclRuleState.__new__(_AclRuleState)

        __props__.__dict__["name"] = name
        __props__.__dict__["rule"] = rule
        return AclRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        A meaningful name for the rule. Must be unique.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def rule(self) -> pulumi.Output[str]:
        """
        The ACL rule itself, built up as permissions/restrictions written in
        the [ACL Syntax](https://docs.redis.com/latest/rc/security/access-control/data-access-control/configure-acls/#define-permissions-with-acl-syntax).
        """
        return pulumi.get(self, "rule")

