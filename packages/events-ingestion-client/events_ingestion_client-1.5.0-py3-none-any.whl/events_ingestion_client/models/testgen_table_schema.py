# coding: utf-8

"""
    Event Ingestion API

    Event Ingestion API client for DataKitchenâ€™s DataOps Observability  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@datakitchen.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TestgenTableSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'include_list': 'list[str]',
        'include_pattern': 'str',
        'exclude_pattern': 'str'
    }

    attribute_map = {
        'include_list': 'include_list',
        'include_pattern': 'include_pattern',
        'exclude_pattern': 'exclude_pattern'
    }

    def __init__(self, include_list=None, include_pattern=None, exclude_pattern=None):  # noqa: E501
        """TestgenTableSchema - a model defined in Swagger"""  # noqa: E501
        self._include_list = None
        self._include_pattern = None
        self._exclude_pattern = None
        self.discriminator = None
        if include_list is not None:
            self.include_list = include_list
        if include_pattern is not None:
            self.include_pattern = include_pattern
        if exclude_pattern is not None:
            self.exclude_pattern = exclude_pattern

    @property
    def include_list(self):
        """Gets the include_list of this TestgenTableSchema.  # noqa: E501

        Optional. The full names of tables explicitly included. Must specify at least one of `include_list` or `include_pattern`.  # noqa: E501

        :return: The include_list of this TestgenTableSchema.  # noqa: E501
        :rtype: list[str]
        """
        return self._include_list

    @include_list.setter
    def include_list(self, include_list):
        """Sets the include_list of this TestgenTableSchema.

        Optional. The full names of tables explicitly included. Must specify at least one of `include_list` or `include_pattern`.  # noqa: E501

        :param include_list: The include_list of this TestgenTableSchema.  # noqa: E501
        :type: list[str]
        """

        self._include_list = include_list

    @property
    def include_pattern(self):
        """Gets the include_pattern of this TestgenTableSchema.  # noqa: E501

        Optional. The case insensitive pattern of included tables. Must specify at least one of `include_list` or `include_pattern`.  # noqa: E501

        :return: The include_pattern of this TestgenTableSchema.  # noqa: E501
        :rtype: str
        """
        return self._include_pattern

    @include_pattern.setter
    def include_pattern(self, include_pattern):
        """Sets the include_pattern of this TestgenTableSchema.

        Optional. The case insensitive pattern of included tables. Must specify at least one of `include_list` or `include_pattern`.  # noqa: E501

        :param include_pattern: The include_pattern of this TestgenTableSchema.  # noqa: E501
        :type: str
        """

        self._include_pattern = include_pattern

    @property
    def exclude_pattern(self):
        """Gets the exclude_pattern of this TestgenTableSchema.  # noqa: E501

        Optional. The case insensitive pattern of excluded tables.  # noqa: E501

        :return: The exclude_pattern of this TestgenTableSchema.  # noqa: E501
        :rtype: str
        """
        return self._exclude_pattern

    @exclude_pattern.setter
    def exclude_pattern(self, exclude_pattern):
        """Sets the exclude_pattern of this TestgenTableSchema.

        Optional. The case insensitive pattern of excluded tables.  # noqa: E501

        :param exclude_pattern: The exclude_pattern of this TestgenTableSchema.  # noqa: E501
        :type: str
        """

        self._exclude_pattern = exclude_pattern

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TestgenTableSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TestgenTableSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
