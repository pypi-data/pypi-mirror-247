# coding: utf-8

"""
    Event Ingestion API

    Event Ingestion API client for DataKitchenâ€™s DataOps Observability  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@datakitchen.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TestOutcomesApiSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'metadata': 'object',
        'server_name': 'str',
        'pipeline_name': 'str',
        'run_name': 'str',
        'external_url': 'str',
        'stream_name': 'str',
        'pipeline_key': 'str',
        'task_name': 'str',
        'component_tool': 'str',
        'stream_key': 'str',
        'dataset_name': 'str',
        'server_key': 'str',
        'payload_keys': 'list[str]',
        'test_outcomes': 'list[TestOutcomeItemSchema]',
        'run_key': 'str',
        'task_key': 'str',
        'event_timestamp': 'datetime',
        'component_integrations': 'AllOfTestOutcomesApiSchemaComponentIntegrations',
        'dataset_key': 'str'
    }

    attribute_map = {
        'metadata': 'metadata',
        'server_name': 'server_name',
        'pipeline_name': 'pipeline_name',
        'run_name': 'run_name',
        'external_url': 'external_url',
        'stream_name': 'stream_name',
        'pipeline_key': 'pipeline_key',
        'task_name': 'task_name',
        'component_tool': 'component_tool',
        'stream_key': 'stream_key',
        'dataset_name': 'dataset_name',
        'server_key': 'server_key',
        'payload_keys': 'payload_keys',
        'test_outcomes': 'test_outcomes',
        'run_key': 'run_key',
        'task_key': 'task_key',
        'event_timestamp': 'event_timestamp',
        'component_integrations': 'component_integrations',
        'dataset_key': 'dataset_key'
    }

    def __init__(self, metadata=None, server_name=None, pipeline_name=None, run_name=None, external_url=None, stream_name=None, pipeline_key=None, task_name=None, component_tool=None, stream_key=None, dataset_name=None, server_key=None, payload_keys=None, test_outcomes=None, run_key=None, task_key=None, event_timestamp=None, component_integrations=None, dataset_key=None):  # noqa: E501
        """TestOutcomesApiSchema - a model defined in Swagger"""  # noqa: E501
        self._metadata = None
        self._server_name = None
        self._pipeline_name = None
        self._run_name = None
        self._external_url = None
        self._stream_name = None
        self._pipeline_key = None
        self._task_name = None
        self._component_tool = None
        self._stream_key = None
        self._dataset_name = None
        self._server_key = None
        self._payload_keys = None
        self._test_outcomes = None
        self._run_key = None
        self._task_key = None
        self._event_timestamp = None
        self._component_integrations = None
        self._dataset_key = None
        self.discriminator = None
        if metadata is not None:
            self.metadata = metadata
        if server_name is not None:
            self.server_name = server_name
        if pipeline_name is not None:
            self.pipeline_name = pipeline_name
        if run_name is not None:
            self.run_name = run_name
        if external_url is not None:
            self.external_url = external_url
        if stream_name is not None:
            self.stream_name = stream_name
        if pipeline_key is not None:
            self.pipeline_key = pipeline_key
        if task_name is not None:
            self.task_name = task_name
        if component_tool is not None:
            self.component_tool = component_tool
        if stream_key is not None:
            self.stream_key = stream_key
        if dataset_name is not None:
            self.dataset_name = dataset_name
        if server_key is not None:
            self.server_key = server_key
        if payload_keys is not None:
            self.payload_keys = payload_keys
        self.test_outcomes = test_outcomes
        if run_key is not None:
            self.run_key = run_key
        if task_key is not None:
            self.task_key = task_key
        if event_timestamp is not None:
            self.event_timestamp = event_timestamp
        if component_integrations is not None:
            self.component_integrations = component_integrations
        if dataset_key is not None:
            self.dataset_key = dataset_key

    @property
    def metadata(self):
        """Gets the metadata of this TestOutcomesApiSchema.  # noqa: E501

        Optional. Additional key-value information for the event. Provided by the user as needed.  # noqa: E501

        :return: The metadata of this TestOutcomesApiSchema.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this TestOutcomesApiSchema.

        Optional. Additional key-value information for the event. Provided by the user as needed.  # noqa: E501

        :param metadata: The metadata of this TestOutcomesApiSchema.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    @property
    def server_name(self):
        """Gets the server_name of this TestOutcomesApiSchema.  # noqa: E501

        Optional. Human readable display name for the server.  # noqa: E501

        :return: The server_name of this TestOutcomesApiSchema.  # noqa: E501
        :rtype: str
        """
        return self._server_name

    @server_name.setter
    def server_name(self, server_name):
        """Sets the server_name of this TestOutcomesApiSchema.

        Optional. Human readable display name for the server.  # noqa: E501

        :param server_name: The server_name of this TestOutcomesApiSchema.  # noqa: E501
        :type: str
        """

        self._server_name = server_name

    @property
    def pipeline_name(self):
        """Gets the pipeline_name of this TestOutcomesApiSchema.  # noqa: E501

        Optional. Human readable display name for the batch-pipeline component.  # noqa: E501

        :return: The pipeline_name of this TestOutcomesApiSchema.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_name

    @pipeline_name.setter
    def pipeline_name(self, pipeline_name):
        """Sets the pipeline_name of this TestOutcomesApiSchema.

        Optional. Human readable display name for the batch-pipeline component.  # noqa: E501

        :param pipeline_name: The pipeline_name of this TestOutcomesApiSchema.  # noqa: E501
        :type: str
        """

        self._pipeline_name = pipeline_name

    @property
    def run_name(self):
        """Gets the run_name of this TestOutcomesApiSchema.  # noqa: E501

        Optional. Human readable display name for the run.  # noqa: E501

        :return: The run_name of this TestOutcomesApiSchema.  # noqa: E501
        :rtype: str
        """
        return self._run_name

    @run_name.setter
    def run_name(self, run_name):
        """Sets the run_name of this TestOutcomesApiSchema.

        Optional. Human readable display name for the run.  # noqa: E501

        :param run_name: The run_name of this TestOutcomesApiSchema.  # noqa: E501
        :type: str
        """

        self._run_name = run_name

    @property
    def external_url(self):
        """Gets the external_url of this TestOutcomesApiSchema.  # noqa: E501

        A link to source information.  # noqa: E501

        :return: The external_url of this TestOutcomesApiSchema.  # noqa: E501
        :rtype: str
        """
        return self._external_url

    @external_url.setter
    def external_url(self, external_url):
        """Sets the external_url of this TestOutcomesApiSchema.

        A link to source information.  # noqa: E501

        :param external_url: The external_url of this TestOutcomesApiSchema.  # noqa: E501
        :type: str
        """

        self._external_url = external_url

    @property
    def stream_name(self):
        """Gets the stream_name of this TestOutcomesApiSchema.  # noqa: E501

        Optional. Human readable display name for the streaming-pipeline.  # noqa: E501

        :return: The stream_name of this TestOutcomesApiSchema.  # noqa: E501
        :rtype: str
        """
        return self._stream_name

    @stream_name.setter
    def stream_name(self, stream_name):
        """Sets the stream_name of this TestOutcomesApiSchema.

        Optional. Human readable display name for the streaming-pipeline.  # noqa: E501

        :param stream_name: The stream_name of this TestOutcomesApiSchema.  # noqa: E501
        :type: str
        """

        self._stream_name = stream_name

    @property
    def pipeline_key(self):
        """Gets the pipeline_key of this TestOutcomesApiSchema.  # noqa: E501

        The key identifier of the target batch-pipeline component for the event action. Only one component key can be provided at a time.  # noqa: E501

        :return: The pipeline_key of this TestOutcomesApiSchema.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_key

    @pipeline_key.setter
    def pipeline_key(self, pipeline_key):
        """Sets the pipeline_key of this TestOutcomesApiSchema.

        The key identifier of the target batch-pipeline component for the event action. Only one component key can be provided at a time.  # noqa: E501

        :param pipeline_key: The pipeline_key of this TestOutcomesApiSchema.  # noqa: E501
        :type: str
        """

        self._pipeline_key = pipeline_key

    @property
    def task_name(self):
        """Gets the task_name of this TestOutcomesApiSchema.  # noqa: E501

        Optional. A human-readable display name for the task.  # noqa: E501

        :return: The task_name of this TestOutcomesApiSchema.  # noqa: E501
        :rtype: str
        """
        return self._task_name

    @task_name.setter
    def task_name(self, task_name):
        """Sets the task_name of this TestOutcomesApiSchema.

        Optional. A human-readable display name for the task.  # noqa: E501

        :param task_name: The task_name of this TestOutcomesApiSchema.  # noqa: E501
        :type: str
        """

        self._task_name = task_name

    @property
    def component_tool(self):
        """Gets the component_tool of this TestOutcomesApiSchema.  # noqa: E501


        :return: The component_tool of this TestOutcomesApiSchema.  # noqa: E501
        :rtype: str
        """
        return self._component_tool

    @component_tool.setter
    def component_tool(self, component_tool):
        """Sets the component_tool of this TestOutcomesApiSchema.


        :param component_tool: The component_tool of this TestOutcomesApiSchema.  # noqa: E501
        :type: str
        """

        self._component_tool = component_tool

    @property
    def stream_key(self):
        """Gets the stream_key of this TestOutcomesApiSchema.  # noqa: E501

        The key identifier of the target streaming-pipeline for the event action. Only one component key can be provided at a time.  # noqa: E501

        :return: The stream_key of this TestOutcomesApiSchema.  # noqa: E501
        :rtype: str
        """
        return self._stream_key

    @stream_key.setter
    def stream_key(self, stream_key):
        """Sets the stream_key of this TestOutcomesApiSchema.

        The key identifier of the target streaming-pipeline for the event action. Only one component key can be provided at a time.  # noqa: E501

        :param stream_key: The stream_key of this TestOutcomesApiSchema.  # noqa: E501
        :type: str
        """

        self._stream_key = stream_key

    @property
    def dataset_name(self):
        """Gets the dataset_name of this TestOutcomesApiSchema.  # noqa: E501

        Optional. Human readable display name for the dataset component.  # noqa: E501

        :return: The dataset_name of this TestOutcomesApiSchema.  # noqa: E501
        :rtype: str
        """
        return self._dataset_name

    @dataset_name.setter
    def dataset_name(self, dataset_name):
        """Sets the dataset_name of this TestOutcomesApiSchema.

        Optional. Human readable display name for the dataset component.  # noqa: E501

        :param dataset_name: The dataset_name of this TestOutcomesApiSchema.  # noqa: E501
        :type: str
        """

        self._dataset_name = dataset_name

    @property
    def server_key(self):
        """Gets the server_key of this TestOutcomesApiSchema.  # noqa: E501

        The key identifier of the target server component for the event action. Only one component key can be provided at a time.  # noqa: E501

        :return: The server_key of this TestOutcomesApiSchema.  # noqa: E501
        :rtype: str
        """
        return self._server_key

    @server_key.setter
    def server_key(self, server_key):
        """Sets the server_key of this TestOutcomesApiSchema.

        The key identifier of the target server component for the event action. Only one component key can be provided at a time.  # noqa: E501

        :param server_key: The server_key of this TestOutcomesApiSchema.  # noqa: E501
        :type: str
        """

        self._server_key = server_key

    @property
    def payload_keys(self):
        """Gets the payload_keys of this TestOutcomesApiSchema.  # noqa: E501

        The key identifiers of the datums of interest.  # noqa: E501

        :return: The payload_keys of this TestOutcomesApiSchema.  # noqa: E501
        :rtype: list[str]
        """
        return self._payload_keys

    @payload_keys.setter
    def payload_keys(self, payload_keys):
        """Sets the payload_keys of this TestOutcomesApiSchema.

        The key identifiers of the datums of interest.  # noqa: E501

        :param payload_keys: The payload_keys of this TestOutcomesApiSchema.  # noqa: E501
        :type: list[str]
        """

        self._payload_keys = payload_keys

    @property
    def test_outcomes(self):
        """Gets the test_outcomes of this TestOutcomesApiSchema.  # noqa: E501

        Required. A list of objects, each representing the outcomes of a test.  # noqa: E501

        :return: The test_outcomes of this TestOutcomesApiSchema.  # noqa: E501
        :rtype: list[TestOutcomeItemSchema]
        """
        return self._test_outcomes

    @test_outcomes.setter
    def test_outcomes(self, test_outcomes):
        """Sets the test_outcomes of this TestOutcomesApiSchema.

        Required. A list of objects, each representing the outcomes of a test.  # noqa: E501

        :param test_outcomes: The test_outcomes of this TestOutcomesApiSchema.  # noqa: E501
        :type: list[TestOutcomeItemSchema]
        """
        if test_outcomes is None:
            raise ValueError("Invalid value for `test_outcomes`, must not be `None`")  # noqa: E501

        self._test_outcomes = test_outcomes

    @property
    def run_key(self):
        """Gets the run_key of this TestOutcomesApiSchema.  # noqa: E501

        The identifier of the target run for the event action. This key is created and managed by the user. Required if the target component is a batch-pipeline.   # noqa: E501

        :return: The run_key of this TestOutcomesApiSchema.  # noqa: E501
        :rtype: str
        """
        return self._run_key

    @run_key.setter
    def run_key(self, run_key):
        """Sets the run_key of this TestOutcomesApiSchema.

        The identifier of the target run for the event action. This key is created and managed by the user. Required if the target component is a batch-pipeline.   # noqa: E501

        :param run_key: The run_key of this TestOutcomesApiSchema.  # noqa: E501
        :type: str
        """

        self._run_key = run_key

    @property
    def task_key(self):
        """Gets the task_key of this TestOutcomesApiSchema.  # noqa: E501

        Optional. The identifier for a run task. When no task_key is included, the event applies to the run specified by the run_key.  # noqa: E501

        :return: The task_key of this TestOutcomesApiSchema.  # noqa: E501
        :rtype: str
        """
        return self._task_key

    @task_key.setter
    def task_key(self, task_key):
        """Sets the task_key of this TestOutcomesApiSchema.

        Optional. The identifier for a run task. When no task_key is included, the event applies to the run specified by the run_key.  # noqa: E501

        :param task_key: The task_key of this TestOutcomesApiSchema.  # noqa: E501
        :type: str
        """

        self._task_key = task_key

    @property
    def event_timestamp(self):
        """Gets the event_timestamp of this TestOutcomesApiSchema.  # noqa: E501

        Optional. An ISO8601 timestamp that describes when the event occurred. If no timezone is specified, UTC is assumed. If unset, the Event Ingestion API applies its current time as the value.  # noqa: E501

        :return: The event_timestamp of this TestOutcomesApiSchema.  # noqa: E501
        :rtype: datetime
        """
        return self._event_timestamp

    @event_timestamp.setter
    def event_timestamp(self, event_timestamp):
        """Sets the event_timestamp of this TestOutcomesApiSchema.

        Optional. An ISO8601 timestamp that describes when the event occurred. If no timezone is specified, UTC is assumed. If unset, the Event Ingestion API applies its current time as the value.  # noqa: E501

        :param event_timestamp: The event_timestamp of this TestOutcomesApiSchema.  # noqa: E501
        :type: datetime
        """

        self._event_timestamp = event_timestamp

    @property
    def component_integrations(self):
        """Gets the component_integrations of this TestOutcomesApiSchema.  # noqa: E501

        Optional. Test Outcomes additional component data.  # noqa: E501

        :return: The component_integrations of this TestOutcomesApiSchema.  # noqa: E501
        :rtype: AllOfTestOutcomesApiSchemaComponentIntegrations
        """
        return self._component_integrations

    @component_integrations.setter
    def component_integrations(self, component_integrations):
        """Sets the component_integrations of this TestOutcomesApiSchema.

        Optional. Test Outcomes additional component data.  # noqa: E501

        :param component_integrations: The component_integrations of this TestOutcomesApiSchema.  # noqa: E501
        :type: AllOfTestOutcomesApiSchemaComponentIntegrations
        """

        self._component_integrations = component_integrations

    @property
    def dataset_key(self):
        """Gets the dataset_key of this TestOutcomesApiSchema.  # noqa: E501

        The key identifier of the target dataset component for the event action. Only one component key can be provided at a time.  # noqa: E501

        :return: The dataset_key of this TestOutcomesApiSchema.  # noqa: E501
        :rtype: str
        """
        return self._dataset_key

    @dataset_key.setter
    def dataset_key(self, dataset_key):
        """Sets the dataset_key of this TestOutcomesApiSchema.

        The key identifier of the target dataset component for the event action. Only one component key can be provided at a time.  # noqa: E501

        :param dataset_key: The dataset_key of this TestOutcomesApiSchema.  # noqa: E501
        :type: str
        """

        self._dataset_key = dataset_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TestOutcomesApiSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TestOutcomesApiSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
