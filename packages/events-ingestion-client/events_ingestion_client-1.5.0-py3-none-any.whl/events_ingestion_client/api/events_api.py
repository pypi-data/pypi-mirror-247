# coding: utf-8

"""
    Event Ingestion API

    Event Ingestion API client for DataKitchenâ€™s DataOps Observability  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@datakitchen.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from events_ingestion_client.api_client import ApiClient


class EventsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def post_dataset_operation(self, body, **kwargs):  # noqa: E501
        """DatasetOperation Event  # noqa: E501

        Event reports that a read or write operation has occurred for the specified dataset.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dataset_operation(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DatasetOperationApiSchema body: Data describing the event. (required)
        :param str event_source: Set the source of the event. If unset, the Event Ingestion API will assume the source of the Event is API. Warning - This parameter is not intended for use by end users.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_dataset_operation_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_dataset_operation_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_dataset_operation_with_http_info(self, body, **kwargs):  # noqa: E501
        """DatasetOperation Event  # noqa: E501

        Event reports that a read or write operation has occurred for the specified dataset.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_dataset_operation_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DatasetOperationApiSchema body: Data describing the event. (required)
        :param str event_source: Set the source of the event. If unset, the Event Ingestion API will assume the source of the Event is API. Warning - This parameter is not intended for use by end users.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'event_source']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dataset_operation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_dataset_operation`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'event_source' in params:
            header_params['EVENT-SOURCE'] = params['event_source']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['SAKey']  # noqa: E501

        return self.api_client.call_api(
            '/events/v1/dataset-operation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout', 60),
            collection_formats=collection_formats)

    def post_message_log(self, body, **kwargs):  # noqa: E501
        """MessageLog Event  # noqa: E501

        Logs a string message related to the pipeline run, and optionally related to a specific task. Post a MessageLog event to capture error, warning, or debugging messages from external tools and scripts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_message_log(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageLogEventApiSchema body: Data describing the event. (required)
        :param str event_source: Set the source of the event. If unset, the Event Ingestion API will assume the source of the Event is API. Warning - This parameter is not intended for use by end users.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_message_log_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_message_log_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_message_log_with_http_info(self, body, **kwargs):  # noqa: E501
        """MessageLog Event  # noqa: E501

        Logs a string message related to the pipeline run, and optionally related to a specific task. Post a MessageLog event to capture error, warning, or debugging messages from external tools and scripts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_message_log_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MessageLogEventApiSchema body: Data describing the event. (required)
        :param str event_source: Set the source of the event. If unset, the Event Ingestion API will assume the source of the Event is API. Warning - This parameter is not intended for use by end users.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'event_source']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_message_log" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_message_log`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'event_source' in params:
            header_params['EVENT-SOURCE'] = params['event_source']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['SAKey']  # noqa: E501

        return self.api_client.call_api(
            '/events/v1/message-log', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout', 60),
            collection_formats=collection_formats)

    def post_metric_log(self, body, **kwargs):  # noqa: E501
        """MetricLog Event  # noqa: E501

        Logs the value of a user-defined datum of interest, such as a row count. Post a MetricLog event to track the value of a metric through a run or for comparing the value of the metric across multiple runs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_metric_log(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MetricLogApiSchema body: Data describing the event. (required)
        :param str event_source: Set the source of the event. If unset, the Event Ingestion API will assume the source of the Event is API. Warning - This parameter is not intended for use by end users.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_metric_log_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_metric_log_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_metric_log_with_http_info(self, body, **kwargs):  # noqa: E501
        """MetricLog Event  # noqa: E501

        Logs the value of a user-defined datum of interest, such as a row count. Post a MetricLog event to track the value of a metric through a run or for comparing the value of the metric across multiple runs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_metric_log_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MetricLogApiSchema body: Data describing the event. (required)
        :param str event_source: Set the source of the event. If unset, the Event Ingestion API will assume the source of the Event is API. Warning - This parameter is not intended for use by end users.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'event_source']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_metric_log" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_metric_log`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'event_source' in params:
            header_params['EVENT-SOURCE'] = params['event_source']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['SAKey']  # noqa: E501

        return self.api_client.call_api(
            '/events/v1/metric-log', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout', 60),
            collection_formats=collection_formats)

    def post_run_status(self, body, **kwargs):  # noqa: E501
        """RunStatus Event  # noqa: E501

        Changes the status of a specified batch pipeline run or of a specified task in the run. Post a RunStatus event to alert the system that a run has started and ended with a certain status or that a task has started and ended with a certain status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_run_status(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RunStatusApiSchema body: Data describing the event. (required)
        :param str event_source: Set the source of the event. If unset, the Event Ingestion API will assume the source of the Event is API. Warning - This parameter is not intended for use by end users.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_run_status_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_run_status_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_run_status_with_http_info(self, body, **kwargs):  # noqa: E501
        """RunStatus Event  # noqa: E501

        Changes the status of a specified batch pipeline run or of a specified task in the run. Post a RunStatus event to alert the system that a run has started and ended with a certain status or that a task has started and ended with a certain status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_run_status_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RunStatusApiSchema body: Data describing the event. (required)
        :param str event_source: Set the source of the event. If unset, the Event Ingestion API will assume the source of the Event is API. Warning - This parameter is not intended for use by end users.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'event_source']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_run_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_run_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'event_source' in params:
            header_params['EVENT-SOURCE'] = params['event_source']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['SAKey']  # noqa: E501

        return self.api_client.call_api(
            '/events/v1/run-status', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout', 60),
            collection_formats=collection_formats)

    def post_test_outcomes(self, body, **kwargs):  # noqa: E501
        """TestOutcomes Event  # noqa: E501

        Reports the outcomes of a test or a set of tests. Receives a list of test outcomes by test name and status (PASSED, FAILED, or WARNING). Post a TestOutcomesEvent event to send outcomes from an external tool to the Observe platform to track and report on runs and outcomes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_test_outcomes(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TestOutcomesApiSchema body: Data describing the event. (required)
        :param str event_source: Set the source of the event. If unset, the Event Ingestion API will assume the source of the Event is API. Warning - This parameter is not intended for use by end users.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_test_outcomes_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_test_outcomes_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_test_outcomes_with_http_info(self, body, **kwargs):  # noqa: E501
        """TestOutcomes Event  # noqa: E501

        Reports the outcomes of a test or a set of tests. Receives a list of test outcomes by test name and status (PASSED, FAILED, or WARNING). Post a TestOutcomesEvent event to send outcomes from an external tool to the Observe platform to track and report on runs and outcomes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_test_outcomes_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TestOutcomesApiSchema body: Data describing the event. (required)
        :param str event_source: Set the source of the event. If unset, the Event Ingestion API will assume the source of the Event is API. Warning - This parameter is not intended for use by end users.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'event_source']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_test_outcomes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_test_outcomes`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'event_source' in params:
            header_params['EVENT-SOURCE'] = params['event_source']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['SAKey']  # noqa: E501

        return self.api_client.call_api(
            '/events/v1/test-outcomes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout', 60),
            collection_formats=collection_formats)
