# WARNING: THIS FILE HAS BEEN AUTOGENERATED DO NOT EDIT IT!!!

### Stage: Base ###

FROM {{ manifest.base_image }} as base
RUN apt-get update && apt-get upgrade -y && apt-get clean -y  && rm -rf /var/lib/apt/lists/*

RUN useradd fastiot -u 777

# As a convention, the workdir should always be the project root dir inside the container.
WORKDIR /opt/fastiot

# As a convention, the python source files should always be placed inside src-dir.
RUN mkdir /opt/fastiot/src
ENV PYTHONPATH=$PYTHONPATH:/opt/fastiot/src
ENV PIP_ROOT_USER_ACTION=ignore
ENV FASTIOT_WITHIN_CONTAINER=true

# Install requirements
COPY install.sh ./
COPY {{ base_requirements_file }} ./requirements/
RUN FASTIOT_EXTRA_PYPI={{extra_pypi}} /bin/bash -e install.sh

{% if manifest.healthcheck.cmd != '' %}
HEALTHCHECK \
    --interval={{ manifest.healthcheck.interval }} \
    --timeout={{ manifest.healthcheck.timeout }} \
    --start-period={{ manifest.healthcheck.start_period }} \
    --retries={{ manifest.healthcheck.retries }} \
    CMD {{ manifest.healthcheck.cmd }}
{% endif %}

{% if manifest.npm %}
### Stage: npm ###
FROM {{ manifest.npm.node_base_image }} as build-npm
COPY src/{{ service.package }}/{{ service.name }}/{{manifest.npm.src}} src/{{ service.package }}/{{ service.name }}/{{manifest.npm.src}}
WORKDIR src/{{ service.package }}/{{ service.name }}/{{manifest.npm.src}}
RUN npm ci
RUN npm run build
WORKDIR /opt/fastiot
{% endif %}

### Stage: Debug ###
FROM base as debug
{% if manifest.additional_requirements %}
{% for req in manifest.additional_requirements %}
COPY requirements/requirements.{{ req }}.txt ./requirements/
{% endfor %}
RUN FASTIOT_EXTRA_PYPI={{extra_pypi}} /bin/bash -e install.sh  --root-user-action=ignore
{% endif %}
# In debug mode we just want to copy everything from source to make it easier.
{% if manifest.npm %}
COPY --from=build-npm src/{{ service.package }}/{{ service.name }}/{{manifest.npm.src}}/{{ manifest.npm.dist }} src/{{ service.package }}/{{ service.name }}/{{ manifest.npm.src }}/{{ manifest.npm.dist }}
{% endif %}
{% if context.library_package %}
COPY src/{{context.library_package}} /opt/fastiot/src/{{context.library_package}}
{% endif %}
COPY src/{{ service.package }}/{{ service.name }} /opt/fastiot/src/{{ service.package }}/{{ service.name }}
COPY src/{{ service.package }}/{{ service.name }}/manifest.yaml /opt/fastiot/manifest.yaml

MAINTAINER {{ service.maintainer }}
LABEL org.label-schema.schema-version="1.0"
LABEL org.label-schema.name={{ service.name }}
LABEL org.label-schema.build-date={{ service.build_date }}
LABEL org.label-schema.maintainer="{{ service.maintainer }}"
LABEL org.label-schema.version={{ service.version }}

{%if not manifest.privileged%}
USER fastiot
{%endif%}


CMD ["python",  "/opt/fastiot/src/{{ service.package }}/{{ service.name }}/run.py"]


### Stage: Compile ###
FROM base as compile_lib
# In release mode we want to compile everything and only copy compiled artifacts into release container.
# The compilation takes place in this stage, so we need to compile it accordingly.
RUN  apt-get update && apt-get install -y gcc make build-essential && apt-get clean -y
RUN python3 -m pip install --extra-index-url http://{{ extra_pypi }} --trusted-host {{ extra_pypi }} "fastiot[dev,compile]"

COPY configure.py /opt/fastiot/

COPY src /opt/fastiot/src

{% if context.library_package %}
RUN fiot extras nuitka-compile --src-dir=/opt/fastiot/src --out-dir=/opt/fastiot/output {{ context.library_package }}
{% endif %}

RUN fiot extras nuitka-compile --src-dir=/opt/fastiot/src --out-dir=/opt/fastiot/output {{ service.package }}


### Stage: Release ###
FROM base

{% if manifest.additional_requirements %}
{% for req in manifest.additional_requirements %}
COPY requirements/requirements.{{ req }}.txt ./requirements/
{% endfor %}
RUN FASTIOT_EXTRA_PYPI={{extra_pypi}} /bin/bash -e install.sh
{% endif %}

# Nuitka compiles "__file__"-variable relative to current location. So we have to place everything inside "/opt/fastiot/src".
COPY --from=compile_lib /opt/fastiot/output/*.so /opt/fastiot/src/
COPY --from=compile_lib /opt/fastiot/src/{{ service.package }}/{{ service.name }}/run.py /opt/fastiot/src/{{ service.package }}/{{ service.name }}/run.py
{% for service_dir_to_copy in manifest.copy_dirs_to_container %}
COPY --from=compile_lib /opt/fastiot/src/{{ service.package }}/{{ service.name }}/{{ service_dir_to_copy }} /opt/fastiot/src/{{ service.package }}/{{ service.name }}/{{ module_dir_to_copy }}
{% endfor %}

{% if manifest.npm %}
COPY --from=build-npm src/{{ service.package }}/{{ service.name }}/{{manifest.npm.src}}/{{ manifest.npm.dist }} src/{{ service.package }}/{{ service.name }}/{{ manifest.npm.src }}/{{ manifest.npm.dist }}
{% endif %}

COPY src/{{ service.package }}/{{ service.name }}/manifest.yaml /opt/fastiot/manifest.yaml
MAINTAINER {{ service.maintainer }}
LABEL org.label-schema.schema-version="1.0"
LABEL org.label-schema.name="{{ context.project_namespace }}-{{ service.name }}"
LABEL org.label-schema.build-date={{ service.build_date }}
LABEL org.label-schema.maintainer="{{ service.maintainer }}"
LABEL org.label-schema.version={{ service.version }}
LABEL org.label-schema.vcs-ref="{{ service.git_revision }}"

{%if not manifest.privileged%}
USER fastiot
{%endif%}

CMD ["python",  "/opt/fastiot/src/{{ service.package }}/{{ service.name }}/run.py"]
