#!/usr/bin/env python

import os
import logging
import argparse
from azure_key_vault_report import azure_key_vault_report
from message_handler import message_handler


########################################################################################################################

if __name__ == '__main__':
    logging.basicConfig(format='%(asctime)s - %(message)s', level=logging.INFO)

    # The actual report will be posted to the webhook exported in
    # the following environment variable
    WEBHOOK_REPORT = os.getenv("WEBHOOK_REPORT")

    # When all the reports have been posted, an additional POST is performed
    # to the webhook exported in following environment variable:
    WEBHOOK_NOTIFY = os.getenv("WEBHOOK_NOTIFY")

    # The list of key vaults to check passed as command line arguments
    parser = argparse.ArgumentParser()
    parser.add_argument("-v", "--vaults", nargs='+',
                        help="List of key vaults to check. E.g. kv-dev kv-test")

    parser.add_argument("-e", "--expire_threshold", type=int,
                        help="If a value (int) is set. The days to the record's Expiration Date must be above "
                             "this threshold (Default: not set)")

    parser.add_argument("-a", "--include_all", action='store_true',
                        help="Include all records in output (verbose) if provided.")

    parser.add_argument("-i", "--include_no_expiration", action='store_false',
                        help="Also include records which has no Expiration Date set.")

    parser.add_argument("-t", "--teams_output", action='store_true',
                        help="Generate a MS Teams json object.")

    parser.add_argument("-f", "--facts", action='store_true',
                        help="Will always generate facts (summary report) in teams json even though no records to"
                             "alert.")

    args = parser.parse_args()
    vaults = args.vaults
    expire_threshold = args.expire_threshold
    include_all = args.include_all
    teams_output = args.teams_output
    facts = args.facts

    logging.info(f"vaults: {vaults}")
    logging.info(f"expire_threshold: {expire_threshold}")
    logging.info(f"include_all: {include_all}")
    logging.info(f"teams_output: {teams_output}")

    # If argument 'include_no_expiration' is not provided, variable 'ignore_no_expiration' is set to True
    ignore_no_expiration = args.include_no_expiration

    if not vaults:
        logging.error("No vaults specified.")
        exit(2)

    # If only one key vault to check, it is ensured that it is treated as a list
    if isinstance(vaults, str):
        vaults = [vaults]

    # 'success' variable initially set to False.
    # It will only be set to True if one more report POST to the specified 'WEBHOOK_REPORT' webhook
    # has return code 200
    # Only if True, the additional 'WEBHOOK_NOTIFY' will be triggered.
    success = False

    # Post each report to the specified WEBHOOK_REPORT
    for vault in vaults:
        # The report is generated by using the pip package ops-py-azure-key-vault-report
        kv_report = azure_key_vault_report.AzureKeyVaultReport(vault)
        kv_report.az_cmd()
        kv_report.parse_results()
        kv_report.set_report_header()
        kv_report.generate_report(expire_threshold=expire_threshold,
                                  ignore_no_expiration=ignore_no_expiration,
                                  include_all=include_all,
                                  teams_json=teams_output)
        kv_report.set_report_footer()
        report = kv_report.get_report()

        if not WEBHOOK_REPORT:
            logging.warning("'WEBHOOK_REPORT' not provided. "
                            f"'{vault}' report will not be posted to message handler.")

        # The report is posted to specified webhook by using the pip package ops-py-message-handler
        alert = message_handler.MessageHandler(WEBHOOK_REPORT)

        # If Teams report, the generated json object will be used as payload. If not a payload will be build
        logging.info(f"Teams output {teams_output}")
        if teams_output:
            # If argument 'facts' is not true, then a summary report will not be returned if there are not any records
            # to report
            payload = kv_report.get_json_output(report_if_no_html=facts)
            if payload:
                logging.info(f"Using payload: {payload}")
                alert.set_payload(payload)
                alert.post_payload()
                response_code = alert.get_response_code()

                if isinstance(response_code, int) and response_code == 200:
                    success = True
            else:
                logging.warning("No payload")
        else:
            logging.info("Building payload..")
            alert.build_payload(Title=vault, Text=report)
            alert.post_payload()
            response_code = alert.get_response_code()

            if isinstance(response_code, int) and response_code == 200:
                success = True

    # If success and 'WEBHOOK_NOTIFY' is provided
    # an additional notify will be posted to the 'WEBHOOK_NOTIFY' webhook
    if success and WEBHOOK_NOTIFY:
        logging.info(f"Trigger additional alert about new report message(s)...")
        alert = message_handler.MessageHandler(WEBHOOK_NOTIFY)
        alert.post_payload()
