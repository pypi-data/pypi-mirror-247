{"version":3,"file":"lib_index_js.4c5488affcc51b6df141.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAiD;AACyB;AACzB;AACV;AACwB;AACP;AACM;AACX;AACG;AACtD;AACA;AACA;AACA;AACA;AACA,eAAe,2DAAS,EAAE,yEAAgB,EAAE,2DAAS;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,mDAAW;AACzB,kBAAkB,mDAAW;AAC7B,KAAK;AACL,2EAA2E,OAAO;AAClF,KAAK;AACL,qBAAqB,iDAAI,GAAG,wBAAwB;AACpD;AACA;AACA;AACA;AACA,yDAAyD,+DAAgB;AACzE;AACA,gCAAgC,iEAAa;AAC7C;AACA,qEAAqE,SAAS;AAC9E,+BAA+B,gEAAc,GAAG,SAAS;AACzD;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,oBAAoB,wBAAwB,EAAE,2EAAqB;AACnE,iCAAiC,gEAAU;AAC3C;AACA;AACA;AACA,oBAAoB,wDAAM;AAC1B;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,KAAK;AACL,mBAAmB,sBAAsB;AACzC,mBAAmB,mBAAmB;AACtC;AACA;AACA,gBAAgB,qBAAqB;AACrC,KAAK;AACL,mCAAmC,YAAY;AAC/C;AACA;AACA;AACA;AACA,oBAAoB;AACpB,SAAS;AACT;AACA;AACA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;;;;;;;;AC7E8B;AACa;AACD;AACY;AACrE,2BAA2B,8DAAO,GAAG,sBAAsB,uDAAiB,EAAE;AAC9E,mCAAmC,8DAAO,GAAG,0BAA0B,2DAAyB,EAAE;AAClG,6BAA6B,8DAAO,GAAG,2BAA2B,0DAAe,EAAE;;;;;;;;;;;;;;;;ACNnF;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACT+B;AAC8C;AACtE;AACP,yBAAyB,gDAAmB,WAAW,oCAAoC;AAC3F,QAAQ,gDAAmB,WAAW,+BAA+B;AACrE,wBAAwB,gDAAmB,WAAW,8BAA8B;AACpF,QAAQ,gDAAmB,CAAC,6DAAc,UAAU,oDAAoD;AACxG,QAAQ,gDAAmB,UAAU,mCAAmC;AACxE,YAAY,gDAAmB,CAAC,qEAAsB,UAAU,gCAAgC;AAChG;AACA,2BAA2B,gDAAmB,WAAW,qCAAqC;AAC9F,QAAQ,gDAAmB,QAAQ,2GAA2G;AAC9I,uBAAuB,gDAAmB,WAAW,iCAAiC;AACtF,uBAAuB,gDAAmB,UAAU,4BAA4B;AAChF;AACA;AACA,aAAa;AACb;;;;;;;;;;;;;;;;;ACjByC;AAClC,4BAA4B,mDAAM;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,eAAe;AAC/B;AACA","sources":["webpack://jupyterlab-smceservices/./lib/index.js","webpack://jupyterlab-smceservices/./lib/style/IconsStyle.js","webpack://jupyterlab-smceservices/./lib/utils.js","webpack://jupyterlab-smceservices/./lib/widgets/AboutWidget.js","webpack://jupyterlab-smceservices/./lib/widgets/ChatlasWidget.js"],"sourcesContent":["import { IMainMenu } from '@jupyterlab/mainmenu';\nimport { Dialog, MainAreaWidget, showDialog } from '@jupyterlab/apputils';\nimport { ILauncher } from \"@jupyterlab/launcher\";\nimport { Menu } from '@lumino/widgets';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { ChatlasWidget } from './widgets/ChatlasWidget';\nimport { aboutVoiceAtlasDialog } from './widgets/AboutWidget';\nimport { loadSetting, saveSetting } from './utils';\nimport { smceServicesIcon } from './style/IconsStyle';\nconst PLUGIN_ID = 'jupyterlab_smceservices:plugin';\nlet atlasId = '';\nconst plugin = {\n    id: PLUGIN_ID,\n    autoStart: true,\n    optional: [IMainMenu, ISettingRegistry, ILauncher],\n    activate: activate\n};\nasync function activate(app, mainMenu, settings, launcher) {\n    console.log('JupyterLab extension jupyterlab_smceservices is activated!');\n    const openChatlas = 'jupyterlab_smceservices:openChatlas';\n    const aboutVoiceAtlas = 'jupyterlab_smceservices:aboutVoiceAtlas';\n    Promise.all([app.restored, settings.load(PLUGIN_ID)])\n        .then(async ([, setting]) => {\n        await saveSetting(setting, '59e9d968-9c6a-45b3-aa07-cbdc5207e406');\n        atlasId = loadSetting(setting);\n    }).catch((reason) => {\n        console.error(`Something went wrong when changing the settings.\\n${reason}`);\n    });\n    const menu = new Menu({ commands: app.commands });\n    menu.title.label = 'Support';\n    app.commands.addCommand(openChatlas, {\n        label: 'Get Support',\n        caption: 'Get Support',\n        icon: (args) => (args[\"isPalette\"] ? undefined : smceServicesIcon),\n        execute: async () => {\n            const content = new ChatlasWidget(atlasId);\n            content.title.label = 'Get Support';\n            // const widget = new MainAreaWidget<VoiceAtlasWidget>({ content })\n            const widget = new MainAreaWidget({ content });\n            app.shell.add(widget, 'main');\n        }\n    });\n    app.commands.addCommand(aboutVoiceAtlas, {\n        label: 'About Voice Atlas',\n        caption: 'About Voice Atlas',\n        execute: async () => {\n            const { aboutBody, aboutTitle } = aboutVoiceAtlasDialog();\n            const result = await showDialog({\n                title: aboutTitle,\n                body: aboutBody,\n                buttons: [\n                    Dialog.createButton({\n                        label: 'Dismiss',\n                        className: 'jp-About-button jp-mod-reject jp-mod-styled'\n                    })\n                ]\n            });\n            if (result.button.accept) {\n                return;\n            }\n        }\n    });\n    menu.addItem({ command: openChatlas });\n    menu.addItem({ type: 'separator' });\n    menu.addItem({\n        command: aboutVoiceAtlas,\n        args: { origin: 'from menu' },\n    });\n    mainMenu.addMenu(menu, true, { rank: 2000 });\n    if (launcher) {\n        launcher.add({\n            command: openChatlas,\n            category: \"Support\",\n            args: { isLauncher: true }\n        });\n    }\n}\nexport default plugin;\n","import { LabIcon } from '@jupyterlab/ui-components';\nimport smceServicesSVG from '../../style/SMCE_Services_Logo.svg';\nimport voiceAtlasIconSVG from '../../style/voiceatlas_logo.svg';\nimport voiceAtlasWordmarkIconSVG from '../../style/VoiceAtlas_Wordmark.svg';\nexport const voiceAtlasIcon = new LabIcon({ name: 'logo', svgstr: voiceAtlasIconSVG });\nexport const voiceAtlasWordmarkIcon = new LabIcon({ name: 'wordmark', svgstr: voiceAtlasWordmarkIconSVG });\nexport const smceServicesIcon = new LabIcon({ name: 'smce:logo', svgstr: smceServicesSVG });\n","export function loadSetting(setting) {\n    // Read the settings and convert to the correct type\n    let atlasId = setting.get('atlasId-smce').composite;\n    return atlasId;\n}\nexport async function saveSetting(setting, atlasId) {\n    // Read the settings and convert to the correct type\n    await setting.set('atlasId-smce', atlasId);\n    return atlasId;\n}\n","import * as React from 'react';\nimport { voiceAtlasIcon, voiceAtlasWordmarkIcon } from '../style/IconsStyle';\nexport function aboutVoiceAtlasDialog() {\n    const versionInfo = (React.createElement(\"span\", { className: \"jp-About-version-info\" },\n        React.createElement(\"span\", { className: \"jp-About-version\" }, \"1.0\")));\n    const aboutTitle = (React.createElement(\"span\", { className: \"jp-About-header\" },\n        React.createElement(voiceAtlasIcon.react, { margin: \"7px 9.5px\", height: \"auto\", width: \"58px\" }),\n        React.createElement(\"div\", { className: \"jp-About-header-info\" },\n            React.createElement(voiceAtlasWordmarkIcon.react, { height: \"auto\", width: \"196px\" }),\n            versionInfo)));\n    const externalLinks = (React.createElement(\"span\", { className: \"jp-About-externalLinks\" },\n        React.createElement(\"a\", { href: 'https://voiceatlas.com', target: \"_blank\", rel: \"noopener noreferrer\", className: \"jp-Button-flat\" }, \"About Voice Atlas\")));\n    const copyright = (React.createElement(\"span\", { className: \"jp-About-copyright\" }, 'Â© 2019-2023 Voice Atlas by Navteca LLC'));\n    const aboutBody = (React.createElement(\"div\", { className: \"jp-About-body\" },\n        externalLinks,\n        copyright));\n    return { aboutBody, aboutTitle };\n}\n","import { Widget } from '@lumino/widgets';\nexport class ChatlasWidget extends Widget {\n    constructor(atlasId) {\n        const script = document.createElement('script');\n        script.setAttribute(\"src\", \"https://bot.voiceatlas.mysmce.com/v1/chatlas.js\");\n        script.setAttribute(\"async\", \"\");\n        document.body.appendChild(script);\n        const chatlas = document.createElement('app-chatlas');\n        chatlas.setAttribute(\"atlas-id\", atlasId);\n        chatlas.setAttribute(\"full-screen\", \"true\");\n        chatlas.setAttribute(\"widget-background-color\", \"#3f51b5ff\");\n        chatlas.setAttribute(\"widget-text-color\", \"#ffffffff\");\n        chatlas.setAttribute(\"widget-title\", \"Chatlas\");\n        super({ node: chatlas });\n    }\n}\n"],"names":[],"sourceRoot":""}