import redis
from amsdal_data.connections.errors import AmsdalConnectionError as AmsdalConnectionError
from amsdal_data.lock.base import LockBase as LockBase
from amsdal_utils.models.data_models.address import Address as Address
from typing import Any

class RedisLock(LockBase):
    client: redis.Redis
    def connect(self, host: str, *, port: int = ..., username: str | None = ..., password: str | None = ..., ssl: bool = ..., ssl_certfile: str | None = ..., ssl_keyfile: str | None = ..., ssl_ca_certs: str | None = ...) -> None: ...
    def disconnect(self) -> None: ...
    def acquire(self, target_address: Address, *, timeout_ms: int = ..., blocking: bool = ..., metadata: dict[str, Any] | None = ...) -> bool: ...
    def release(self, target_address: Address) -> None: ...
    @staticmethod
    def _get_redis_client(host: str, *, port: int = ..., username: str | None = ..., password: str | None = ..., ssl: bool = ..., ssl_certfile: str | None = ..., ssl_keyfile: str | None = ..., ssl_ca_certs: str | None = ...) -> Any: ...
