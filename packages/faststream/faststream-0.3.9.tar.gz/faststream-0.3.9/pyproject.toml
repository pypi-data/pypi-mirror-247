[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "faststream"
description = "FastStream: the simplest way to work with a messaging queues"
readme = "README.md"
authors = [
    { name = "airt", email = "info@airt.ai" },
    { name = "lancetnik", email = "diementros@gmail.com" },
]

keywords = ["rabbitmq", "kafka", "framework", "nats", "redis", "message brokers"]

requires-python = ">=3.8"

classifiers = [
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Topic :: Internet",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development",
    "Typing :: Typed",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "Environment :: Web Environment",
    "Framework :: AsyncIO",
    "Framework :: Pydantic",
    "Framework :: Pydantic :: 1",
    "Framework :: Pydantic :: 2",
]

dynamic = ["version"]

dependencies = [
    "anyio>=3.7.1,<5",
    "fast-depends>=2.2.6,<3",
    "typer>=0.9,<1",
    "typing-extensions>=4.8.0",
    "uvloop>=0.18.0; sys_platform != 'win32' and (sys_platform != 'cygwin' and platform_python_implementation != 'PyPy')",
]

[project.optional-dependencies]
# public distributions
rabbit = [
    "aio-pika>=9,<10",
]

kafka = [
    "aiokafka>=0.9,<0.10",
]

nats = [
    "nats-py>=2.3.1,<3.0.0"
]

redis = [
    "redis>=5.0.0,<6.0.0"
]

docs = [
    "fastapi>=0.100.0,<1.0.0",
    "uvicorn>=0.17.0,<1.0.0",
]

# dev dependencies
devdocs = [
    "mkdocs-material==9.5.2",
    "mkdocs-static-i18n==1.2.0",
    "mdx-include==1.4.2",
    "mkdocstrings[python]==0.24.0",
    "mkdocs-literate-nav==0.6.1",
    "mkdocs-git-revision-date-localized-plugin==1.2.1",
    "mike==2.0.0",  # versioning
    "mkdocs-minify-plugin==0.7.1",
    "mkdocs-macros-plugin==1.0.5",  # includes with variables
    "mkdocs-glightbox==0.3.5",  # img zoom
    "pillow==10.1.0",
    "cairosvg==2.7.1",
    "requests",  # do not pin it
]

lint = [
    "types-PyYAML",
    "types-setuptools",
    "types-ujson",
    "types-redis",
    "types-Pygments",
    "types-docutils",
    "mypy==1.7.1",
    "black==23.12.0",
    "isort==5.13.2",
    "ruff==0.1.8",
    "pyupgrade-directories==0.3.0",
    "bandit==1.7.6",
    "semgrep==1.52.0",
]

test-core = [
    "coverage[toml]==7.3.2",
    "pytest==7.4.3",
    "pytest-asyncio==0.23.2",
    "dirty-equals==0.7.1.post0",
]

testing = [
    "faststream[test-core]",
    "fastapi==0.105.0",
    "pydantic-settings==2.1.0",
    "httpx==0.25.2",
    "PyYAML==6.0.1",
    "watchfiles==0.21.0",
    "email-validator==2.1.0.post1",
]

dev = [
    "faststream[rabbit,kafka,nats,docs,redis,lint,testing,devdocs]",
    "pre-commit==3.5.0; python_version < '3.9'",
    "pre-commit==3.6.0; python_version >= '3.9'",
    "detect-secrets==1.4.0",
]

[project.urls]
Homepage = "https://faststream.airt.ai/latest/"
Documentation = "https://faststream.airt.ai/latest/getting-started/"
Tracker = "https://github.com/airtai/FastStream/issues"
Source = "https://github.com/airtai/FastStream"
Discord = "https://discord.gg/qFm6aSqq59"

[project.scripts]
faststream = "faststream.__main__:cli"

[tool.hatch.version]
path = "faststream/__about__.py"

[tool.hatch.build]
skip-excluded-dirs = true
exclude = [
    "/tests",
    "/docs",
]

[tool.mypy]
strict = true
python_version = "3.8"
ignore_missing_imports = true
install_types = true
non_interactive = true
plugins = [
    "pydantic.mypy"
]

# from https://blog.wolt.com/engineering/2021/09/30/professional-grade-mypy-configuration/
disallow_untyped_defs = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
show_error_codes = true
warn_unused_ignores = false

disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_any_unimported = false

[tool.isort]
profile = "black"
known_first_party = ["faststream"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'

[tool.ruff]
fix = true
line-length = 88
target-version = "py38"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "Q",   # flake8-quotes
    "T20", # flake8-print
]
ignore = [
    "E501",  # line too long, handled by black
    "C901",  # too complex
]

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.flake8-bugbear]
extend-immutable-calls = [
    "faststream.Depends", "faststream.Context", "faststream.broker.fastapi.context.Context",
    "faststream.Header", "faststream.Path",
    "faststream.utils.Header", "faststream.utils.Path",
    "faststream.utils.Depends", "faststream.utils.Context",
    "faststream.utils.context.Depends", "faststream.utils.context.Context",
    "typer.Argument", "typer.Option",
    "pydantic.Field", "rocketry.args.Arg",
    "fastapi.Depends", "fastapi.Header",
    "fastapi.datastructures.Default",
    "kafka.partitioner.default.DefaultPartitioner",
]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-q -m 'not slow'"
testpaths = [
    "tests",
]
markers = [
    "rabbit",
    "kafka",
    "nats",
    "redis",
    "slow",
    "all",
]

[tool.coverage.run]
parallel = true
branch = true
concurrency = [
    "multiprocessing",
    "thread"
]
source = [
    "docs/docs_src",
    "faststream",
    "tests"
]
context = '${CONTEXT}'
omit = [
    "**/__init__.py",
    "tests/mypy/*",
]

[tool.coverage.report]
show_missing = true
skip_empty = true
exclude_also = [
    "if __name__ == .__main__.:",
    "self.logger",
    "def __repr__",
    "lambda: None",
    "from .*",
    "import .*",
    '@(abc\.)?abstractmethod',
    "raise NotImplementedError",
    'raise AssertionError',
    'logger\..*',
    "pass",
    '\.\.\.',
]
omit = [
    '*/__about__.py',
    '*/__main__.py',
    '*/__init__.py',
    '*/annotations.py',
    'docs/docs_src/getting_started/serialization/avro.py',
    'docs/docs_src/getting_started/serialization/msgpack_ex.py',
    'docs/docs_src/getting_started/serialization/protobuf.py',
    'docs/docs_src/integrations/http_frameworks_integrations/aiohttp.py',
    'docs/docs_src/integrations/http_frameworks_integrations/blacksheep.py',
    'docs/docs_src/integrations/http_frameworks_integrations/falcon.py',
    'docs/docs_src/integrations/http_frameworks_integrations/litestar.py',
    'docs/docs_src/integrations/http_frameworks_integrations/quart.py',
    'docs/docs_src/integrations/http_frameworks_integrations/sanic.py',
    'docs/docs_src/integrations/http_frameworks_integrations/tornado.py',
]

[tool.bandit]
