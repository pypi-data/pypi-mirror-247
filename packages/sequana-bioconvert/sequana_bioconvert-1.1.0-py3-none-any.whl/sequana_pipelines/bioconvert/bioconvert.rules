"""bioconvert pipeline

Author: Thomas Cokelaer
Affiliation: Institut Pasteur @ 2019

This pipeline is part of Sequana software (sequana.readthedocs.io)

snakemake -s bioconvert.rules --forceall --stats stats.txt --cores 4


"""
import glob
from sequana_pipetools import PipelineManager

# This must be defined before the include
configfile: "config.yaml"


# A convenient manager
manager = PipelineManager("bioconvert", config, fastq=False)


command = config["bioconvert"]["command"]
inext = config["bioconvert"]['input_extension']
outext = config["bioconvert"]['output_extension']
method = config["bioconvert"]['method']
input_pattern = config["input_pattern"]


filenames = glob.glob(config["input_directory"] + os.sep + input_pattern)

samples = [Path(x).name.split(".")[0] for x in filenames]


# create symbolic links
try:
    os.mkdir("input")
except:
    pass

for filename in filenames:
    try:
        os.symlink(filename, "./input/{}".format(os.path.basename(filename)))
    except:
        pass


rule all:
    input: ["output/{}.{}".format(x,outext) for x in samples]


method = config["bioconvert"].get("method", "")

rule bioconvert:
    input:
        "input/{sample}." + inext
    output:
        "output/{sample}." + outext
    params:
        command= config['bioconvert']['command'],
        method= f" --method {method}" if method else ""
    resources:
        **config["bioconvert"]["resources"]
    container:
        config['apptainers']['bioconvert']
    shell:
        """
           bioconvert {params.command} {input} {output} --verbosity ERROR --force {params.method}
        """

onsuccess:
    shell("chmod -R g+w .")
    manager.teardown()
    print("Once done, please clean up the directory using\n'make clean'")

onerror:
    manager.onerror()

